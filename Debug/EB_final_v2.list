
EB_final_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006058  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006258  08006258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006318  08006318  000201ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006320  08006320  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006320  08006320  00016320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  08006394  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  08006434  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008b4  200001ac  080064d4  000201ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a60  080064d4  00020a60  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201da  2**0
                  CONTENTS, READONLY
 15 .debug_info   00014226  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002ca7  00000000  00000000  00034443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000f90  00000000  00000000  000370f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000bf1  00000000  00000000  00038080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a350  00000000  00000000  00038c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001361a  00000000  00000000  00062fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010166f  00000000  00000000  000765db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004864  00000000  00000000  00177c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  0017c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ac 	.word	0x200001ac
 800021c:	00000000 	.word	0x00000000
 8000220:	08006240 	.word	0x08006240

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b0 	.word	0x200001b0
 800023c:	08006240 	.word	0x08006240

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <_write>:

// This character buffer array will
// store the result after conversion complete
//char dma_result_buffer[100];

int _write(int file, char *ptr, int len){
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
	int i=0;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e009      	b.n	8000654 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60ba      	str	r2, [r7, #8]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffc7 	bl	80005dc <ITM_SendChar>
	for(i=0;i<len;i++){
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf1      	blt.n	8000640 <_write+0x16>
	}
	return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	adc_conv_complete_flag = 1;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	200008f0 	.word	0x200008f0

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	flag_forward = 0;
 800068e:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <main+0x120>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
	flag_backwoard = 0;
 8000694:	4b45      	ldr	r3, [pc, #276]	; (80007ac <main+0x124>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
	flag_left = 0;
 800069a:	4b45      	ldr	r3, [pc, #276]	; (80007b0 <main+0x128>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
	flag_right = 0;
 80006a0:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <main+0x12c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f000 fe1e 	bl	80012e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f89b 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 fa51 	bl	8000b54 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b2:	f000 fa31 	bl	8000b18 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80006b6:	f000 f9d1 	bl	8000a5c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006ba:	f000 f9ff 	bl	8000abc <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80006be:	f000 f903 	bl	80008c8 <MX_ADC1_Init>
  MX_ETH_Init();
 80006c2:	f000 f97d 	bl	80009c0 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */

  printf(" hello world\n");
 80006c6:	483c      	ldr	r0, [pc, #240]	; (80007b8 <main+0x130>)
 80006c8:	f004 ff50 	bl	800556c <puts>
  // Initialize the DMA conversion
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_dma_result , adc_channel_count);
 80006cc:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <main+0x134>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	493b      	ldr	r1, [pc, #236]	; (80007c0 <main+0x138>)
 80006d4:	483b      	ldr	r0, [pc, #236]	; (80007c4 <main+0x13c>)
 80006d6:	f000 fecb 	bl	8001470 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if(adc_conv_complete_flag == 1){
 80006da:	4b3b      	ldr	r3, [pc, #236]	; (80007c8 <main+0x140>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d1fb      	bne.n	80006da <main+0x52>

    	  printf("flag = 1");
 80006e2:	483a      	ldr	r0, [pc, #232]	; (80007cc <main+0x144>)
 80006e4:	f004 fedc 	bl	80054a0 <iprintf>
    	  printf("CH_1: %d, CH_2: %d, CH_3: %d, CH_4: %d\r\n", adc_dma_result[0], adc_dma_result[1], adc_dma_result[2], adc_dma_result[3]);
 80006e8:	4b35      	ldr	r3, [pc, #212]	; (80007c0 <main+0x138>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <main+0x138>)
 80006f2:	885b      	ldrh	r3, [r3, #2]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <main+0x138>)
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <main+0x138>)
 8000702:	88db      	ldrh	r3, [r3, #6]
 8000704:	b29b      	uxth	r3, r3
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	4603      	mov	r3, r0
 800070a:	4831      	ldr	r0, [pc, #196]	; (80007d0 <main+0x148>)
 800070c:	f004 fec8 	bl	80054a0 <iprintf>
	  	  //HAL_UART_Transmit(&huart3, (uint8_t *) dma_result_buffer, sizeof(dma_result_buffer), HAL_MAX_DELAY);
	  	  adc_conv_complete_flag = 0;
 8000710:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <main+0x140>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
       	  HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071a:	f000 fe41 	bl	80013a0 <HAL_Delay>
       	  if (adc_dma_result[0] >= 3800){
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <main+0x138>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b29b      	uxth	r3, r3
 8000724:	f640 62d7 	movw	r2, #3799	; 0xed7
 8000728:	4293      	cmp	r3, r2
 800072a:	d906      	bls.n	800073a <main+0xb2>
       		  //forward
       		  printf("forward\n");
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <main+0x14c>)
 800072e:	f004 ff1d 	bl	800556c <puts>
       		  flag_forward = 1;
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <main+0x120>)
 8000734:	2201      	movs	r2, #1
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	e002      	b.n	8000740 <main+0xb8>
       	  }else{
       		flag_forward = 0;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <main+0x120>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
       	  }
       	  if (adc_dma_result[1] >= 3800){
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <main+0x138>)
 8000742:	885b      	ldrh	r3, [r3, #2]
 8000744:	b29b      	uxth	r3, r3
 8000746:	f640 62d7 	movw	r2, #3799	; 0xed7
 800074a:	4293      	cmp	r3, r2
 800074c:	d906      	bls.n	800075c <main+0xd4>
       		  //backward
       		printf("backward\n");
 800074e:	4822      	ldr	r0, [pc, #136]	; (80007d8 <main+0x150>)
 8000750:	f004 ff0c 	bl	800556c <puts>
       		flag_backwoard =1;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <main+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	e002      	b.n	8000762 <main+0xda>
       	  }else{
       		flag_backwoard = 0;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <main+0x124>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
       	  }
       	  if (adc_dma_result[2] >= 3800){
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <main+0x138>)
 8000764:	889b      	ldrh	r3, [r3, #4]
 8000766:	b29b      	uxth	r3, r3
 8000768:	f640 62d7 	movw	r2, #3799	; 0xed7
 800076c:	4293      	cmp	r3, r2
 800076e:	d906      	bls.n	800077e <main+0xf6>
       		  //left
       		printf("left\n");
 8000770:	481a      	ldr	r0, [pc, #104]	; (80007dc <main+0x154>)
 8000772:	f004 fefb 	bl	800556c <puts>
       		flag_left = 1;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <main+0x128>)
 8000778:	2201      	movs	r2, #1
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	e002      	b.n	8000784 <main+0xfc>

       	  }else{
       		flag_left = 0;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <main+0x128>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
       	  }
       	  if (adc_dma_result[3] >= 3800){
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <main+0x138>)
 8000786:	88db      	ldrh	r3, [r3, #6]
 8000788:	b29b      	uxth	r3, r3
 800078a:	f640 62d7 	movw	r2, #3799	; 0xed7
 800078e:	4293      	cmp	r3, r2
 8000790:	d906      	bls.n	80007a0 <main+0x118>
       		  //right
       		printf("right\n");
 8000792:	4813      	ldr	r0, [pc, #76]	; (80007e0 <main+0x158>)
 8000794:	f004 feea 	bl	800556c <puts>
       		flag_right =1;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <main+0x12c>)
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	e79c      	b.n	80006da <main+0x52>
       	  }else{
       		flag_right =0;
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <main+0x12c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
      if(adc_conv_complete_flag == 1){
 80007a6:	e798      	b.n	80006da <main+0x52>
 80007a8:	200008f4 	.word	0x200008f4
 80007ac:	200008f8 	.word	0x200008f8
 80007b0:	200008fc 	.word	0x200008fc
 80007b4:	20000900 	.word	0x20000900
 80007b8:	08006258 	.word	0x08006258
 80007bc:	20000000 	.word	0x20000000
 80007c0:	200008e8 	.word	0x200008e8
 80007c4:	20000200 	.word	0x20000200
 80007c8:	200008f0 	.word	0x200008f0
 80007cc:	08006268 	.word	0x08006268
 80007d0:	08006274 	.word	0x08006274
 80007d4:	080062a0 	.word	0x080062a0
 80007d8:	080062a8 	.word	0x080062a8
 80007dc:	080062b4 	.word	0x080062b4
 80007e0:	080062bc 	.word	0x080062bc

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	; 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2234      	movs	r2, #52	; 0x34
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 ff9a 	bl	800572c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000808:	f002 fcd0 	bl	80031ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <SystemClock_Config+0xdc>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a2b      	ldr	r2, [pc, #172]	; (80008c0 <SystemClock_Config+0xdc>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <SystemClock_Config+0xdc>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <SystemClock_Config+0xe0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800082c:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <SystemClock_Config+0xe0>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <SystemClock_Config+0xe0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000840:	2301      	movs	r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000844:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000848:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000858:	2360      	movs	r3, #96	; 0x60
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000864:	2302      	movs	r3, #2
 8000866:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fcfd 	bl	800326c <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000878:	f000 fa0e 	bl	8000c98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800087c:	f002 fca6 	bl	80031cc <HAL_PWREx_EnableOverDrive>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000886:	f000 fa07 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2302      	movs	r3, #2
 8000890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2103      	movs	r1, #3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 ff8e 	bl	80037c8 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008b2:	f000 f9f1 	bl	8000c98 <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	; 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008da:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <MX_ADC1_Init+0xec>)
 80008dc:	4a36      	ldr	r2, [pc, #216]	; (80009b8 <MX_ADC1_Init+0xf0>)
 80008de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e0:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <MX_ADC1_Init+0xec>)
 80008e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e8:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <MX_ADC1_Init+0xec>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ee:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <MX_ADC1_Init+0xec>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <MX_ADC1_Init+0xec>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MX_ADC1_Init+0xec>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000902:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <MX_ADC1_Init+0xec>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <MX_ADC1_Init+0xec>)
 800090a:	4a2c      	ldr	r2, [pc, #176]	; (80009bc <MX_ADC1_Init+0xf4>)
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090e:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_ADC1_Init+0xec>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <MX_ADC1_Init+0xec>)
 8000916:	2204      	movs	r2, #4
 8000918:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_ADC1_Init+0xec>)
 800091c:	2201      	movs	r2, #1
 800091e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000922:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <MX_ADC1_Init+0xec>)
 8000924:	2201      	movs	r2, #1
 8000926:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000928:	4822      	ldr	r0, [pc, #136]	; (80009b4 <MX_ADC1_Init+0xec>)
 800092a:	f000 fd5d 	bl	80013e8 <HAL_ADC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000934:	f000 f9b0 	bl	8000c98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000938:	2303      	movs	r3, #3
 800093a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093c:	2301      	movs	r3, #1
 800093e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	481a      	ldr	r0, [pc, #104]	; (80009b4 <MX_ADC1_Init+0xec>)
 800094a:	f000 fe9f 	bl	800168c <HAL_ADC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000954:	f000 f9a0 	bl	8000c98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000958:	2304      	movs	r3, #4
 800095a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800095c:	2302      	movs	r3, #2
 800095e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4813      	ldr	r0, [pc, #76]	; (80009b4 <MX_ADC1_Init+0xec>)
 8000966:	f000 fe91 	bl	800168c <HAL_ADC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000970:	f000 f992 	bl	8000c98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000974:	2305      	movs	r3, #5
 8000976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000978:	2303      	movs	r3, #3
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_ADC1_Init+0xec>)
 8000982:	f000 fe83 	bl	800168c <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800098c:	f000 f984 	bl	8000c98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000990:	2306      	movs	r3, #6
 8000992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000994:	2304      	movs	r3, #4
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_ADC1_Init+0xec>)
 800099e:	f000 fe75 	bl	800168c <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009a8:	f000 f976 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000200 	.word	0x20000200
 80009b8:	40012000 	.word	0x40012000
 80009bc:	0f000001 	.word	0x0f000001

080009c0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_ETH_Init+0x84>)
 80009c6:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <MX_ETH_Init+0x88>)
 80009c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009d8:	22e1      	movs	r2, #225	; 0xe1
 80009da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_ETH_Init+0x84>)
 80009f0:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <MX_ETH_Init+0x8c>)
 80009f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_ETH_Init+0x84>)
 80009f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009fa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_ETH_Init+0x84>)
 80009fe:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <MX_ETH_Init+0x90>)
 8000a00:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_ETH_Init+0x84>)
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <MX_ETH_Init+0x94>)
 8000a06:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_ETH_Init+0x84>)
 8000a0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a0e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_ETH_Init+0x84>)
 8000a12:	f001 fd97 	bl	8002544 <HAL_ETH_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a1c:	f000 f93c 	bl	8000c98 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a20:	2238      	movs	r2, #56	; 0x38
 8000a22:	2100      	movs	r1, #0
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_ETH_Init+0x98>)
 8000a26:	f004 fe81 	bl	800572c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_ETH_Init+0x98>)
 8000a2c:	2221      	movs	r2, #33	; 0x21
 8000a2e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_ETH_Init+0x98>)
 8000a32:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a36:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_ETH_Init+0x98>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200002a8 	.word	0x200002a8
 8000a48:	40028000 	.word	0x40028000
 8000a4c:	20000904 	.word	0x20000904
 8000a50:	2000010c 	.word	0x2000010c
 8000a54:	2000006c 	.word	0x2000006c
 8000a58:	200001c8 	.word	0x200001c8

08000a5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <MX_USART3_UART_Init+0x5c>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000aa0:	f003 fce0 	bl	8004464 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aaa:	f000 f8f5 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000358 	.word	0x20000358
 8000ab8:	40004800 	.word	0x40004800

08000abc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ac6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2206      	movs	r2, #6
 8000acc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b00:	f002 fa0b 	bl	8002f1a <HAL_PCD_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b0a:	f000 f8c5 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200003e0 	.word	0x200003e0

08000b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_DMA_Init+0x38>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <MX_DMA_Init+0x38>)
 8000b24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_DMA_Init+0x38>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2038      	movs	r0, #56	; 0x38
 8000b3c:	f001 f953 	bl	8001de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b40:	2038      	movs	r0, #56	; 0x38
 8000b42:	f001 f96c 	bl	8001e1e <HAL_NVIC_EnableIRQ>

}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b47      	ldr	r3, [pc, #284]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b44      	ldr	r3, [pc, #272]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	4b41      	ldr	r3, [pc, #260]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a40      	ldr	r2, [pc, #256]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a3a      	ldr	r2, [pc, #232]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a34      	ldr	r2, [pc, #208]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a2e      	ldr	r2, [pc, #184]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be2:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a28      	ldr	r2, [pc, #160]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_GPIO_Init+0x134>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c00:	4822      	ldr	r0, [pc, #136]	; (8000c8c <MX_GPIO_Init+0x138>)
 8000c02:	f002 f971 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2140      	movs	r1, #64	; 0x40
 8000c0a:	4821      	ldr	r0, [pc, #132]	; (8000c90 <MX_GPIO_Init+0x13c>)
 8000c0c:	f002 f96c 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	481b      	ldr	r0, [pc, #108]	; (8000c94 <MX_GPIO_Init+0x140>)
 8000c28:	f001 ffb2 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c2c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_GPIO_Init+0x138>)
 8000c46:	f001 ffa3 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c4a:	2340      	movs	r3, #64	; 0x40
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <MX_GPIO_Init+0x13c>)
 8000c62:	f001 ff95 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_GPIO_Init+0x13c>)
 8000c7a:	f001 ff89 	bl	8002b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7e:	bf00      	nop
 8000c80:	3730      	adds	r7, #48	; 0x30
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40021800 	.word	0x40021800
 8000c94:	40020800 	.word	0x40020800

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>
	...

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a2d      	ldr	r2, [pc, #180]	; (8000dc0 <HAL_ADC_MspInit+0xd4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d153      	bne.n	8000db6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <HAL_ADC_MspInit+0xd8>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a2c      	ldr	r2, [pc, #176]	; (8000dc4 <HAL_ADC_MspInit+0xd8>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_ADC_MspInit+0xd8>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <HAL_ADC_MspInit+0xd8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a26      	ldr	r2, [pc, #152]	; (8000dc4 <HAL_ADC_MspInit+0xd8>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <HAL_ADC_MspInit+0xd8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d3e:	2378      	movs	r3, #120	; 0x78
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	2303      	movs	r3, #3
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <HAL_ADC_MspInit+0xdc>)
 8000d52:	f001 ff1d 	bl	8002b90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <HAL_ADC_MspInit+0xe4>)
 8000d5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d9a:	480c      	ldr	r0, [pc, #48]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000d9c:	f001 f85a 	bl	8001e54 <HAL_DMA_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000da6:	f7ff ff77 	bl	8000c98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000dae:	639a      	str	r2, [r3, #56]	; 0x38
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_ADC_MspInit+0xe0>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40012000 	.word	0x40012000
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	20000248 	.word	0x20000248
 8000dd0:	40026410 	.word	0x40026410

08000dd4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	; 0x38
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a4e      	ldr	r2, [pc, #312]	; (8000f2c <HAL_ETH_MspInit+0x158>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	f040 8096 	bne.w	8000f24 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000df8:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	4a4c      	ldr	r2, [pc, #304]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000dfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e02:	6313      	str	r3, [r2, #48]	; 0x30
 8000e04:	4b4a      	ldr	r3, [pc, #296]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e0c:	623b      	str	r3, [r7, #32]
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	4b47      	ldr	r3, [pc, #284]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	4a46      	ldr	r2, [pc, #280]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1c:	4b44      	ldr	r3, [pc, #272]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	4b41      	ldr	r3, [pc, #260]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b3e      	ldr	r3, [pc, #248]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e40:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a3a      	ldr	r2, [pc, #232]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a34      	ldr	r2, [pc, #208]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a28      	ldr	r2, [pc, #160]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ea0:	2332      	movs	r3, #50	; 0x32
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb0:	230b      	movs	r3, #11
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481e      	ldr	r0, [pc, #120]	; (8000f34 <HAL_ETH_MspInit+0x160>)
 8000ebc:	f001 fe68 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ec0:	2386      	movs	r3, #134	; 0x86
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed0:	230b      	movs	r3, #11
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4817      	ldr	r0, [pc, #92]	; (8000f38 <HAL_ETH_MspInit+0x164>)
 8000edc:	f001 fe58 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef2:	230b      	movs	r3, #11
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	480f      	ldr	r0, [pc, #60]	; (8000f3c <HAL_ETH_MspInit+0x168>)
 8000efe:	f001 fe47 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f14:	230b      	movs	r3, #11
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4808      	ldr	r0, [pc, #32]	; (8000f40 <HAL_ETH_MspInit+0x16c>)
 8000f20:	f001 fe36 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3738      	adds	r7, #56	; 0x38
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40028000 	.word	0x40028000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40021800 	.word	0x40021800

08000f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0ae      	sub	sp, #184	; 0xb8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2290      	movs	r2, #144	; 0x90
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 fbe1 	bl	800572c <memset>
  if(huart->Instance==USART3)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <HAL_UART_MspInit+0xb4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d13c      	bne.n	8000fee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 fe46 	bl	8003c14 <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f8e:	f7ff fe83 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <HAL_UART_MspInit+0xb8>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_UART_MspInit+0xb8>)
 8000f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_UART_MspInit+0xb8>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_UART_MspInit+0xb8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <HAL_UART_MspInit+0xb8>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_UART_MspInit+0xb8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_UART_MspInit+0xbc>)
 8000fea:	f001 fdd1 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	37b8      	adds	r7, #184	; 0xb8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40004800 	.word	0x40004800
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020c00 	.word	0x40020c00

08001004 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0ae      	sub	sp, #184	; 0xb8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2290      	movs	r2, #144	; 0x90
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f004 fb81 	bl	800572c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001032:	d159      	bne.n	80010e8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001034:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001038:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fde5 	bl	8003c14 <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001050:	f7ff fe22 	bl	8000c98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_PCD_MspInit+0xec>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4a25      	ldr	r2, [pc, #148]	; (80010f0 <HAL_PCD_MspInit+0xec>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6313      	str	r3, [r2, #48]	; 0x30
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_PCD_MspInit+0xec>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800106c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001086:	230a      	movs	r3, #10
 8001088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001090:	4619      	mov	r1, r3
 8001092:	4818      	ldr	r0, [pc, #96]	; (80010f4 <HAL_PCD_MspInit+0xf0>)
 8001094:	f001 fd7c 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800109c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4810      	ldr	r0, [pc, #64]	; (80010f4 <HAL_PCD_MspInit+0xf0>)
 80010b4:	f001 fd6c 	bl	8002b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <HAL_PCD_MspInit+0xec>)
 80010ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010bc:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <HAL_PCD_MspInit+0xec>)
 80010be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c2:	6353      	str	r3, [r2, #52]	; 0x34
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_PCD_MspInit+0xec>)
 80010c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_PCD_MspInit+0xec>)
 80010d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_PCD_MspInit+0xec>)
 80010d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010da:	6453      	str	r3, [r2, #68]	; 0x44
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_PCD_MspInit+0xec>)
 80010de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	37b8      	adds	r7, #184	; 0xb8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f90c 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <DMA2_Stream0_IRQHandler+0x10>)
 8001152:	f000 ff8d 	bl	8002070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000248 	.word	0x20000248

08001160 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e00a      	b.n	8001188 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001172:	f3af 8000 	nop.w
 8001176:	4601      	mov	r1, r0
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	b2ca      	uxtb	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	dbf0      	blt.n	8001172 <_read+0x12>
  }

  return len;
 8001190:	687b      	ldr	r3, [r7, #4]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_close>:
  }
  return len;
}

int _close(int file)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c2:	605a      	str	r2, [r3, #4]
  return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <_isatty>:

int _isatty(int file)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <_sbrk+0x5c>)
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <_sbrk+0x60>)
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <_sbrk+0x64>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <_sbrk+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	429a      	cmp	r2, r3
 8001232:	d207      	bcs.n	8001244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001234:	f004 fac8 	bl	80057c8 <__errno>
 8001238:	4603      	mov	r3, r0
 800123a:	220c      	movs	r2, #12
 800123c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	e009      	b.n	8001258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <_sbrk+0x64>)
 8001254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20080000 	.word	0x20080000
 8001264:	00000400 	.word	0x00000400
 8001268:	2000090c 	.word	0x2000090c
 800126c:	20000a60 	.word	0x20000a60

08001270 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <SystemInit+0x20>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <SystemInit+0x20>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800129a:	490e      	ldr	r1, [pc, #56]	; (80012d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800129c:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b0:	4c0b      	ldr	r4, [pc, #44]	; (80012e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012be:	f7ff ffd7 	bl	8001270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f004 fa87 	bl	80057d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c6:	f7ff f9df 	bl	8000688 <main>
  bx  lr    
 80012ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012d8:	08006328 	.word	0x08006328
  ldr r2, =_sbss
 80012dc:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 80012e0:	20000a60 	.word	0x20000a60

080012e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC_IRQHandler>

080012e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 fd70 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f000 f805 	bl	8001300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f6:	f7ff fcd5 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x54>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x58>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fd8b 	bl	8001e3a <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 fd53 	bl	8001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_InitTick+0x5c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000004 	.word	0x20000004
 8001358:	2000000c 	.word	0x2000000c
 800135c:	20000008 	.word	0x20000008

08001360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x20>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x24>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_IncTick+0x24>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	2000000c 	.word	0x2000000c
 8001384:	20000910 	.word	0x20000910

08001388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_GetTick+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000910 	.word	0x20000910

080013a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a8:	f7ff ffee 	bl	8001388 <HAL_GetTick>
 80013ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b8:	d005      	beq.n	80013c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_Delay+0x44>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c6:	bf00      	nop
 80013c8:	f7ff ffde 	bl	8001388 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8f7      	bhi.n	80013c8 <HAL_Delay+0x28>
  {
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000000c 	.word	0x2000000c

080013e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e031      	b.n	8001462 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fc70 	bl	8000cec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	d116      	bne.n	8001454 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_ADC_Init+0x84>)
 800142c:	4013      	ands	r3, r2
 800142e:	f043 0202 	orr.w	r2, r3, #2
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 fa7e 	bl	8001938 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f023 0303 	bic.w	r3, r3, #3
 800144a:	f043 0201 	orr.w	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	641a      	str	r2, [r3, #64]	; 0x40
 8001452:	e001      	b.n	8001458 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	ffffeefd 	.word	0xffffeefd

08001470 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_ADC_Start_DMA+0x1e>
 800148a:	2302      	movs	r3, #2
 800148c:	e0d4      	b.n	8001638 <HAL_ADC_Start_DMA+0x1c8>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d018      	beq.n	80014d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80014b4:	4b62      	ldr	r3, [pc, #392]	; (8001640 <HAL_ADC_Start_DMA+0x1d0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a62      	ldr	r2, [pc, #392]	; (8001644 <HAL_ADC_Start_DMA+0x1d4>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0c9a      	lsrs	r2, r3, #18
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80014c8:	e002      	b.n	80014d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f9      	bne.n	80014ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f040 809c 	bne.w	800161e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ea:	4b57      	ldr	r3, [pc, #348]	; (8001648 <HAL_ADC_Start_DMA+0x1d8>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800150c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001520:	d106      	bne.n	8001530 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f023 0206 	bic.w	r2, r3, #6
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
 800152e:	e002      	b.n	8001536 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001542:	4a42      	ldr	r2, [pc, #264]	; (800164c <HAL_ADC_Start_DMA+0x1dc>)
 8001544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	4a41      	ldr	r2, [pc, #260]	; (8001650 <HAL_ADC_Start_DMA+0x1e0>)
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	4a40      	ldr	r2, [pc, #256]	; (8001654 <HAL_ADC_Start_DMA+0x1e4>)
 8001554:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800155e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800156e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800157e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	334c      	adds	r3, #76	; 0x4c
 800158a:	4619      	mov	r1, r3
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f000 fd0e 	bl	8001fb0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001594:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_ADC_Start_DMA+0x1e8>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 031f 	and.w	r3, r3, #31
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10f      	bne.n	80015c0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d143      	bne.n	8001636 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	e03a      	b.n	8001636 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a25      	ldr	r2, [pc, #148]	; (800165c <HAL_ADC_Start_DMA+0x1ec>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10e      	bne.n	80015e8 <HAL_ADC_Start_DMA+0x178>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d107      	bne.n	80015e8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015e6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <HAL_ADC_Start_DMA+0x1e8>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d120      	bne.n	8001636 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a19      	ldr	r2, [pc, #100]	; (8001660 <HAL_ADC_Start_DMA+0x1f0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d11b      	bne.n	8001636 <HAL_ADC_Start_DMA+0x1c6>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d114      	bne.n	8001636 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	e00b      	b.n	8001636 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f043 0210 	orr.w	r2, r3, #16
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f043 0201 	orr.w	r2, r3, #1
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000004 	.word	0x20000004
 8001644:	431bde83 	.word	0x431bde83
 8001648:	fffff8fe 	.word	0xfffff8fe
 800164c:	08001b2d 	.word	0x08001b2d
 8001650:	08001be7 	.word	0x08001be7
 8001654:	08001c03 	.word	0x08001c03
 8001658:	40012300 	.word	0x40012300
 800165c:	40012000 	.word	0x40012000
 8001660:	40012200 	.word	0x40012200

08001664 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1c>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e136      	b.n	8001916 <HAL_ADC_ConfigChannel+0x28a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d93a      	bls.n	800172e <HAL_ADC_ConfigChannel+0xa2>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016c0:	d035      	beq.n	800172e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68d9      	ldr	r1, [r3, #12]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	3b1e      	subs	r3, #30
 80016d8:	2207      	movs	r2, #7
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	400a      	ands	r2, r1
 80016e6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a8d      	ldr	r2, [pc, #564]	; (8001924 <HAL_ADC_ConfigChannel+0x298>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68d9      	ldr	r1, [r3, #12]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	061a      	lsls	r2, r3, #24
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001706:	e035      	b.n	8001774 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68d9      	ldr	r1, [r3, #12]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	4603      	mov	r3, r0
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4403      	add	r3, r0
 8001720:	3b1e      	subs	r3, #30
 8001722:	409a      	lsls	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800172c:	e022      	b.n	8001774 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6919      	ldr	r1, [r3, #16]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	2207      	movs	r2, #7
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43da      	mvns	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	400a      	ands	r2, r1
 8001750:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6919      	ldr	r1, [r3, #16]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	4618      	mov	r0, r3
 8001764:	4603      	mov	r3, r0
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4403      	add	r3, r0
 800176a:	409a      	lsls	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b06      	cmp	r3, #6
 800177a:	d824      	bhi.n	80017c6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	3b05      	subs	r3, #5
 800178e:	221f      	movs	r2, #31
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43da      	mvns	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	400a      	ands	r2, r1
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	3b05      	subs	r3, #5
 80017b8:	fa00 f203 	lsl.w	r2, r0, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
 80017c4:	e04c      	b.n	8001860 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d824      	bhi.n	8001818 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3b23      	subs	r3, #35	; 0x23
 80017e0:	221f      	movs	r2, #31
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	400a      	ands	r2, r1
 80017ee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	3b23      	subs	r3, #35	; 0x23
 800180a:	fa00 f203 	lsl.w	r2, r0, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
 8001816:	e023      	b.n	8001860 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b41      	subs	r3, #65	; 0x41
 800182a:	221f      	movs	r2, #31
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43da      	mvns	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	400a      	ands	r2, r1
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	3b41      	subs	r3, #65	; 0x41
 8001854:	fa00 f203 	lsl.w	r2, r0, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a30      	ldr	r2, [pc, #192]	; (8001928 <HAL_ADC_ConfigChannel+0x29c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d10a      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1f4>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001872:	d105      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a2c      	ldr	r2, [pc, #176]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 800187a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800187e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a28      	ldr	r2, [pc, #160]	; (8001928 <HAL_ADC_ConfigChannel+0x29c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10f      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x21e>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b12      	cmp	r3, #18
 8001890:	d10b      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4a25      	ldr	r2, [pc, #148]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 8001898:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800189c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800189e:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a22      	ldr	r2, [pc, #136]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1e      	ldr	r2, [pc, #120]	; (8001928 <HAL_ADC_ConfigChannel+0x29c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d12b      	bne.n	800190c <HAL_ADC_ConfigChannel+0x280>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_ADC_ConfigChannel+0x298>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d003      	beq.n	80018c6 <HAL_ADC_ConfigChannel+0x23a>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b11      	cmp	r3, #17
 80018c4:	d122      	bne.n	800190c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a18      	ldr	r2, [pc, #96]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018d0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a15      	ldr	r2, [pc, #84]	; (800192c <HAL_ADC_ConfigChannel+0x2a0>)
 80018d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <HAL_ADC_ConfigChannel+0x298>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d111      	bne.n	800190c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_ADC_ConfigChannel+0x2a4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_ADC_ConfigChannel+0x2a8>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0c9a      	lsrs	r2, r3, #18
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018fe:	e002      	b.n	8001906 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3b01      	subs	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f9      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	10000012 	.word	0x10000012
 8001928:	40012000 	.word	0x40012000
 800192c:	40012300 	.word	0x40012300
 8001930:	20000004 	.word	0x20000004
 8001934:	431bde83 	.word	0x431bde83

08001938 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001940:	4b78      	ldr	r3, [pc, #480]	; (8001b24 <ADC_Init+0x1ec>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a77      	ldr	r2, [pc, #476]	; (8001b24 <ADC_Init+0x1ec>)
 8001946:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800194a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800194c:	4b75      	ldr	r3, [pc, #468]	; (8001b24 <ADC_Init+0x1ec>)
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4973      	ldr	r1, [pc, #460]	; (8001b24 <ADC_Init+0x1ec>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	021a      	lsls	r2, r3, #8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800198c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <ADC_Init+0x1f0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d022      	beq.n	8001a12 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e00f      	b.n	8001a32 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0202 	bic.w	r2, r2, #2
 8001a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	005a      	lsls	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	035a      	lsls	r2, r3, #13
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	e007      	b.n	8001aa8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	051a      	lsls	r2, r3, #20
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aea:	025a      	lsls	r2, r3, #9
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	029a      	lsls	r2, r3, #10
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40012300 	.word	0x40012300
 8001b28:	0f000001 	.word	0x0f000001

08001b2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d13c      	bne.n	8001bc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d12b      	bne.n	8001bb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d127      	bne.n	8001bb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d119      	bne.n	8001bb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0220 	bic.w	r2, r2, #32
 8001b92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7fe fd55 	bl	8000668 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bbe:	e00e      	b.n	8001bde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff fd53 	bl	8001678 <HAL_ADC_ErrorCallback>
}
 8001bd2:	e004      	b.n	8001bde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f7ff fd35 	bl	8001664 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2240      	movs	r2, #64	; 0x40
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f043 0204 	orr.w	r2, r3, #4
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff fd28 	bl	8001678 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <__NVIC_SetPriorityGrouping>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <__NVIC_SetPriorityGrouping+0x40>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x40>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	05fa0000 	.word	0x05fa0000

08001c78 <__NVIC_GetPriorityGrouping>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <__NVIC_EnableIRQ+0x38>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_SetPriority>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	; (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff29 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff3e 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff8e 	bl	8001d24 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff31 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffa2 	bl	8001d8c <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff fa92 	bl	8001388 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e099      	b.n	8001fa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e90:	e00f      	b.n	8001eb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e92:	f7ff fa79 	bl	8001388 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d908      	bls.n	8001eb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e078      	b.n	8001fa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e8      	bne.n	8001e92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_DMA_Init+0x158>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d107      	bne.n	8001f1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	4313      	orrs	r3, r2
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f023 0307 	bic.w	r3, r3, #7
 8001f32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d117      	bne.n	8001f76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00e      	beq.n	8001f76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fa77 	bl	800244c <DMA_CheckFifoParam>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2240      	movs	r2, #64	; 0x40
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f72:	2301      	movs	r3, #1
 8001f74:	e016      	b.n	8001fa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fa2e 	bl	80023e0 <DMA_CalcBaseAndBitshift>
 8001f84:	4603      	mov	r3, r0
 8001f86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	223f      	movs	r2, #63	; 0x3f
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	e010803f 	.word	0xe010803f

08001fb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_DMA_Start_IT+0x26>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e048      	b.n	8002068 <HAL_DMA_Start_IT+0xb8>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d137      	bne.n	800205a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2202      	movs	r2, #2
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f9c0 	bl	8002384 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	223f      	movs	r2, #63	; 0x3f
 800200a:	409a      	lsls	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0216 	orr.w	r2, r2, #22
 800201e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800202e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800207c:	4b8e      	ldr	r3, [pc, #568]	; (80022b8 <HAL_DMA_IRQHandler+0x248>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a8e      	ldr	r2, [pc, #568]	; (80022bc <HAL_DMA_IRQHandler+0x24c>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a9b      	lsrs	r3, r3, #10
 8002088:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	2208      	movs	r2, #8
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01a      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0204 	bic.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2208      	movs	r2, #8
 80020ca:	409a      	lsls	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	2201      	movs	r2, #1
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d012      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	2201      	movs	r2, #1
 8002100:	409a      	lsls	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f043 0202 	orr.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2204      	movs	r2, #4
 8002118:	409a      	lsls	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2204      	movs	r2, #4
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f043 0204 	orr.w	r2, r3, #4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2210      	movs	r2, #16
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d043      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d03c      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2210      	movs	r2, #16
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d018      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d108      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d024      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	e01f      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
 80021b0:	e016      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0208 	bic.w	r2, r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	2220      	movs	r2, #32
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 808f 	beq.w	8002310 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8087 	beq.w	8002310 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	2220      	movs	r2, #32
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b05      	cmp	r3, #5
 8002218:	d136      	bne.n	8002288 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0216 	bic.w	r2, r2, #22
 8002228:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002238:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <HAL_DMA_IRQHandler+0x1da>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0208 	bic.w	r2, r2, #8
 8002258:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	223f      	movs	r2, #63	; 0x3f
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227a:	2b00      	cmp	r3, #0
 800227c:	d07e      	beq.n	800237c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
        }
        return;
 8002286:	e079      	b.n	800237c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01d      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10d      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d031      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
 80022b4:	e02c      	b.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
 80022b6:	bf00      	nop
 80022b8:	20000004 	.word	0x20000004
 80022bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d023      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
 80022d0:	e01e      	b.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10f      	bne.n	8002300 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0210 	bic.w	r2, r2, #16
 80022ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	2b00      	cmp	r3, #0
 8002316:	d032      	beq.n	800237e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d022      	beq.n	800236a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2205      	movs	r2, #5
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	3301      	adds	r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	d307      	bcc.n	8002358 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f2      	bne.n	800233c <HAL_DMA_IRQHandler+0x2cc>
 8002356:	e000      	b.n	800235a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002358:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
 800237a:	e000      	b.n	800237e <HAL_DMA_IRQHandler+0x30e>
        return;
 800237c:	bf00      	nop
    }
  }
}
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d108      	bne.n	80023c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023c2:	e007      	b.n	80023d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3b10      	subs	r3, #16
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <DMA_CalcBaseAndBitshift+0x60>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <DMA_CalcBaseAndBitshift+0x64>)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d908      	bls.n	8002420 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <DMA_CalcBaseAndBitshift+0x68>)
 8002416:	4013      	ands	r3, r2
 8002418:	1d1a      	adds	r2, r3, #4
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	659a      	str	r2, [r3, #88]	; 0x58
 800241e:	e006      	b.n	800242e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <DMA_CalcBaseAndBitshift+0x68>)
 8002428:	4013      	ands	r3, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	aaaaaaab 	.word	0xaaaaaaab
 8002444:	080062dc 	.word	0x080062dc
 8002448:	fffffc00 	.word	0xfffffc00

0800244c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11f      	bne.n	80024a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d856      	bhi.n	800251a <DMA_CheckFifoParam+0xce>
 800246c:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <DMA_CheckFifoParam+0x28>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	08002485 	.word	0x08002485
 8002478:	08002497 	.word	0x08002497
 800247c:	08002485 	.word	0x08002485
 8002480:	0800251b 	.word	0x0800251b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d046      	beq.n	800251e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e043      	b.n	800251e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800249e:	d140      	bne.n	8002522 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a4:	e03d      	b.n	8002522 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ae:	d121      	bne.n	80024f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d837      	bhi.n	8002526 <DMA_CheckFifoParam+0xda>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <DMA_CheckFifoParam+0x70>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024cd 	.word	0x080024cd
 80024c0:	080024d3 	.word	0x080024d3
 80024c4:	080024cd 	.word	0x080024cd
 80024c8:	080024e5 	.word	0x080024e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e030      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d025      	beq.n	800252a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e2:	e022      	b.n	800252a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ec:	d11f      	bne.n	800252e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024f2:	e01c      	b.n	800252e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d903      	bls.n	8002502 <DMA_CheckFifoParam+0xb6>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d003      	beq.n	8002508 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002500:	e018      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
      break;
 8002506:	e015      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00e      	beq.n	8002532 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
      break;
 8002518:	e00b      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      break;
 800251a:	bf00      	nop
 800251c:	e00a      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 800251e:	bf00      	nop
 8002520:	e008      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002522:	bf00      	nop
 8002524:	e006      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002526:	bf00      	nop
 8002528:	e004      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 800252a:	bf00      	nop
 800252c:	e002      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;   
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
    }
  } 
  
  return status; 
 8002534:	7bfb      	ldrb	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop

08002544 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06a      	b.n	800262c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	2b00      	cmp	r3, #0
 800255e:	d106      	bne.n	800256e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2223      	movs	r2, #35	; 0x23
 8002564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7fe fc33 	bl	8000dd4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_ETH_Init+0xf0>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a30      	ldr	r2, [pc, #192]	; (8002634 <HAL_ETH_Init+0xf0>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <HAL_ETH_Init+0xf0>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002586:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <HAL_ETH_Init+0xf4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <HAL_ETH_Init+0xf4>)
 800258c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002590:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002592:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_ETH_Init+0xf4>)
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4927      	ldr	r1, [pc, #156]	; (8002638 <HAL_ETH_Init+0xf4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <HAL_ETH_Init+0xf4>)
 80025a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025bc:	f7fe fee4 	bl	8001388 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025c2:	e011      	b.n	80025e8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025c4:	f7fe fee0 	bl	8001388 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025d2:	d909      	bls.n	80025e8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2204      	movs	r2, #4
 80025d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	22e0      	movs	r2, #224	; 0xe0
 80025e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e021      	b.n	800262c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1e4      	bne.n	80025c4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f958 	bl	80028b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f9ff 	bl	8002a04 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fa55 	bl	8002ab6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	461a      	mov	r2, r3
 8002612:	2100      	movs	r1, #0
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f9bd 	bl	8002994 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2210      	movs	r2, #16
 8002626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	40013800 	.word	0x40013800

0800263c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4b51      	ldr	r3, [pc, #324]	; (8002798 <ETH_SetMACConfig+0x15c>)
 8002652:	4013      	ands	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	7c1b      	ldrb	r3, [r3, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <ETH_SetMACConfig+0x28>
 800265e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002662:	e000      	b.n	8002666 <ETH_SetMACConfig+0x2a>
 8002664:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	7c5b      	ldrb	r3, [r3, #17]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <ETH_SetMACConfig+0x38>
 800266e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002672:	e000      	b.n	8002676 <ETH_SetMACConfig+0x3a>
 8002674:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002676:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800267c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	7fdb      	ldrb	r3, [r3, #31]
 8002682:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002684:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800268a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	7f92      	ldrb	r2, [r2, #30]
 8002690:	2a00      	cmp	r2, #0
 8002692:	d102      	bne.n	800269a <ETH_SetMACConfig+0x5e>
 8002694:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002698:	e000      	b.n	800269c <ETH_SetMACConfig+0x60>
 800269a:	2200      	movs	r2, #0
                        macconf->Speed |
 800269c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	7f1b      	ldrb	r3, [r3, #28]
 80026a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	791b      	ldrb	r3, [r3, #4]
 80026b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026ba:	2a00      	cmp	r2, #0
 80026bc:	d102      	bne.n	80026c4 <ETH_SetMACConfig+0x88>
 80026be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c2:	e000      	b.n	80026c6 <ETH_SetMACConfig+0x8a>
 80026c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	7bdb      	ldrb	r3, [r3, #15]
 80026cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026de:	4313      	orrs	r3, r2
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026f6:	2001      	movs	r0, #1
 80026f8:	f7fe fe52 	bl	80013a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002712:	4013      	ands	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002722:	2a00      	cmp	r2, #0
 8002724:	d101      	bne.n	800272a <ETH_SetMACConfig+0xee>
 8002726:	2280      	movs	r2, #128	; 0x80
 8002728:	e000      	b.n	800272c <ETH_SetMACConfig+0xf0>
 800272a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800272c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002732:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800273a:	2a01      	cmp	r2, #1
 800273c:	d101      	bne.n	8002742 <ETH_SetMACConfig+0x106>
 800273e:	2208      	movs	r2, #8
 8002740:	e000      	b.n	8002744 <ETH_SetMACConfig+0x108>
 8002742:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002744:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800274c:	2a01      	cmp	r2, #1
 800274e:	d101      	bne.n	8002754 <ETH_SetMACConfig+0x118>
 8002750:	2204      	movs	r2, #4
 8002752:	e000      	b.n	8002756 <ETH_SetMACConfig+0x11a>
 8002754:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002756:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800275e:	2a01      	cmp	r2, #1
 8002760:	d101      	bne.n	8002766 <ETH_SetMACConfig+0x12a>
 8002762:	2202      	movs	r2, #2
 8002764:	e000      	b.n	8002768 <ETH_SetMACConfig+0x12c>
 8002766:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002768:	4313      	orrs	r3, r2
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002780:	2001      	movs	r0, #1
 8002782:	f7fe fe0d 	bl	80013a0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	619a      	str	r2, [r3, #24]
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	ff20810f 	.word	0xff20810f

0800279c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <ETH_SetDMAConfig+0x110>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	7b1b      	ldrb	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <ETH_SetDMAConfig+0x2c>
 80027c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027c6:	e000      	b.n	80027ca <ETH_SetDMAConfig+0x2e>
 80027c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	7b5b      	ldrb	r3, [r3, #13]
 80027ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	7f52      	ldrb	r2, [r2, #29]
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d102      	bne.n	80027e0 <ETH_SetDMAConfig+0x44>
 80027da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027de:	e000      	b.n	80027e2 <ETH_SetDMAConfig+0x46>
 80027e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	7b9b      	ldrb	r3, [r3, #14]
 80027e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	7f1b      	ldrb	r3, [r3, #28]
 80027f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	7f9b      	ldrb	r3, [r3, #30]
 80027fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002800:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002806:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800280e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002810:	4313      	orrs	r3, r2
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002820:	461a      	mov	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002832:	2001      	movs	r0, #1
 8002834:	f7fe fdb4 	bl	80013a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002840:	461a      	mov	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	791b      	ldrb	r3, [r3, #4]
 800284a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002850:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002856:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800285c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002864:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002866:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800286e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002874:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800287e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002882:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002890:	2001      	movs	r0, #1
 8002892:	f7fe fd85 	bl	80013a0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6013      	str	r3, [r2, #0]
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	f8de3f23 	.word	0xf8de3f23

080028b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b0a6      	sub	sp, #152	; 0x98
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028c4:	2300      	movs	r3, #0
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028ec:	2300      	movs	r3, #0
 80028ee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002912:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002916:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800291c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002924:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002928:	4619      	mov	r1, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff fe86 	bl	800263c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002930:	2301      	movs	r3, #1
 8002932:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002934:	2301      	movs	r3, #1
 8002936:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002938:	2301      	movs	r3, #1
 800293a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800293e:	2301      	movs	r3, #1
 8002940:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002956:	2301      	movs	r3, #1
 8002958:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800295c:	2301      	movs	r3, #1
 800295e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002964:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800296a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800296c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002970:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002978:	2300      	movs	r3, #0
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002980:	f107 0308 	add.w	r3, r7, #8
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ff08 	bl	800279c <ETH_SetDMAConfig>
}
 800298c:	bf00      	nop
 800298e:	3798      	adds	r7, #152	; 0x98
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3305      	adds	r3, #5
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	3204      	adds	r2, #4
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <ETH_MACAddressConfig+0x68>)
 80029b6:	4413      	add	r3, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3303      	adds	r3, #3
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	061a      	lsls	r2, r3, #24
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3302      	adds	r3, #2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3301      	adds	r3, #1
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	4313      	orrs	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <ETH_MACAddressConfig+0x6c>)
 80029e6:	4413      	add	r3, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	6013      	str	r3, [r2, #0]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40028040 	.word	0x40028040
 8002a00:	40028044 	.word	0x40028044

08002a04 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e03e      	b.n	8002a90 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68d9      	ldr	r1, [r3, #12]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	3206      	adds	r2, #6
 8002a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d80c      	bhi.n	8002a74 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68d9      	ldr	r1, [r3, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	e004      	b.n	8002a7e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d9bd      	bls.n	8002a12 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa8:	611a      	str	r2, [r3, #16]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e046      	b.n	8002b52 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6919      	ldr	r1, [r3, #16]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	440b      	add	r3, r1
 8002ad4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b00:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002b08:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	3212      	adds	r2, #18
 8002b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d80c      	bhi.n	8002b42 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6919      	ldr	r1, [r3, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	60da      	str	r2, [r3, #12]
 8002b40:	e004      	b.n	8002b4c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d9b5      	bls.n	8002ac4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b82:	60da      	str	r2, [r3, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e175      	b.n	8002e9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 8164 	bne.w	8002e96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d005      	beq.n	8002be6 <HAL_GPIO_Init+0x56>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d130      	bne.n	8002c48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 0201 	and.w	r2, r3, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d017      	beq.n	8002c84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d123      	bne.n	8002cd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	08da      	lsrs	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3208      	adds	r2, #8
 8002cd2:	69b9      	ldr	r1, [r7, #24]
 8002cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80be 	beq.w	8002e96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d32:	4a61      	ldr	r2, [pc, #388]	; (8002eb8 <HAL_GPIO_Init+0x328>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a58      	ldr	r2, [pc, #352]	; (8002ebc <HAL_GPIO_Init+0x32c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d037      	beq.n	8002dce <HAL_GPIO_Init+0x23e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_GPIO_Init+0x330>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d031      	beq.n	8002dca <HAL_GPIO_Init+0x23a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a56      	ldr	r2, [pc, #344]	; (8002ec4 <HAL_GPIO_Init+0x334>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02b      	beq.n	8002dc6 <HAL_GPIO_Init+0x236>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a55      	ldr	r2, [pc, #340]	; (8002ec8 <HAL_GPIO_Init+0x338>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d025      	beq.n	8002dc2 <HAL_GPIO_Init+0x232>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a54      	ldr	r2, [pc, #336]	; (8002ecc <HAL_GPIO_Init+0x33c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <HAL_GPIO_Init+0x22e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a53      	ldr	r2, [pc, #332]	; (8002ed0 <HAL_GPIO_Init+0x340>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d019      	beq.n	8002dba <HAL_GPIO_Init+0x22a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <HAL_GPIO_Init+0x344>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0x226>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a51      	ldr	r2, [pc, #324]	; (8002ed8 <HAL_GPIO_Init+0x348>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00d      	beq.n	8002db2 <HAL_GPIO_Init+0x222>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a50      	ldr	r2, [pc, #320]	; (8002edc <HAL_GPIO_Init+0x34c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <HAL_GPIO_Init+0x21e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	; (8002ee0 <HAL_GPIO_Init+0x350>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_GPIO_Init+0x21a>
 8002da6:	2309      	movs	r3, #9
 8002da8:	e012      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002daa:	230a      	movs	r3, #10
 8002dac:	e010      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dae:	2308      	movs	r3, #8
 8002db0:	e00e      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002db2:	2307      	movs	r3, #7
 8002db4:	e00c      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002db6:	2306      	movs	r3, #6
 8002db8:	e00a      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dba:	2305      	movs	r3, #5
 8002dbc:	e008      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x240>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f002 0203 	and.w	r2, r2, #3
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <HAL_GPIO_Init+0x328>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a34      	ldr	r2, [pc, #208]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e66:	4a1f      	ldr	r2, [pc, #124]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e90:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <HAL_GPIO_Init+0x354>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	f67f ae86 	bls.w	8002bb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40021400 	.word	0x40021400
 8002ed4:	40021800 	.word	0x40021800
 8002ed8:	40021c00 	.word	0x40021c00
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40022400 	.word	0x40022400
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef8:	787b      	ldrb	r3, [r7, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f04:	e003      	b.n	8002f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	041a      	lsls	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	619a      	str	r2, [r3, #24]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1c:	b08f      	sub	sp, #60	; 0x3c
 8002f1e:	af0a      	add	r7, sp, #40	; 0x28
 8002f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e116      	b.n	800315a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe f85c 	bl	8001004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 ff3a 	bl	8004de4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	687e      	ldr	r6, [r7, #4]
 8002f78:	466d      	mov	r5, sp
 8002f7a:	f106 0410 	add.w	r4, r6, #16
 8002f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f8e:	1d33      	adds	r3, r6, #4
 8002f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f92:	6838      	ldr	r0, [r7, #0]
 8002f94:	f001 fece 	bl	8004d34 <USB_CoreInit>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0d7      	b.n	800315a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 ff28 	bl	8004e06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
 8002fba:	e04a      	b.n	8003052 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	333d      	adds	r3, #61	; 0x3d
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	333c      	adds	r3, #60	; 0x3c
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	b298      	uxth	r0, r3
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3344      	adds	r3, #68	; 0x44
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3340      	adds	r3, #64	; 0x40
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3348      	adds	r3, #72	; 0x48
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	334c      	adds	r3, #76	; 0x4c
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3354      	adds	r3, #84	; 0x54
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	3301      	adds	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d3af      	bcc.n	8002fbc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e044      	b.n	80030ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	3301      	adds	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d3b5      	bcc.n	8003062 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	687e      	ldr	r6, [r7, #4]
 80030fe:	466d      	mov	r5, sp
 8003100:	f106 0410 	add.w	r4, r6, #16
 8003104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800310a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800310c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003110:	e885 0003 	stmia.w	r5, {r0, r1}
 8003114:	1d33      	adds	r3, r6, #4
 8003116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003118:	6838      	ldr	r0, [r7, #0]
 800311a:	f001 fec1 	bl	8004ea0 <USB_DevInit>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e014      	b.n	800315a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2b01      	cmp	r3, #1
 8003146:	d102      	bne.n	800314e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f80b 	bl	8003164 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f002 f87f 	bl	8005256 <USB_DevDisconnect>

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003164 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003194:	4313      	orrs	r3, r2
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	10000003 	.word	0x10000003

080031ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ba:	6013      	str	r3, [r2, #0]
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40007000 	.word	0x40007000

080031cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031d6:	4b23      	ldr	r3, [pc, #140]	; (8003264 <HAL_PWREx_EnableOverDrive+0x98>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4a22      	ldr	r2, [pc, #136]	; (8003264 <HAL_PWREx_EnableOverDrive+0x98>)
 80031dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_PWREx_EnableOverDrive+0x98>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031ee:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031fa:	f7fe f8c5 	bl	8001388 <HAL_GetTick>
 80031fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003200:	e009      	b.n	8003216 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003202:	f7fe f8c1 	bl	8001388 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003210:	d901      	bls.n	8003216 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e022      	b.n	800325c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003222:	d1ee      	bne.n	8003202 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <HAL_PWREx_EnableOverDrive+0x9c>)
 800322a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003230:	f7fe f8aa 	bl	8001388 <HAL_GetTick>
 8003234:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003236:	e009      	b.n	800324c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003238:	f7fe f8a6 	bl	8001388 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003246:	d901      	bls.n	800324c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e007      	b.n	800325c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_PWREx_EnableOverDrive+0x9c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003258:	d1ee      	bne.n	8003238 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40023800 	.word	0x40023800
 8003268:	40007000 	.word	0x40007000

0800326c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003274:	2300      	movs	r3, #0
 8003276:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e29b      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8087 	beq.w	800339e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003290:	4b96      	ldr	r3, [pc, #600]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b04      	cmp	r3, #4
 800329a:	d00c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329c:	4b93      	ldr	r3, [pc, #588]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d112      	bne.n	80032ce <HAL_RCC_OscConfig+0x62>
 80032a8:	4b90      	ldr	r3, [pc, #576]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b4:	d10b      	bne.n	80032ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b6:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d06c      	beq.n	800339c <HAL_RCC_OscConfig+0x130>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d168      	bne.n	800339c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e275      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x7a>
 80032d8:	4b84      	ldr	r3, [pc, #528]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a83      	ldr	r2, [pc, #524]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80032de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	e02e      	b.n	8003344 <HAL_RCC_OscConfig+0xd8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x9c>
 80032ee:	4b7f      	ldr	r3, [pc, #508]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7e      	ldr	r2, [pc, #504]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b7c      	ldr	r3, [pc, #496]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7b      	ldr	r2, [pc, #492]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xd8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0xc0>
 8003312:	4b76      	ldr	r3, [pc, #472]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a75      	ldr	r2, [pc, #468]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b73      	ldr	r3, [pc, #460]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a72      	ldr	r2, [pc, #456]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xd8>
 800332c:	4b6f      	ldr	r3, [pc, #444]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6e      	ldr	r2, [pc, #440]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b6c      	ldr	r3, [pc, #432]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6b      	ldr	r2, [pc, #428]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe f81c 	bl	8001388 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe f818 	bl	8001388 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e229      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b61      	ldr	r3, [pc, #388]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xe8>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe f808 	bl	8001388 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe f804 	bl	8001388 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e215      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	4b57      	ldr	r3, [pc, #348]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x110>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d069      	beq.n	800347e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033aa:	4b50      	ldr	r3, [pc, #320]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b6:	4b4d      	ldr	r3, [pc, #308]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d11c      	bne.n	80033fc <HAL_RCC_OscConfig+0x190>
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_RCC_OscConfig+0x17a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e1e9      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	493d      	ldr	r1, [pc, #244]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	e040      	b.n	800347e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d023      	beq.n	800344c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003404:	4b39      	ldr	r3, [pc, #228]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a38      	ldr	r2, [pc, #224]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fd ffba 	bl	8001388 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003418:	f7fd ffb6 	bl	8001388 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e1c7      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342a:	4b30      	ldr	r3, [pc, #192]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4929      	ldr	r1, [pc, #164]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
 800344a:	e018      	b.n	800347e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a26      	ldr	r2, [pc, #152]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd ff96 	bl	8001388 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003460:	f7fd ff92 	bl	8001388 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1a3      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d038      	beq.n	80034fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d019      	beq.n	80034c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003492:	4b16      	ldr	r3, [pc, #88]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003496:	4a15      	ldr	r2, [pc, #84]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349e:	f7fd ff73 	bl	8001388 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a6:	f7fd ff6f 	bl	8001388 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e180      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80034ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x23a>
 80034c4:	e01a      	b.n	80034fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80034c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ca:	4a08      	ldr	r2, [pc, #32]	; (80034ec <HAL_RCC_OscConfig+0x280>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d2:	f7fd ff59 	bl	8001388 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	e00a      	b.n	80034f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034da:	f7fd ff55 	bl	8001388 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d903      	bls.n	80034f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e166      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
 80034ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	4b92      	ldr	r3, [pc, #584]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80034f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ee      	bne.n	80034da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80a4 	beq.w	8003652 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350a:	4b8c      	ldr	r3, [pc, #560]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10d      	bne.n	8003532 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	4b89      	ldr	r3, [pc, #548]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a88      	ldr	r2, [pc, #544]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b86      	ldr	r3, [pc, #536]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003532:	4b83      	ldr	r3, [pc, #524]	; (8003740 <HAL_RCC_OscConfig+0x4d4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d118      	bne.n	8003570 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800353e:	4b80      	ldr	r3, [pc, #512]	; (8003740 <HAL_RCC_OscConfig+0x4d4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a7f      	ldr	r2, [pc, #508]	; (8003740 <HAL_RCC_OscConfig+0x4d4>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354a:	f7fd ff1d 	bl	8001388 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fd ff19 	bl	8001388 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b64      	cmp	r3, #100	; 0x64
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e12a      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003564:	4b76      	ldr	r3, [pc, #472]	; (8003740 <HAL_RCC_OscConfig+0x4d4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x31a>
 8003578:	4b70      	ldr	r3, [pc, #448]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	4a6f      	ldr	r2, [pc, #444]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6713      	str	r3, [r2, #112]	; 0x70
 8003584:	e02d      	b.n	80035e2 <HAL_RCC_OscConfig+0x376>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x33c>
 800358e:	4b6b      	ldr	r3, [pc, #428]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	4a6a      	ldr	r2, [pc, #424]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	6713      	str	r3, [r2, #112]	; 0x70
 800359a:	4b68      	ldr	r3, [pc, #416]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a67      	ldr	r2, [pc, #412]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80035a0:	f023 0304 	bic.w	r3, r3, #4
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	e01c      	b.n	80035e2 <HAL_RCC_OscConfig+0x376>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b05      	cmp	r3, #5
 80035ae:	d10c      	bne.n	80035ca <HAL_RCC_OscConfig+0x35e>
 80035b0:	4b62      	ldr	r3, [pc, #392]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	4a61      	ldr	r2, [pc, #388]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80035b6:	f043 0304 	orr.w	r3, r3, #4
 80035ba:	6713      	str	r3, [r2, #112]	; 0x70
 80035bc:	4b5f      	ldr	r3, [pc, #380]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	4a5e      	ldr	r2, [pc, #376]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6713      	str	r3, [r2, #112]	; 0x70
 80035c8:	e00b      	b.n	80035e2 <HAL_RCC_OscConfig+0x376>
 80035ca:	4b5c      	ldr	r3, [pc, #368]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	4a5b      	ldr	r2, [pc, #364]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	6713      	str	r3, [r2, #112]	; 0x70
 80035d6:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	f023 0304 	bic.w	r3, r3, #4
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d015      	beq.n	8003616 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ea:	f7fd fecd 	bl	8001388 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f2:	f7fd fec9 	bl	8001388 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003600:	4293      	cmp	r3, r2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e0d8      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	4b4c      	ldr	r3, [pc, #304]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ee      	beq.n	80035f2 <HAL_RCC_OscConfig+0x386>
 8003614:	e014      	b.n	8003640 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7fd feb7 	bl	8001388 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fd feb3 	bl	8001388 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0c2      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003634:	4b41      	ldr	r3, [pc, #260]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ee      	bne.n	800361e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d105      	bne.n	8003652 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003646:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	4a3c      	ldr	r2, [pc, #240]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 800364c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80ae 	beq.w	80037b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800365c:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	2b08      	cmp	r3, #8
 8003666:	d06d      	beq.n	8003744 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d14b      	bne.n	8003708 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003670:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a31      	ldr	r2, [pc, #196]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 8003676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fd fe84 	bl	8001388 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fd fe80 	bl	8001388 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e091      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	4b29      	ldr	r3, [pc, #164]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	3b01      	subs	r3, #1
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	491b      	ldr	r1, [pc, #108]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a18      	ldr	r2, [pc, #96]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80036da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fd fe52 	bl	8001388 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fd fe4e 	bl	8001388 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e05f      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x47c>
 8003706:	e057      	b.n	80037b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0b      	ldr	r2, [pc, #44]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 800370e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fd fe38 	bl	8001388 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fd fe34 	bl	8001388 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e045      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_RCC_OscConfig+0x4d0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x4b0>
 800373a:	e03d      	b.n	80037b8 <HAL_RCC_OscConfig+0x54c>
 800373c:	40023800 	.word	0x40023800
 8003740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003744:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <HAL_RCC_OscConfig+0x558>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d030      	beq.n	80037b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d129      	bne.n	80037b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d122      	bne.n	80037b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003774:	4013      	ands	r3, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800377a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800377c:	4293      	cmp	r3, r2
 800377e:	d119      	bne.n	80037b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	3b01      	subs	r3, #1
 800378e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d10f      	bne.n	80037b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800

080037c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0d0      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d910      	bls.n	8003810 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b67      	ldr	r3, [pc, #412]	; (800398c <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 020f 	bic.w	r2, r3, #15
 80037f6:	4965      	ldr	r1, [pc, #404]	; (800398c <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b8      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a58      	ldr	r2, [pc, #352]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 800382e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003832:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 8003846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800384a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	494d      	ldr	r1, [pc, #308]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d040      	beq.n	80038ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d115      	bne.n	80038aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e073      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06b      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038aa:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f023 0203 	bic.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4936      	ldr	r1, [pc, #216]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038bc:	f7fd fd64 	bl	8001388 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	e00a      	b.n	80038da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c4:	f7fd fd60 	bl	8001388 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e053      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 020c 	and.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d1eb      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d210      	bcs.n	800391c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 020f 	bic.w	r2, r3, #15
 8003902:	4922      	ldr	r1, [pc, #136]	; (800398c <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e032      	b.n	8003982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4916      	ldr	r1, [pc, #88]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	490e      	ldr	r1, [pc, #56]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800395a:	f000 f821 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490a      	ldr	r1, [pc, #40]	; (8003994 <HAL_RCC_ClockConfig+0x1cc>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1d0>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_RCC_ClockConfig+0x1d4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fcc0 	bl	8001300 <HAL_InitTick>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023c00 	.word	0x40023c00
 8003990:	40023800 	.word	0x40023800
 8003994:	080062c4 	.word	0x080062c4
 8003998:	20000004 	.word	0x20000004
 800399c:	20000008 	.word	0x20000008

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b094      	sub	sp, #80	; 0x50
 80039a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
 80039ac:	2300      	movs	r3, #0
 80039ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b0:	2300      	movs	r3, #0
 80039b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b8:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d00d      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x40>
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	f200 80e1 	bhi.w	8003b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d003      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0x3a>
 80039d2:	e0db      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b73      	ldr	r3, [pc, #460]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039d8:	e0db      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039da:	4b73      	ldr	r3, [pc, #460]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80039dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039de:	e0d8      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e0:	4b6f      	ldr	r3, [pc, #444]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039ea:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d063      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f6:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	2200      	movs	r2, #0
 80039fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a12:	4622      	mov	r2, r4
 8003a14:	462b      	mov	r3, r5
 8003a16:	f04f 0000 	mov.w	r0, #0
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	0159      	lsls	r1, r3, #5
 8003a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a24:	0150      	lsls	r0, r2, #5
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	1a51      	subs	r1, r2, r1
 8003a2e:	6139      	str	r1, [r7, #16]
 8003a30:	4629      	mov	r1, r5
 8003a32:	eb63 0301 	sbc.w	r3, r3, r1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a44:	4659      	mov	r1, fp
 8003a46:	018b      	lsls	r3, r1, #6
 8003a48:	4651      	mov	r1, sl
 8003a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a4e:	4651      	mov	r1, sl
 8003a50:	018a      	lsls	r2, r1, #6
 8003a52:	4651      	mov	r1, sl
 8003a54:	ebb2 0801 	subs.w	r8, r2, r1
 8003a58:	4659      	mov	r1, fp
 8003a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a72:	4690      	mov	r8, r2
 8003a74:	4699      	mov	r9, r3
 8003a76:	4623      	mov	r3, r4
 8003a78:	eb18 0303 	adds.w	r3, r8, r3
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	462b      	mov	r3, r5
 8003a80:	eb49 0303 	adc.w	r3, r9, r3
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a92:	4629      	mov	r1, r5
 8003a94:	024b      	lsls	r3, r1, #9
 8003a96:	4621      	mov	r1, r4
 8003a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	024a      	lsls	r2, r1, #9
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ab0:	f7fc fc16 	bl	80002e0 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003abc:	e058      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b38      	ldr	r3, [pc, #224]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	4611      	mov	r1, r2
 8003aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ad8:	4642      	mov	r2, r8
 8003ada:	464b      	mov	r3, r9
 8003adc:	f04f 0000 	mov.w	r0, #0
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	0159      	lsls	r1, r3, #5
 8003ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aea:	0150      	lsls	r0, r2, #5
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4641      	mov	r1, r8
 8003af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003af6:	4649      	mov	r1, r9
 8003af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b10:	ebb2 040a 	subs.w	r4, r2, sl
 8003b14:	eb63 050b 	sbc.w	r5, r3, fp
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	00eb      	lsls	r3, r5, #3
 8003b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b26:	00e2      	lsls	r2, r4, #3
 8003b28:	4614      	mov	r4, r2
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	4643      	mov	r3, r8
 8003b2e:	18e3      	adds	r3, r4, r3
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	464b      	mov	r3, r9
 8003b34:	eb45 0303 	adc.w	r3, r5, r3
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b46:	4629      	mov	r1, r5
 8003b48:	028b      	lsls	r3, r1, #10
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b50:	4621      	mov	r1, r4
 8003b52:	028a      	lsls	r2, r1, #10
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	61fa      	str	r2, [r7, #28]
 8003b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b64:	f7fc fbbc 	bl	80002e0 <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3750      	adds	r7, #80	; 0x50
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	00f42400 	.word	0x00f42400
 8003ba8:	007a1200 	.word	0x007a1200

08003bac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc8:	f7ff fff0 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0a9b      	lsrs	r3, r3, #10
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	080062d4 	.word	0x080062d4

08003bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bf0:	f7ff ffdc 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0b5b      	lsrs	r3, r3, #13
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4903      	ldr	r1, [pc, #12]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	080062d4 	.word	0x080062d4

08003c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d012      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c3c:	4b69      	ldr	r3, [pc, #420]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a68      	ldr	r2, [pc, #416]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c46:	6093      	str	r3, [r2, #8]
 8003c48:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	4964      	ldr	r1, [pc, #400]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d017      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c6e:	4b5d      	ldr	r3, [pc, #372]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	4959      	ldr	r1, [pc, #356]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d017      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003caa:	4b4e      	ldr	r3, [pc, #312]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	494a      	ldr	r1, [pc, #296]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc8:	d101      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 808b 	beq.w	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b3a      	ldr	r3, [pc, #232]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	4a39      	ldr	r2, [pc, #228]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6413      	str	r3, [r2, #64]	; 0x40
 8003d04:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d10:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a34      	ldr	r2, [pc, #208]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1c:	f7fd fb34 	bl	8001388 <HAL_GetTick>
 8003d20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d24:	f7fd fb30 	bl	8001388 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e38f      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d36:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d42:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d035      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d02e      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	4a1a      	ldr	r2, [pc, #104]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d114      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd faf8 	bl	8001388 <HAL_GetTick>
 8003d98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9c:	f7fd faf4 	bl	8001388 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e351      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ee      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dca:	d111      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dda:	400b      	ands	r3, r1
 8003ddc:	4901      	ldr	r1, [pc, #4]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
 8003de2:	e00b      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40007000 	.word	0x40007000
 8003dec:	0ffffcff 	.word	0x0ffffcff
 8003df0:	4bac      	ldr	r3, [pc, #688]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4aab      	ldr	r2, [pc, #684]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dfa:	6093      	str	r3, [r2, #8]
 8003dfc:	4ba9      	ldr	r3, [pc, #676]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e08:	49a6      	ldr	r1, [pc, #664]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e1a:	4ba2      	ldr	r3, [pc, #648]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e20:	4aa0      	ldr	r2, [pc, #640]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e2a:	4b9e      	ldr	r3, [pc, #632]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	499b      	ldr	r1, [pc, #620]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e48:	4b96      	ldr	r3, [pc, #600]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e56:	4993      	ldr	r1, [pc, #588]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e6a:	4b8e      	ldr	r3, [pc, #568]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e78:	498a      	ldr	r1, [pc, #552]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e8c:	4b85      	ldr	r3, [pc, #532]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9a:	4982      	ldr	r1, [pc, #520]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eae:	4b7d      	ldr	r3, [pc, #500]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4979      	ldr	r1, [pc, #484]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed0:	4b74      	ldr	r3, [pc, #464]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	4971      	ldr	r1, [pc, #452]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ef2:	4b6c      	ldr	r3, [pc, #432]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f023 020c 	bic.w	r2, r3, #12
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f00:	4968      	ldr	r1, [pc, #416]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f14:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	4960      	ldr	r1, [pc, #384]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f36:	4b5b      	ldr	r3, [pc, #364]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f44:	4957      	ldr	r1, [pc, #348]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f58:	4b52      	ldr	r3, [pc, #328]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	494f      	ldr	r1, [pc, #316]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f7a:	4b4a      	ldr	r3, [pc, #296]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	4946      	ldr	r1, [pc, #280]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f9c:	4b41      	ldr	r3, [pc, #260]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	493e      	ldr	r1, [pc, #248]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fbe:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fcc:	4935      	ldr	r1, [pc, #212]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fe0:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fee:	492d      	ldr	r1, [pc, #180]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d011      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004002:	4b28      	ldr	r3, [pc, #160]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004010:	4924      	ldr	r1, [pc, #144]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800401c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004020:	d101      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004022:	2301      	movs	r3, #1
 8004024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004042:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004048:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004050:	4914      	ldr	r1, [pc, #80]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00b      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004074:	490b      	ldr	r1, [pc, #44]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00f      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004098:	4902      	ldr	r1, [pc, #8]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040a0:	e002      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040b4:	4b8a      	ldr	r3, [pc, #552]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c4:	4986      	ldr	r1, [pc, #536]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040d8:	4b81      	ldr	r3, [pc, #516]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e8:	497d      	ldr	r1, [pc, #500]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d006      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80d6 	beq.w	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004104:	4b76      	ldr	r3, [pc, #472]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a75      	ldr	r2, [pc, #468]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800410e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004110:	f7fd f93a 	bl	8001388 <HAL_GetTick>
 8004114:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004118:	f7fd f936 	bl	8001388 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e195      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800412a:	4b6d      	ldr	r3, [pc, #436]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d021      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004146:	2b00      	cmp	r3, #0
 8004148:	d11d      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004158:	4b61      	ldr	r3, [pc, #388]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415e:	0e1b      	lsrs	r3, r3, #24
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	019a      	lsls	r2, r3, #6
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	431a      	orrs	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	071b      	lsls	r3, r3, #28
 800417e:	4958      	ldr	r1, [pc, #352]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d004      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02e      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b0:	d129      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041b2:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041c0:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c6:	0f1b      	lsrs	r3, r3, #28
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	019a      	lsls	r2, r3, #6
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	061b      	lsls	r3, r3, #24
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	493e      	ldr	r1, [pc, #248]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041ee:	4b3c      	ldr	r3, [pc, #240]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f4:	f023 021f 	bic.w	r2, r3, #31
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	3b01      	subs	r3, #1
 80041fe:	4938      	ldr	r1, [pc, #224]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01d      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004212:	4b33      	ldr	r3, [pc, #204]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004218:	0e1b      	lsrs	r3, r3, #24
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004220:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004226:	0f1b      	lsrs	r3, r3, #28
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	019a      	lsls	r2, r3, #6
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	431a      	orrs	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	061b      	lsls	r3, r3, #24
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	071b      	lsls	r3, r3, #28
 8004246:	4926      	ldr	r1, [pc, #152]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d011      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	019a      	lsls	r2, r3, #6
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	061b      	lsls	r3, r3, #24
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	491a      	ldr	r1, [pc, #104]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004284:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428a:	f7fd f87d 	bl	8001388 <HAL_GetTick>
 800428e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004292:	f7fd f879 	bl	8001388 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b64      	cmp	r3, #100	; 0x64
 800429e:	d901      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e0d8      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	f040 80ce 	bne.w	8004454 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fd f860 	bl	8001388 <HAL_GetTick>
 80042c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042ca:	e00b      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042cc:	f7fd f85c 	bl	8001388 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d904      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0bb      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042e4:	4b5e      	ldr	r3, [pc, #376]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f0:	d0ec      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800430e:	2b00      	cmp	r3, #0
 8004310:	d02e      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d12a      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800431a:	4b51      	ldr	r3, [pc, #324]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004328:	4b4d      	ldr	r3, [pc, #308]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	0f1b      	lsrs	r3, r3, #28
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	019a      	lsls	r2, r3, #6
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	431a      	orrs	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	071b      	lsls	r3, r3, #28
 800434e:	4944      	ldr	r1, [pc, #272]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004356:	4b42      	ldr	r3, [pc, #264]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	3b01      	subs	r3, #1
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	493d      	ldr	r1, [pc, #244]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d022      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004384:	d11d      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004386:	4b36      	ldr	r3, [pc, #216]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	0e1b      	lsrs	r3, r3, #24
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004394:	4b32      	ldr	r3, [pc, #200]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	0f1b      	lsrs	r3, r3, #28
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	019a      	lsls	r2, r3, #6
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	071b      	lsls	r3, r3, #28
 80043ba:	4929      	ldr	r1, [pc, #164]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d028      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043ce:	4b24      	ldr	r3, [pc, #144]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	0e1b      	lsrs	r3, r3, #24
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043dc:	4b20      	ldr	r3, [pc, #128]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	0c1b      	lsrs	r3, r3, #16
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	019a      	lsls	r2, r3, #6
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	041b      	lsls	r3, r3, #16
 80043f4:	431a      	orrs	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	071b      	lsls	r3, r3, #28
 8004402:	4917      	ldr	r1, [pc, #92]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	4911      	ldr	r1, [pc, #68]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442c:	f7fc ffac 	bl	8001388 <HAL_GetTick>
 8004430:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004434:	f7fc ffa8 	bl	8001388 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e007      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004452:	d1ef      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800

08004464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e040      	b.n	80044f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fc fd5c 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f82c 	bl	8004500 <UART_SetConfig>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e022      	b.n	80044f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa84 	bl	80049c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fb0b 	bl	8004b0c <UART_CheckIdleState>
 80044f6:	4603      	mov	r3, r0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4ba6      	ldr	r3, [pc, #664]	; (80047c4 <UART_SetConfig+0x2c4>)
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	6979      	ldr	r1, [r7, #20]
 8004534:	430b      	orrs	r3, r1
 8004536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	430a      	orrs	r2, r1
 8004570:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a94      	ldr	r2, [pc, #592]	; (80047c8 <UART_SetConfig+0x2c8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d120      	bne.n	80045be <UART_SetConfig+0xbe>
 800457c:	4b93      	ldr	r3, [pc, #588]	; (80047cc <UART_SetConfig+0x2cc>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	2b03      	cmp	r3, #3
 8004588:	d816      	bhi.n	80045b8 <UART_SetConfig+0xb8>
 800458a:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <UART_SetConfig+0x90>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045ad 	.word	0x080045ad
 8004598:	080045a7 	.word	0x080045a7
 800459c:	080045b3 	.word	0x080045b3
 80045a0:	2301      	movs	r3, #1
 80045a2:	77fb      	strb	r3, [r7, #31]
 80045a4:	e150      	b.n	8004848 <UART_SetConfig+0x348>
 80045a6:	2302      	movs	r3, #2
 80045a8:	77fb      	strb	r3, [r7, #31]
 80045aa:	e14d      	b.n	8004848 <UART_SetConfig+0x348>
 80045ac:	2304      	movs	r3, #4
 80045ae:	77fb      	strb	r3, [r7, #31]
 80045b0:	e14a      	b.n	8004848 <UART_SetConfig+0x348>
 80045b2:	2308      	movs	r3, #8
 80045b4:	77fb      	strb	r3, [r7, #31]
 80045b6:	e147      	b.n	8004848 <UART_SetConfig+0x348>
 80045b8:	2310      	movs	r3, #16
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e144      	b.n	8004848 <UART_SetConfig+0x348>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a83      	ldr	r2, [pc, #524]	; (80047d0 <UART_SetConfig+0x2d0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d132      	bne.n	800462e <UART_SetConfig+0x12e>
 80045c8:	4b80      	ldr	r3, [pc, #512]	; (80047cc <UART_SetConfig+0x2cc>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d828      	bhi.n	8004628 <UART_SetConfig+0x128>
 80045d6:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <UART_SetConfig+0xdc>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	08004611 	.word	0x08004611
 80045e0:	08004629 	.word	0x08004629
 80045e4:	08004629 	.word	0x08004629
 80045e8:	08004629 	.word	0x08004629
 80045ec:	0800461d 	.word	0x0800461d
 80045f0:	08004629 	.word	0x08004629
 80045f4:	08004629 	.word	0x08004629
 80045f8:	08004629 	.word	0x08004629
 80045fc:	08004617 	.word	0x08004617
 8004600:	08004629 	.word	0x08004629
 8004604:	08004629 	.word	0x08004629
 8004608:	08004629 	.word	0x08004629
 800460c:	08004623 	.word	0x08004623
 8004610:	2300      	movs	r3, #0
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e118      	b.n	8004848 <UART_SetConfig+0x348>
 8004616:	2302      	movs	r3, #2
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e115      	b.n	8004848 <UART_SetConfig+0x348>
 800461c:	2304      	movs	r3, #4
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e112      	b.n	8004848 <UART_SetConfig+0x348>
 8004622:	2308      	movs	r3, #8
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e10f      	b.n	8004848 <UART_SetConfig+0x348>
 8004628:	2310      	movs	r3, #16
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e10c      	b.n	8004848 <UART_SetConfig+0x348>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a68      	ldr	r2, [pc, #416]	; (80047d4 <UART_SetConfig+0x2d4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d120      	bne.n	800467a <UART_SetConfig+0x17a>
 8004638:	4b64      	ldr	r3, [pc, #400]	; (80047cc <UART_SetConfig+0x2cc>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004642:	2b30      	cmp	r3, #48	; 0x30
 8004644:	d013      	beq.n	800466e <UART_SetConfig+0x16e>
 8004646:	2b30      	cmp	r3, #48	; 0x30
 8004648:	d814      	bhi.n	8004674 <UART_SetConfig+0x174>
 800464a:	2b20      	cmp	r3, #32
 800464c:	d009      	beq.n	8004662 <UART_SetConfig+0x162>
 800464e:	2b20      	cmp	r3, #32
 8004650:	d810      	bhi.n	8004674 <UART_SetConfig+0x174>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <UART_SetConfig+0x15c>
 8004656:	2b10      	cmp	r3, #16
 8004658:	d006      	beq.n	8004668 <UART_SetConfig+0x168>
 800465a:	e00b      	b.n	8004674 <UART_SetConfig+0x174>
 800465c:	2300      	movs	r3, #0
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e0f2      	b.n	8004848 <UART_SetConfig+0x348>
 8004662:	2302      	movs	r3, #2
 8004664:	77fb      	strb	r3, [r7, #31]
 8004666:	e0ef      	b.n	8004848 <UART_SetConfig+0x348>
 8004668:	2304      	movs	r3, #4
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e0ec      	b.n	8004848 <UART_SetConfig+0x348>
 800466e:	2308      	movs	r3, #8
 8004670:	77fb      	strb	r3, [r7, #31]
 8004672:	e0e9      	b.n	8004848 <UART_SetConfig+0x348>
 8004674:	2310      	movs	r3, #16
 8004676:	77fb      	strb	r3, [r7, #31]
 8004678:	e0e6      	b.n	8004848 <UART_SetConfig+0x348>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a56      	ldr	r2, [pc, #344]	; (80047d8 <UART_SetConfig+0x2d8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d120      	bne.n	80046c6 <UART_SetConfig+0x1c6>
 8004684:	4b51      	ldr	r3, [pc, #324]	; (80047cc <UART_SetConfig+0x2cc>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800468e:	2bc0      	cmp	r3, #192	; 0xc0
 8004690:	d013      	beq.n	80046ba <UART_SetConfig+0x1ba>
 8004692:	2bc0      	cmp	r3, #192	; 0xc0
 8004694:	d814      	bhi.n	80046c0 <UART_SetConfig+0x1c0>
 8004696:	2b80      	cmp	r3, #128	; 0x80
 8004698:	d009      	beq.n	80046ae <UART_SetConfig+0x1ae>
 800469a:	2b80      	cmp	r3, #128	; 0x80
 800469c:	d810      	bhi.n	80046c0 <UART_SetConfig+0x1c0>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <UART_SetConfig+0x1a8>
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d006      	beq.n	80046b4 <UART_SetConfig+0x1b4>
 80046a6:	e00b      	b.n	80046c0 <UART_SetConfig+0x1c0>
 80046a8:	2300      	movs	r3, #0
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e0cc      	b.n	8004848 <UART_SetConfig+0x348>
 80046ae:	2302      	movs	r3, #2
 80046b0:	77fb      	strb	r3, [r7, #31]
 80046b2:	e0c9      	b.n	8004848 <UART_SetConfig+0x348>
 80046b4:	2304      	movs	r3, #4
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e0c6      	b.n	8004848 <UART_SetConfig+0x348>
 80046ba:	2308      	movs	r3, #8
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	e0c3      	b.n	8004848 <UART_SetConfig+0x348>
 80046c0:	2310      	movs	r3, #16
 80046c2:	77fb      	strb	r3, [r7, #31]
 80046c4:	e0c0      	b.n	8004848 <UART_SetConfig+0x348>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a44      	ldr	r2, [pc, #272]	; (80047dc <UART_SetConfig+0x2dc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d125      	bne.n	800471c <UART_SetConfig+0x21c>
 80046d0:	4b3e      	ldr	r3, [pc, #248]	; (80047cc <UART_SetConfig+0x2cc>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046de:	d017      	beq.n	8004710 <UART_SetConfig+0x210>
 80046e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e4:	d817      	bhi.n	8004716 <UART_SetConfig+0x216>
 80046e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ea:	d00b      	beq.n	8004704 <UART_SetConfig+0x204>
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f0:	d811      	bhi.n	8004716 <UART_SetConfig+0x216>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <UART_SetConfig+0x1fe>
 80046f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fa:	d006      	beq.n	800470a <UART_SetConfig+0x20a>
 80046fc:	e00b      	b.n	8004716 <UART_SetConfig+0x216>
 80046fe:	2300      	movs	r3, #0
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e0a1      	b.n	8004848 <UART_SetConfig+0x348>
 8004704:	2302      	movs	r3, #2
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e09e      	b.n	8004848 <UART_SetConfig+0x348>
 800470a:	2304      	movs	r3, #4
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e09b      	b.n	8004848 <UART_SetConfig+0x348>
 8004710:	2308      	movs	r3, #8
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e098      	b.n	8004848 <UART_SetConfig+0x348>
 8004716:	2310      	movs	r3, #16
 8004718:	77fb      	strb	r3, [r7, #31]
 800471a:	e095      	b.n	8004848 <UART_SetConfig+0x348>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a2f      	ldr	r2, [pc, #188]	; (80047e0 <UART_SetConfig+0x2e0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d125      	bne.n	8004772 <UART_SetConfig+0x272>
 8004726:	4b29      	ldr	r3, [pc, #164]	; (80047cc <UART_SetConfig+0x2cc>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004730:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004734:	d017      	beq.n	8004766 <UART_SetConfig+0x266>
 8004736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800473a:	d817      	bhi.n	800476c <UART_SetConfig+0x26c>
 800473c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004740:	d00b      	beq.n	800475a <UART_SetConfig+0x25a>
 8004742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004746:	d811      	bhi.n	800476c <UART_SetConfig+0x26c>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <UART_SetConfig+0x254>
 800474c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004750:	d006      	beq.n	8004760 <UART_SetConfig+0x260>
 8004752:	e00b      	b.n	800476c <UART_SetConfig+0x26c>
 8004754:	2301      	movs	r3, #1
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e076      	b.n	8004848 <UART_SetConfig+0x348>
 800475a:	2302      	movs	r3, #2
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e073      	b.n	8004848 <UART_SetConfig+0x348>
 8004760:	2304      	movs	r3, #4
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e070      	b.n	8004848 <UART_SetConfig+0x348>
 8004766:	2308      	movs	r3, #8
 8004768:	77fb      	strb	r3, [r7, #31]
 800476a:	e06d      	b.n	8004848 <UART_SetConfig+0x348>
 800476c:	2310      	movs	r3, #16
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e06a      	b.n	8004848 <UART_SetConfig+0x348>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1b      	ldr	r2, [pc, #108]	; (80047e4 <UART_SetConfig+0x2e4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d138      	bne.n	80047ee <UART_SetConfig+0x2ee>
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <UART_SetConfig+0x2cc>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004786:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800478a:	d017      	beq.n	80047bc <UART_SetConfig+0x2bc>
 800478c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004790:	d82a      	bhi.n	80047e8 <UART_SetConfig+0x2e8>
 8004792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004796:	d00b      	beq.n	80047b0 <UART_SetConfig+0x2b0>
 8004798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479c:	d824      	bhi.n	80047e8 <UART_SetConfig+0x2e8>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <UART_SetConfig+0x2aa>
 80047a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a6:	d006      	beq.n	80047b6 <UART_SetConfig+0x2b6>
 80047a8:	e01e      	b.n	80047e8 <UART_SetConfig+0x2e8>
 80047aa:	2300      	movs	r3, #0
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	e04b      	b.n	8004848 <UART_SetConfig+0x348>
 80047b0:	2302      	movs	r3, #2
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e048      	b.n	8004848 <UART_SetConfig+0x348>
 80047b6:	2304      	movs	r3, #4
 80047b8:	77fb      	strb	r3, [r7, #31]
 80047ba:	e045      	b.n	8004848 <UART_SetConfig+0x348>
 80047bc:	2308      	movs	r3, #8
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e042      	b.n	8004848 <UART_SetConfig+0x348>
 80047c2:	bf00      	nop
 80047c4:	efff69f3 	.word	0xefff69f3
 80047c8:	40011000 	.word	0x40011000
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40004400 	.word	0x40004400
 80047d4:	40004800 	.word	0x40004800
 80047d8:	40004c00 	.word	0x40004c00
 80047dc:	40005000 	.word	0x40005000
 80047e0:	40011400 	.word	0x40011400
 80047e4:	40007800 	.word	0x40007800
 80047e8:	2310      	movs	r3, #16
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e02c      	b.n	8004848 <UART_SetConfig+0x348>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a72      	ldr	r2, [pc, #456]	; (80049bc <UART_SetConfig+0x4bc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d125      	bne.n	8004844 <UART_SetConfig+0x344>
 80047f8:	4b71      	ldr	r3, [pc, #452]	; (80049c0 <UART_SetConfig+0x4c0>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004802:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004806:	d017      	beq.n	8004838 <UART_SetConfig+0x338>
 8004808:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800480c:	d817      	bhi.n	800483e <UART_SetConfig+0x33e>
 800480e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004812:	d00b      	beq.n	800482c <UART_SetConfig+0x32c>
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004818:	d811      	bhi.n	800483e <UART_SetConfig+0x33e>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <UART_SetConfig+0x326>
 800481e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004822:	d006      	beq.n	8004832 <UART_SetConfig+0x332>
 8004824:	e00b      	b.n	800483e <UART_SetConfig+0x33e>
 8004826:	2300      	movs	r3, #0
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e00d      	b.n	8004848 <UART_SetConfig+0x348>
 800482c:	2302      	movs	r3, #2
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e00a      	b.n	8004848 <UART_SetConfig+0x348>
 8004832:	2304      	movs	r3, #4
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e007      	b.n	8004848 <UART_SetConfig+0x348>
 8004838:	2308      	movs	r3, #8
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e004      	b.n	8004848 <UART_SetConfig+0x348>
 800483e:	2310      	movs	r3, #16
 8004840:	77fb      	strb	r3, [r7, #31]
 8004842:	e001      	b.n	8004848 <UART_SetConfig+0x348>
 8004844:	2310      	movs	r3, #16
 8004846:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004850:	d15b      	bne.n	800490a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004852:	7ffb      	ldrb	r3, [r7, #31]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d828      	bhi.n	80048aa <UART_SetConfig+0x3aa>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x360>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004895 	.word	0x08004895
 800486c:	080048ab 	.word	0x080048ab
 8004870:	0800489b 	.word	0x0800489b
 8004874:	080048ab 	.word	0x080048ab
 8004878:	080048ab 	.word	0x080048ab
 800487c:	080048ab 	.word	0x080048ab
 8004880:	080048a3 	.word	0x080048a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004884:	f7ff f99e 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8004888:	61b8      	str	r0, [r7, #24]
        break;
 800488a:	e013      	b.n	80048b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800488c:	f7ff f9ae 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8004890:	61b8      	str	r0, [r7, #24]
        break;
 8004892:	e00f      	b.n	80048b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004894:	4b4b      	ldr	r3, [pc, #300]	; (80049c4 <UART_SetConfig+0x4c4>)
 8004896:	61bb      	str	r3, [r7, #24]
        break;
 8004898:	e00c      	b.n	80048b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489a:	f7ff f881 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800489e:	61b8      	str	r0, [r7, #24]
        break;
 80048a0:	e008      	b.n	80048b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a6:	61bb      	str	r3, [r7, #24]
        break;
 80048a8:	e004      	b.n	80048b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	77bb      	strb	r3, [r7, #30]
        break;
 80048b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d074      	beq.n	80049a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	005a      	lsls	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	441a      	add	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	d916      	bls.n	8004904 <UART_SetConfig+0x404>
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048dc:	d212      	bcs.n	8004904 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f023 030f 	bic.w	r3, r3, #15
 80048e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	89fb      	ldrh	r3, [r7, #14]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	89fa      	ldrh	r2, [r7, #14]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	e04f      	b.n	80049a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	77bb      	strb	r3, [r7, #30]
 8004908:	e04c      	b.n	80049a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800490a:	7ffb      	ldrb	r3, [r7, #31]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d828      	bhi.n	8004962 <UART_SetConfig+0x462>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0x418>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004945 	.word	0x08004945
 8004920:	0800494d 	.word	0x0800494d
 8004924:	08004963 	.word	0x08004963
 8004928:	08004953 	.word	0x08004953
 800492c:	08004963 	.word	0x08004963
 8004930:	08004963 	.word	0x08004963
 8004934:	08004963 	.word	0x08004963
 8004938:	0800495b 	.word	0x0800495b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800493c:	f7ff f942 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8004940:	61b8      	str	r0, [r7, #24]
        break;
 8004942:	e013      	b.n	800496c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004944:	f7ff f952 	bl	8003bec <HAL_RCC_GetPCLK2Freq>
 8004948:	61b8      	str	r0, [r7, #24]
        break;
 800494a:	e00f      	b.n	800496c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800494c:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <UART_SetConfig+0x4c4>)
 800494e:	61bb      	str	r3, [r7, #24]
        break;
 8004950:	e00c      	b.n	800496c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004952:	f7ff f825 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8004956:	61b8      	str	r0, [r7, #24]
        break;
 8004958:	e008      	b.n	800496c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495e:	61bb      	str	r3, [r7, #24]
        break;
 8004960:	e004      	b.n	800496c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	77bb      	strb	r3, [r7, #30]
        break;
 800496a:	bf00      	nop
    }

    if (pclk != 0U)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	085a      	lsrs	r2, r3, #1
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	441a      	add	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2b0f      	cmp	r3, #15
 800498a:	d909      	bls.n	80049a0 <UART_SetConfig+0x4a0>
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004992:	d205      	bcs.n	80049a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	b29a      	uxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	e001      	b.n	80049a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3720      	adds	r7, #32
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40007c00 	.word	0x40007c00
 80049c0:	40023800 	.word	0x40023800
 80049c4:	00f42400 	.word	0x00f42400

080049c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01a      	beq.n	8004ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d10a      	bne.n	8004ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b1c:	f7fc fc34 	bl	8001388 <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d10e      	bne.n	8004b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f831 	bl	8004ba6 <UART_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e027      	b.n	8004b9e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d10e      	bne.n	8004b7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f81b 	bl	8004ba6 <UART_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e011      	b.n	8004b9e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b09c      	sub	sp, #112	; 0x70
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb6:	e0a7      	b.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	f000 80a3 	beq.w	8004d08 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc2:	f7fc fbe1 	bl	8001388 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d302      	bcc.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d13f      	bne.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bec:	667b      	str	r3, [r7, #100]	; 0x64
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bf8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e6      	bne.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	663b      	str	r3, [r7, #96]	; 0x60
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3308      	adds	r3, #8
 8004c28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e5      	bne.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e068      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d050      	beq.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c74:	d148      	bne.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e6      	bne.n	8004c80 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cd2:	623a      	str	r2, [r7, #32]
 8004cd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	69f9      	ldr	r1, [r7, #28]
 8004cd8:	6a3a      	ldr	r2, [r7, #32]
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e5      	bne.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e010      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69da      	ldr	r2, [r3, #28]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4013      	ands	r3, r2
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	f43f af48 	beq.w	8004bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3770      	adds	r7, #112	; 0x70
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d34:	b084      	sub	sp, #16
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	f107 001c 	add.w	r0, r7, #28
 8004d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d120      	bne.n	8004d8e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <USB_CoreInit+0xac>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d105      	bne.n	8004d82 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fa96 	bl	80052b4 <USB_CoreReset>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	e010      	b.n	8004db0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa8a 	bl	80052b4 <USB_CoreReset>
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d10b      	bne.n	8004dce <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f043 0206 	orr.w	r2, r3, #6
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f043 0220 	orr.w	r2, r3, #32
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dda:	b004      	add	sp, #16
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	ffbdffbf 	.word	0xffbdffbf

08004de4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f023 0201 	bic.w	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d115      	bne.n	8004e54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e34:	2001      	movs	r0, #1
 8004e36:	f7fc fab3 	bl	80013a0 <HAL_Delay>
      ms++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fa29 	bl	8005298 <USB_GetMode>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d01e      	beq.n	8004e8a <USB_SetCurrentMode+0x84>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b31      	cmp	r3, #49	; 0x31
 8004e50:	d9f0      	bls.n	8004e34 <USB_SetCurrentMode+0x2e>
 8004e52:	e01a      	b.n	8004e8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d115      	bne.n	8004e86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e66:	2001      	movs	r0, #1
 8004e68:	f7fc fa9a 	bl	80013a0 <HAL_Delay>
      ms++;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa10 	bl	8005298 <USB_GetMode>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <USB_SetCurrentMode+0x84>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b31      	cmp	r3, #49	; 0x31
 8004e82:	d9f0      	bls.n	8004e66 <USB_SetCurrentMode+0x60>
 8004e84:	e001      	b.n	8004e8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e005      	b.n	8004e96 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b32      	cmp	r3, #50	; 0x32
 8004e8e:	d101      	bne.n	8004e94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	e009      	b.n	8004ed4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3340      	adds	r3, #64	; 0x40
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	2200      	movs	r2, #0
 8004ecc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b0e      	cmp	r3, #14
 8004ed8:	d9f2      	bls.n	8004ec0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d11c      	bne.n	8004f1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eee:	f043 0302 	orr.w	r3, r3, #2
 8004ef2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e005      	b.n	8004f26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f38:	4619      	mov	r1, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f40:	461a      	mov	r2, r3
 8004f42:	680b      	ldr	r3, [r1, #0]
 8004f44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d10c      	bne.n	8004f66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d104      	bne.n	8004f5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f52:	2100      	movs	r1, #0
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f965 	bl	8005224 <USB_SetDevSpeed>
 8004f5a:	e008      	b.n	8004f6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f960 	bl	8005224 <USB_SetDevSpeed>
 8004f64:	e003      	b.n	8004f6e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f66:	2103      	movs	r1, #3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f95b 	bl	8005224 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f6e:	2110      	movs	r1, #16
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f8f3 	bl	800515c <USB_FlushTxFifo>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f91f 	bl	80051c4 <USB_FlushRxFifo>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f96:	461a      	mov	r2, r3
 8004f98:	2300      	movs	r3, #0
 8004f9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	e043      	b.n	8005042 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fd0:	d118      	bne.n	8005004 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	e013      	b.n	8005016 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	e008      	b.n	8005016 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005010:	461a      	mov	r2, r3
 8005012:	2300      	movs	r3, #0
 8005014:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	461a      	mov	r2, r3
 8005024:	2300      	movs	r3, #0
 8005026:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	461a      	mov	r2, r3
 8005036:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800503a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	3301      	adds	r3, #1
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	429a      	cmp	r2, r3
 8005048:	d3b7      	bcc.n	8004fba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	e043      	b.n	80050d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005066:	d118      	bne.n	800509a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	461a      	mov	r2, r3
 800507c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e013      	b.n	80050ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	461a      	mov	r2, r3
 8005092:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	e008      	b.n	80050ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a6:	461a      	mov	r2, r3
 80050a8:	2300      	movs	r3, #0
 80050aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	461a      	mov	r2, r3
 80050ba:	2300      	movs	r3, #0
 80050bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	461a      	mov	r2, r3
 80050cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	3301      	adds	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d3b7      	bcc.n	8005050 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005100:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f043 0210 	orr.w	r2, r3, #16
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699a      	ldr	r2, [r3, #24]
 8005118:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <USB_DevInit+0x2b4>)
 800511a:	4313      	orrs	r3, r2
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f043 0208 	orr.w	r2, r3, #8
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d105      	bne.n	8005144 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <USB_DevInit+0x2b8>)
 800513e:	4313      	orrs	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005144:	7dfb      	ldrb	r3, [r7, #23]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005150:	b004      	add	sp, #16
 8005152:	4770      	bx	lr
 8005154:	803c3800 	.word	0x803c3800
 8005158:	40000004 	.word	0x40000004

0800515c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3301      	adds	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <USB_FlushTxFifo+0x64>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e01b      	b.n	80051b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	daf2      	bge.n	800516a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	019b      	lsls	r3, r3, #6
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <USB_FlushTxFifo+0x64>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e006      	b.n	80051b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d0f0      	beq.n	8005194 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	00030d40 	.word	0x00030d40

080051c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3301      	adds	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a11      	ldr	r2, [pc, #68]	; (8005220 <USB_FlushRxFifo+0x5c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e018      	b.n	8005214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	daf2      	bge.n	80051d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2210      	movs	r2, #16
 80051f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3301      	adds	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4a08      	ldr	r2, [pc, #32]	; (8005220 <USB_FlushRxFifo+0x5c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e006      	b.n	8005214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b10      	cmp	r3, #16
 8005210:	d0f0      	beq.n	80051f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	00030d40 	.word	0x00030d40

08005224 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005244:	4313      	orrs	r3, r2
 8005246:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005270:	f023 0303 	bic.w	r3, r3, #3
 8005274:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005284:	f043 0302 	orr.w	r3, r3, #2
 8005288:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f003 0301 	and.w	r3, r3, #1
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3301      	adds	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a13      	ldr	r2, [pc, #76]	; (8005318 <USB_CoreReset+0x64>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e01b      	b.n	800530a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	daf2      	bge.n	80052c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f043 0201 	orr.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3301      	adds	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a09      	ldr	r2, [pc, #36]	; (8005318 <USB_CoreReset+0x64>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e006      	b.n	800530a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d0f0      	beq.n	80052ea <USB_CoreReset+0x36>

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	00030d40 	.word	0x00030d40

0800531c <std>:
 800531c:	2300      	movs	r3, #0
 800531e:	b510      	push	{r4, lr}
 8005320:	4604      	mov	r4, r0
 8005322:	e9c0 3300 	strd	r3, r3, [r0]
 8005326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800532a:	6083      	str	r3, [r0, #8]
 800532c:	8181      	strh	r1, [r0, #12]
 800532e:	6643      	str	r3, [r0, #100]	; 0x64
 8005330:	81c2      	strh	r2, [r0, #14]
 8005332:	6183      	str	r3, [r0, #24]
 8005334:	4619      	mov	r1, r3
 8005336:	2208      	movs	r2, #8
 8005338:	305c      	adds	r0, #92	; 0x5c
 800533a:	f000 f9f7 	bl	800572c <memset>
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <std+0x58>)
 8005340:	6263      	str	r3, [r4, #36]	; 0x24
 8005342:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <std+0x5c>)
 8005344:	62a3      	str	r3, [r4, #40]	; 0x28
 8005346:	4b0d      	ldr	r3, [pc, #52]	; (800537c <std+0x60>)
 8005348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800534a:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <std+0x64>)
 800534c:	6323      	str	r3, [r4, #48]	; 0x30
 800534e:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <std+0x68>)
 8005350:	6224      	str	r4, [r4, #32]
 8005352:	429c      	cmp	r4, r3
 8005354:	d006      	beq.n	8005364 <std+0x48>
 8005356:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800535a:	4294      	cmp	r4, r2
 800535c:	d002      	beq.n	8005364 <std+0x48>
 800535e:	33d0      	adds	r3, #208	; 0xd0
 8005360:	429c      	cmp	r4, r3
 8005362:	d105      	bne.n	8005370 <std+0x54>
 8005364:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800536c:	f000 ba56 	b.w	800581c <__retarget_lock_init_recursive>
 8005370:	bd10      	pop	{r4, pc}
 8005372:	bf00      	nop
 8005374:	0800557d 	.word	0x0800557d
 8005378:	0800559f 	.word	0x0800559f
 800537c:	080055d7 	.word	0x080055d7
 8005380:	080055fb 	.word	0x080055fb
 8005384:	20000914 	.word	0x20000914

08005388 <stdio_exit_handler>:
 8005388:	4a02      	ldr	r2, [pc, #8]	; (8005394 <stdio_exit_handler+0xc>)
 800538a:	4903      	ldr	r1, [pc, #12]	; (8005398 <stdio_exit_handler+0x10>)
 800538c:	4803      	ldr	r0, [pc, #12]	; (800539c <stdio_exit_handler+0x14>)
 800538e:	f000 b869 	b.w	8005464 <_fwalk_sglue>
 8005392:	bf00      	nop
 8005394:	20000010 	.word	0x20000010
 8005398:	080060c9 	.word	0x080060c9
 800539c:	2000001c 	.word	0x2000001c

080053a0 <cleanup_stdio>:
 80053a0:	6841      	ldr	r1, [r0, #4]
 80053a2:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <cleanup_stdio+0x34>)
 80053a4:	4299      	cmp	r1, r3
 80053a6:	b510      	push	{r4, lr}
 80053a8:	4604      	mov	r4, r0
 80053aa:	d001      	beq.n	80053b0 <cleanup_stdio+0x10>
 80053ac:	f000 fe8c 	bl	80060c8 <_fflush_r>
 80053b0:	68a1      	ldr	r1, [r4, #8]
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <cleanup_stdio+0x38>)
 80053b4:	4299      	cmp	r1, r3
 80053b6:	d002      	beq.n	80053be <cleanup_stdio+0x1e>
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 fe85 	bl	80060c8 <_fflush_r>
 80053be:	68e1      	ldr	r1, [r4, #12]
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <cleanup_stdio+0x3c>)
 80053c2:	4299      	cmp	r1, r3
 80053c4:	d004      	beq.n	80053d0 <cleanup_stdio+0x30>
 80053c6:	4620      	mov	r0, r4
 80053c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053cc:	f000 be7c 	b.w	80060c8 <_fflush_r>
 80053d0:	bd10      	pop	{r4, pc}
 80053d2:	bf00      	nop
 80053d4:	20000914 	.word	0x20000914
 80053d8:	2000097c 	.word	0x2000097c
 80053dc:	200009e4 	.word	0x200009e4

080053e0 <global_stdio_init.part.0>:
 80053e0:	b510      	push	{r4, lr}
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <global_stdio_init.part.0+0x30>)
 80053e4:	4c0b      	ldr	r4, [pc, #44]	; (8005414 <global_stdio_init.part.0+0x34>)
 80053e6:	4a0c      	ldr	r2, [pc, #48]	; (8005418 <global_stdio_init.part.0+0x38>)
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	4620      	mov	r0, r4
 80053ec:	2200      	movs	r2, #0
 80053ee:	2104      	movs	r1, #4
 80053f0:	f7ff ff94 	bl	800531c <std>
 80053f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80053f8:	2201      	movs	r2, #1
 80053fa:	2109      	movs	r1, #9
 80053fc:	f7ff ff8e 	bl	800531c <std>
 8005400:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005404:	2202      	movs	r2, #2
 8005406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800540a:	2112      	movs	r1, #18
 800540c:	f7ff bf86 	b.w	800531c <std>
 8005410:	20000a4c 	.word	0x20000a4c
 8005414:	20000914 	.word	0x20000914
 8005418:	08005389 	.word	0x08005389

0800541c <__sfp_lock_acquire>:
 800541c:	4801      	ldr	r0, [pc, #4]	; (8005424 <__sfp_lock_acquire+0x8>)
 800541e:	f000 b9fe 	b.w	800581e <__retarget_lock_acquire_recursive>
 8005422:	bf00      	nop
 8005424:	20000a55 	.word	0x20000a55

08005428 <__sfp_lock_release>:
 8005428:	4801      	ldr	r0, [pc, #4]	; (8005430 <__sfp_lock_release+0x8>)
 800542a:	f000 b9f9 	b.w	8005820 <__retarget_lock_release_recursive>
 800542e:	bf00      	nop
 8005430:	20000a55 	.word	0x20000a55

08005434 <__sinit>:
 8005434:	b510      	push	{r4, lr}
 8005436:	4604      	mov	r4, r0
 8005438:	f7ff fff0 	bl	800541c <__sfp_lock_acquire>
 800543c:	6a23      	ldr	r3, [r4, #32]
 800543e:	b11b      	cbz	r3, 8005448 <__sinit+0x14>
 8005440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005444:	f7ff bff0 	b.w	8005428 <__sfp_lock_release>
 8005448:	4b04      	ldr	r3, [pc, #16]	; (800545c <__sinit+0x28>)
 800544a:	6223      	str	r3, [r4, #32]
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <__sinit+0x2c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1f5      	bne.n	8005440 <__sinit+0xc>
 8005454:	f7ff ffc4 	bl	80053e0 <global_stdio_init.part.0>
 8005458:	e7f2      	b.n	8005440 <__sinit+0xc>
 800545a:	bf00      	nop
 800545c:	080053a1 	.word	0x080053a1
 8005460:	20000a4c 	.word	0x20000a4c

08005464 <_fwalk_sglue>:
 8005464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005468:	4607      	mov	r7, r0
 800546a:	4688      	mov	r8, r1
 800546c:	4614      	mov	r4, r2
 800546e:	2600      	movs	r6, #0
 8005470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005474:	f1b9 0901 	subs.w	r9, r9, #1
 8005478:	d505      	bpl.n	8005486 <_fwalk_sglue+0x22>
 800547a:	6824      	ldr	r4, [r4, #0]
 800547c:	2c00      	cmp	r4, #0
 800547e:	d1f7      	bne.n	8005470 <_fwalk_sglue+0xc>
 8005480:	4630      	mov	r0, r6
 8005482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005486:	89ab      	ldrh	r3, [r5, #12]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d907      	bls.n	800549c <_fwalk_sglue+0x38>
 800548c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005490:	3301      	adds	r3, #1
 8005492:	d003      	beq.n	800549c <_fwalk_sglue+0x38>
 8005494:	4629      	mov	r1, r5
 8005496:	4638      	mov	r0, r7
 8005498:	47c0      	blx	r8
 800549a:	4306      	orrs	r6, r0
 800549c:	3568      	adds	r5, #104	; 0x68
 800549e:	e7e9      	b.n	8005474 <_fwalk_sglue+0x10>

080054a0 <iprintf>:
 80054a0:	b40f      	push	{r0, r1, r2, r3}
 80054a2:	b507      	push	{r0, r1, r2, lr}
 80054a4:	4906      	ldr	r1, [pc, #24]	; (80054c0 <iprintf+0x20>)
 80054a6:	ab04      	add	r3, sp, #16
 80054a8:	6808      	ldr	r0, [r1, #0]
 80054aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ae:	6881      	ldr	r1, [r0, #8]
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	f000 fad9 	bl	8005a68 <_vfiprintf_r>
 80054b6:	b003      	add	sp, #12
 80054b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054bc:	b004      	add	sp, #16
 80054be:	4770      	bx	lr
 80054c0:	20000068 	.word	0x20000068

080054c4 <_puts_r>:
 80054c4:	6a03      	ldr	r3, [r0, #32]
 80054c6:	b570      	push	{r4, r5, r6, lr}
 80054c8:	6884      	ldr	r4, [r0, #8]
 80054ca:	4605      	mov	r5, r0
 80054cc:	460e      	mov	r6, r1
 80054ce:	b90b      	cbnz	r3, 80054d4 <_puts_r+0x10>
 80054d0:	f7ff ffb0 	bl	8005434 <__sinit>
 80054d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054d6:	07db      	lsls	r3, r3, #31
 80054d8:	d405      	bmi.n	80054e6 <_puts_r+0x22>
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	0598      	lsls	r0, r3, #22
 80054de:	d402      	bmi.n	80054e6 <_puts_r+0x22>
 80054e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054e2:	f000 f99c 	bl	800581e <__retarget_lock_acquire_recursive>
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	0719      	lsls	r1, r3, #28
 80054ea:	d513      	bpl.n	8005514 <_puts_r+0x50>
 80054ec:	6923      	ldr	r3, [r4, #16]
 80054ee:	b18b      	cbz	r3, 8005514 <_puts_r+0x50>
 80054f0:	3e01      	subs	r6, #1
 80054f2:	68a3      	ldr	r3, [r4, #8]
 80054f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054f8:	3b01      	subs	r3, #1
 80054fa:	60a3      	str	r3, [r4, #8]
 80054fc:	b9e9      	cbnz	r1, 800553a <_puts_r+0x76>
 80054fe:	2b00      	cmp	r3, #0
 8005500:	da2e      	bge.n	8005560 <_puts_r+0x9c>
 8005502:	4622      	mov	r2, r4
 8005504:	210a      	movs	r1, #10
 8005506:	4628      	mov	r0, r5
 8005508:	f000 f87b 	bl	8005602 <__swbuf_r>
 800550c:	3001      	adds	r0, #1
 800550e:	d007      	beq.n	8005520 <_puts_r+0x5c>
 8005510:	250a      	movs	r5, #10
 8005512:	e007      	b.n	8005524 <_puts_r+0x60>
 8005514:	4621      	mov	r1, r4
 8005516:	4628      	mov	r0, r5
 8005518:	f000 f8b0 	bl	800567c <__swsetup_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	d0e7      	beq.n	80054f0 <_puts_r+0x2c>
 8005520:	f04f 35ff 	mov.w	r5, #4294967295
 8005524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005526:	07da      	lsls	r2, r3, #31
 8005528:	d405      	bmi.n	8005536 <_puts_r+0x72>
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	059b      	lsls	r3, r3, #22
 800552e:	d402      	bmi.n	8005536 <_puts_r+0x72>
 8005530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005532:	f000 f975 	bl	8005820 <__retarget_lock_release_recursive>
 8005536:	4628      	mov	r0, r5
 8005538:	bd70      	pop	{r4, r5, r6, pc}
 800553a:	2b00      	cmp	r3, #0
 800553c:	da04      	bge.n	8005548 <_puts_r+0x84>
 800553e:	69a2      	ldr	r2, [r4, #24]
 8005540:	429a      	cmp	r2, r3
 8005542:	dc06      	bgt.n	8005552 <_puts_r+0x8e>
 8005544:	290a      	cmp	r1, #10
 8005546:	d004      	beq.n	8005552 <_puts_r+0x8e>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	6022      	str	r2, [r4, #0]
 800554e:	7019      	strb	r1, [r3, #0]
 8005550:	e7cf      	b.n	80054f2 <_puts_r+0x2e>
 8005552:	4622      	mov	r2, r4
 8005554:	4628      	mov	r0, r5
 8005556:	f000 f854 	bl	8005602 <__swbuf_r>
 800555a:	3001      	adds	r0, #1
 800555c:	d1c9      	bne.n	80054f2 <_puts_r+0x2e>
 800555e:	e7df      	b.n	8005520 <_puts_r+0x5c>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	250a      	movs	r5, #10
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	6022      	str	r2, [r4, #0]
 8005568:	701d      	strb	r5, [r3, #0]
 800556a:	e7db      	b.n	8005524 <_puts_r+0x60>

0800556c <puts>:
 800556c:	4b02      	ldr	r3, [pc, #8]	; (8005578 <puts+0xc>)
 800556e:	4601      	mov	r1, r0
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	f7ff bfa7 	b.w	80054c4 <_puts_r>
 8005576:	bf00      	nop
 8005578:	20000068 	.word	0x20000068

0800557c <__sread>:
 800557c:	b510      	push	{r4, lr}
 800557e:	460c      	mov	r4, r1
 8005580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005584:	f000 f8fc 	bl	8005780 <_read_r>
 8005588:	2800      	cmp	r0, #0
 800558a:	bfab      	itete	ge
 800558c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800558e:	89a3      	ldrhlt	r3, [r4, #12]
 8005590:	181b      	addge	r3, r3, r0
 8005592:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005596:	bfac      	ite	ge
 8005598:	6563      	strge	r3, [r4, #84]	; 0x54
 800559a:	81a3      	strhlt	r3, [r4, #12]
 800559c:	bd10      	pop	{r4, pc}

0800559e <__swrite>:
 800559e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a2:	461f      	mov	r7, r3
 80055a4:	898b      	ldrh	r3, [r1, #12]
 80055a6:	05db      	lsls	r3, r3, #23
 80055a8:	4605      	mov	r5, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	4616      	mov	r6, r2
 80055ae:	d505      	bpl.n	80055bc <__swrite+0x1e>
 80055b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b4:	2302      	movs	r3, #2
 80055b6:	2200      	movs	r2, #0
 80055b8:	f000 f8d0 	bl	800575c <_lseek_r>
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	4632      	mov	r2, r6
 80055ca:	463b      	mov	r3, r7
 80055cc:	4628      	mov	r0, r5
 80055ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055d2:	f000 b8e7 	b.w	80057a4 <_write_r>

080055d6 <__sseek>:
 80055d6:	b510      	push	{r4, lr}
 80055d8:	460c      	mov	r4, r1
 80055da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055de:	f000 f8bd 	bl	800575c <_lseek_r>
 80055e2:	1c43      	adds	r3, r0, #1
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	bf15      	itete	ne
 80055e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80055ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055f2:	81a3      	strheq	r3, [r4, #12]
 80055f4:	bf18      	it	ne
 80055f6:	81a3      	strhne	r3, [r4, #12]
 80055f8:	bd10      	pop	{r4, pc}

080055fa <__sclose>:
 80055fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055fe:	f000 b89d 	b.w	800573c <_close_r>

08005602 <__swbuf_r>:
 8005602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005604:	460e      	mov	r6, r1
 8005606:	4614      	mov	r4, r2
 8005608:	4605      	mov	r5, r0
 800560a:	b118      	cbz	r0, 8005614 <__swbuf_r+0x12>
 800560c:	6a03      	ldr	r3, [r0, #32]
 800560e:	b90b      	cbnz	r3, 8005614 <__swbuf_r+0x12>
 8005610:	f7ff ff10 	bl	8005434 <__sinit>
 8005614:	69a3      	ldr	r3, [r4, #24]
 8005616:	60a3      	str	r3, [r4, #8]
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	071a      	lsls	r2, r3, #28
 800561c:	d525      	bpl.n	800566a <__swbuf_r+0x68>
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	b31b      	cbz	r3, 800566a <__swbuf_r+0x68>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	6922      	ldr	r2, [r4, #16]
 8005626:	1a98      	subs	r0, r3, r2
 8005628:	6963      	ldr	r3, [r4, #20]
 800562a:	b2f6      	uxtb	r6, r6
 800562c:	4283      	cmp	r3, r0
 800562e:	4637      	mov	r7, r6
 8005630:	dc04      	bgt.n	800563c <__swbuf_r+0x3a>
 8005632:	4621      	mov	r1, r4
 8005634:	4628      	mov	r0, r5
 8005636:	f000 fd47 	bl	80060c8 <_fflush_r>
 800563a:	b9e0      	cbnz	r0, 8005676 <__swbuf_r+0x74>
 800563c:	68a3      	ldr	r3, [r4, #8]
 800563e:	3b01      	subs	r3, #1
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	6022      	str	r2, [r4, #0]
 8005648:	701e      	strb	r6, [r3, #0]
 800564a:	6962      	ldr	r2, [r4, #20]
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	429a      	cmp	r2, r3
 8005650:	d004      	beq.n	800565c <__swbuf_r+0x5a>
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	07db      	lsls	r3, r3, #31
 8005656:	d506      	bpl.n	8005666 <__swbuf_r+0x64>
 8005658:	2e0a      	cmp	r6, #10
 800565a:	d104      	bne.n	8005666 <__swbuf_r+0x64>
 800565c:	4621      	mov	r1, r4
 800565e:	4628      	mov	r0, r5
 8005660:	f000 fd32 	bl	80060c8 <_fflush_r>
 8005664:	b938      	cbnz	r0, 8005676 <__swbuf_r+0x74>
 8005666:	4638      	mov	r0, r7
 8005668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800566a:	4621      	mov	r1, r4
 800566c:	4628      	mov	r0, r5
 800566e:	f000 f805 	bl	800567c <__swsetup_r>
 8005672:	2800      	cmp	r0, #0
 8005674:	d0d5      	beq.n	8005622 <__swbuf_r+0x20>
 8005676:	f04f 37ff 	mov.w	r7, #4294967295
 800567a:	e7f4      	b.n	8005666 <__swbuf_r+0x64>

0800567c <__swsetup_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4b2a      	ldr	r3, [pc, #168]	; (8005728 <__swsetup_r+0xac>)
 8005680:	4605      	mov	r5, r0
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	460c      	mov	r4, r1
 8005686:	b118      	cbz	r0, 8005690 <__swsetup_r+0x14>
 8005688:	6a03      	ldr	r3, [r0, #32]
 800568a:	b90b      	cbnz	r3, 8005690 <__swsetup_r+0x14>
 800568c:	f7ff fed2 	bl	8005434 <__sinit>
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005696:	0718      	lsls	r0, r3, #28
 8005698:	d422      	bmi.n	80056e0 <__swsetup_r+0x64>
 800569a:	06d9      	lsls	r1, r3, #27
 800569c:	d407      	bmi.n	80056ae <__swsetup_r+0x32>
 800569e:	2309      	movs	r3, #9
 80056a0:	602b      	str	r3, [r5, #0]
 80056a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056a6:	81a3      	strh	r3, [r4, #12]
 80056a8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ac:	e034      	b.n	8005718 <__swsetup_r+0x9c>
 80056ae:	0758      	lsls	r0, r3, #29
 80056b0:	d512      	bpl.n	80056d8 <__swsetup_r+0x5c>
 80056b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056b4:	b141      	cbz	r1, 80056c8 <__swsetup_r+0x4c>
 80056b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056ba:	4299      	cmp	r1, r3
 80056bc:	d002      	beq.n	80056c4 <__swsetup_r+0x48>
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 f8b0 	bl	8005824 <_free_r>
 80056c4:	2300      	movs	r3, #0
 80056c6:	6363      	str	r3, [r4, #52]	; 0x34
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	2300      	movs	r3, #0
 80056d2:	6063      	str	r3, [r4, #4]
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	6023      	str	r3, [r4, #0]
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	f043 0308 	orr.w	r3, r3, #8
 80056de:	81a3      	strh	r3, [r4, #12]
 80056e0:	6923      	ldr	r3, [r4, #16]
 80056e2:	b94b      	cbnz	r3, 80056f8 <__swsetup_r+0x7c>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ee:	d003      	beq.n	80056f8 <__swsetup_r+0x7c>
 80056f0:	4621      	mov	r1, r4
 80056f2:	4628      	mov	r0, r5
 80056f4:	f000 fd36 	bl	8006164 <__smakebuf_r>
 80056f8:	89a0      	ldrh	r0, [r4, #12]
 80056fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056fe:	f010 0301 	ands.w	r3, r0, #1
 8005702:	d00a      	beq.n	800571a <__swsetup_r+0x9e>
 8005704:	2300      	movs	r3, #0
 8005706:	60a3      	str	r3, [r4, #8]
 8005708:	6963      	ldr	r3, [r4, #20]
 800570a:	425b      	negs	r3, r3
 800570c:	61a3      	str	r3, [r4, #24]
 800570e:	6923      	ldr	r3, [r4, #16]
 8005710:	b943      	cbnz	r3, 8005724 <__swsetup_r+0xa8>
 8005712:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005716:	d1c4      	bne.n	80056a2 <__swsetup_r+0x26>
 8005718:	bd38      	pop	{r3, r4, r5, pc}
 800571a:	0781      	lsls	r1, r0, #30
 800571c:	bf58      	it	pl
 800571e:	6963      	ldrpl	r3, [r4, #20]
 8005720:	60a3      	str	r3, [r4, #8]
 8005722:	e7f4      	b.n	800570e <__swsetup_r+0x92>
 8005724:	2000      	movs	r0, #0
 8005726:	e7f7      	b.n	8005718 <__swsetup_r+0x9c>
 8005728:	20000068 	.word	0x20000068

0800572c <memset>:
 800572c:	4402      	add	r2, r0
 800572e:	4603      	mov	r3, r0
 8005730:	4293      	cmp	r3, r2
 8005732:	d100      	bne.n	8005736 <memset+0xa>
 8005734:	4770      	bx	lr
 8005736:	f803 1b01 	strb.w	r1, [r3], #1
 800573a:	e7f9      	b.n	8005730 <memset+0x4>

0800573c <_close_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4d06      	ldr	r5, [pc, #24]	; (8005758 <_close_r+0x1c>)
 8005740:	2300      	movs	r3, #0
 8005742:	4604      	mov	r4, r0
 8005744:	4608      	mov	r0, r1
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	f7fb fd27 	bl	800119a <_close>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_close_r+0x1a>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_close_r+0x1a>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	20000a50 	.word	0x20000a50

0800575c <_lseek_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4d07      	ldr	r5, [pc, #28]	; (800577c <_lseek_r+0x20>)
 8005760:	4604      	mov	r4, r0
 8005762:	4608      	mov	r0, r1
 8005764:	4611      	mov	r1, r2
 8005766:	2200      	movs	r2, #0
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f7fb fd3c 	bl	80011e8 <_lseek>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d102      	bne.n	800577a <_lseek_r+0x1e>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	b103      	cbz	r3, 800577a <_lseek_r+0x1e>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	20000a50 	.word	0x20000a50

08005780 <_read_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d07      	ldr	r5, [pc, #28]	; (80057a0 <_read_r+0x20>)
 8005784:	4604      	mov	r4, r0
 8005786:	4608      	mov	r0, r1
 8005788:	4611      	mov	r1, r2
 800578a:	2200      	movs	r2, #0
 800578c:	602a      	str	r2, [r5, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	f7fb fce6 	bl	8001160 <_read>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_read_r+0x1e>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b103      	cbz	r3, 800579e <_read_r+0x1e>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	20000a50 	.word	0x20000a50

080057a4 <_write_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	4d07      	ldr	r5, [pc, #28]	; (80057c4 <_write_r+0x20>)
 80057a8:	4604      	mov	r4, r0
 80057aa:	4608      	mov	r0, r1
 80057ac:	4611      	mov	r1, r2
 80057ae:	2200      	movs	r2, #0
 80057b0:	602a      	str	r2, [r5, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f7fa ff39 	bl	800062a <_write>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_write_r+0x1e>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_write_r+0x1e>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	20000a50 	.word	0x20000a50

080057c8 <__errno>:
 80057c8:	4b01      	ldr	r3, [pc, #4]	; (80057d0 <__errno+0x8>)
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000068 	.word	0x20000068

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4d0d      	ldr	r5, [pc, #52]	; (800580c <__libc_init_array+0x38>)
 80057d8:	4c0d      	ldr	r4, [pc, #52]	; (8005810 <__libc_init_array+0x3c>)
 80057da:	1b64      	subs	r4, r4, r5
 80057dc:	10a4      	asrs	r4, r4, #2
 80057de:	2600      	movs	r6, #0
 80057e0:	42a6      	cmp	r6, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	4d0b      	ldr	r5, [pc, #44]	; (8005814 <__libc_init_array+0x40>)
 80057e6:	4c0c      	ldr	r4, [pc, #48]	; (8005818 <__libc_init_array+0x44>)
 80057e8:	f000 fd2a 	bl	8006240 <_init>
 80057ec:	1b64      	subs	r4, r4, r5
 80057ee:	10a4      	asrs	r4, r4, #2
 80057f0:	2600      	movs	r6, #0
 80057f2:	42a6      	cmp	r6, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fc:	4798      	blx	r3
 80057fe:	3601      	adds	r6, #1
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f855 3b04 	ldr.w	r3, [r5], #4
 8005806:	4798      	blx	r3
 8005808:	3601      	adds	r6, #1
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	08006320 	.word	0x08006320
 8005810:	08006320 	.word	0x08006320
 8005814:	08006320 	.word	0x08006320
 8005818:	08006324 	.word	0x08006324

0800581c <__retarget_lock_init_recursive>:
 800581c:	4770      	bx	lr

0800581e <__retarget_lock_acquire_recursive>:
 800581e:	4770      	bx	lr

08005820 <__retarget_lock_release_recursive>:
 8005820:	4770      	bx	lr
	...

08005824 <_free_r>:
 8005824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005826:	2900      	cmp	r1, #0
 8005828:	d044      	beq.n	80058b4 <_free_r+0x90>
 800582a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582e:	9001      	str	r0, [sp, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f1a1 0404 	sub.w	r4, r1, #4
 8005836:	bfb8      	it	lt
 8005838:	18e4      	addlt	r4, r4, r3
 800583a:	f000 f8df 	bl	80059fc <__malloc_lock>
 800583e:	4a1e      	ldr	r2, [pc, #120]	; (80058b8 <_free_r+0x94>)
 8005840:	9801      	ldr	r0, [sp, #4]
 8005842:	6813      	ldr	r3, [r2, #0]
 8005844:	b933      	cbnz	r3, 8005854 <_free_r+0x30>
 8005846:	6063      	str	r3, [r4, #4]
 8005848:	6014      	str	r4, [r2, #0]
 800584a:	b003      	add	sp, #12
 800584c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005850:	f000 b8da 	b.w	8005a08 <__malloc_unlock>
 8005854:	42a3      	cmp	r3, r4
 8005856:	d908      	bls.n	800586a <_free_r+0x46>
 8005858:	6825      	ldr	r5, [r4, #0]
 800585a:	1961      	adds	r1, r4, r5
 800585c:	428b      	cmp	r3, r1
 800585e:	bf01      	itttt	eq
 8005860:	6819      	ldreq	r1, [r3, #0]
 8005862:	685b      	ldreq	r3, [r3, #4]
 8005864:	1949      	addeq	r1, r1, r5
 8005866:	6021      	streq	r1, [r4, #0]
 8005868:	e7ed      	b.n	8005846 <_free_r+0x22>
 800586a:	461a      	mov	r2, r3
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	b10b      	cbz	r3, 8005874 <_free_r+0x50>
 8005870:	42a3      	cmp	r3, r4
 8005872:	d9fa      	bls.n	800586a <_free_r+0x46>
 8005874:	6811      	ldr	r1, [r2, #0]
 8005876:	1855      	adds	r5, r2, r1
 8005878:	42a5      	cmp	r5, r4
 800587a:	d10b      	bne.n	8005894 <_free_r+0x70>
 800587c:	6824      	ldr	r4, [r4, #0]
 800587e:	4421      	add	r1, r4
 8005880:	1854      	adds	r4, r2, r1
 8005882:	42a3      	cmp	r3, r4
 8005884:	6011      	str	r1, [r2, #0]
 8005886:	d1e0      	bne.n	800584a <_free_r+0x26>
 8005888:	681c      	ldr	r4, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	6053      	str	r3, [r2, #4]
 800588e:	440c      	add	r4, r1
 8005890:	6014      	str	r4, [r2, #0]
 8005892:	e7da      	b.n	800584a <_free_r+0x26>
 8005894:	d902      	bls.n	800589c <_free_r+0x78>
 8005896:	230c      	movs	r3, #12
 8005898:	6003      	str	r3, [r0, #0]
 800589a:	e7d6      	b.n	800584a <_free_r+0x26>
 800589c:	6825      	ldr	r5, [r4, #0]
 800589e:	1961      	adds	r1, r4, r5
 80058a0:	428b      	cmp	r3, r1
 80058a2:	bf04      	itt	eq
 80058a4:	6819      	ldreq	r1, [r3, #0]
 80058a6:	685b      	ldreq	r3, [r3, #4]
 80058a8:	6063      	str	r3, [r4, #4]
 80058aa:	bf04      	itt	eq
 80058ac:	1949      	addeq	r1, r1, r5
 80058ae:	6021      	streq	r1, [r4, #0]
 80058b0:	6054      	str	r4, [r2, #4]
 80058b2:	e7ca      	b.n	800584a <_free_r+0x26>
 80058b4:	b003      	add	sp, #12
 80058b6:	bd30      	pop	{r4, r5, pc}
 80058b8:	20000a58 	.word	0x20000a58

080058bc <sbrk_aligned>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	4e0e      	ldr	r6, [pc, #56]	; (80058f8 <sbrk_aligned+0x3c>)
 80058c0:	460c      	mov	r4, r1
 80058c2:	6831      	ldr	r1, [r6, #0]
 80058c4:	4605      	mov	r5, r0
 80058c6:	b911      	cbnz	r1, 80058ce <sbrk_aligned+0x12>
 80058c8:	f000 fcaa 	bl	8006220 <_sbrk_r>
 80058cc:	6030      	str	r0, [r6, #0]
 80058ce:	4621      	mov	r1, r4
 80058d0:	4628      	mov	r0, r5
 80058d2:	f000 fca5 	bl	8006220 <_sbrk_r>
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	d00a      	beq.n	80058f0 <sbrk_aligned+0x34>
 80058da:	1cc4      	adds	r4, r0, #3
 80058dc:	f024 0403 	bic.w	r4, r4, #3
 80058e0:	42a0      	cmp	r0, r4
 80058e2:	d007      	beq.n	80058f4 <sbrk_aligned+0x38>
 80058e4:	1a21      	subs	r1, r4, r0
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 fc9a 	bl	8006220 <_sbrk_r>
 80058ec:	3001      	adds	r0, #1
 80058ee:	d101      	bne.n	80058f4 <sbrk_aligned+0x38>
 80058f0:	f04f 34ff 	mov.w	r4, #4294967295
 80058f4:	4620      	mov	r0, r4
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	20000a5c 	.word	0x20000a5c

080058fc <_malloc_r>:
 80058fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005900:	1ccd      	adds	r5, r1, #3
 8005902:	f025 0503 	bic.w	r5, r5, #3
 8005906:	3508      	adds	r5, #8
 8005908:	2d0c      	cmp	r5, #12
 800590a:	bf38      	it	cc
 800590c:	250c      	movcc	r5, #12
 800590e:	2d00      	cmp	r5, #0
 8005910:	4607      	mov	r7, r0
 8005912:	db01      	blt.n	8005918 <_malloc_r+0x1c>
 8005914:	42a9      	cmp	r1, r5
 8005916:	d905      	bls.n	8005924 <_malloc_r+0x28>
 8005918:	230c      	movs	r3, #12
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	2600      	movs	r6, #0
 800591e:	4630      	mov	r0, r6
 8005920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005924:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059f8 <_malloc_r+0xfc>
 8005928:	f000 f868 	bl	80059fc <__malloc_lock>
 800592c:	f8d8 3000 	ldr.w	r3, [r8]
 8005930:	461c      	mov	r4, r3
 8005932:	bb5c      	cbnz	r4, 800598c <_malloc_r+0x90>
 8005934:	4629      	mov	r1, r5
 8005936:	4638      	mov	r0, r7
 8005938:	f7ff ffc0 	bl	80058bc <sbrk_aligned>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	4604      	mov	r4, r0
 8005940:	d155      	bne.n	80059ee <_malloc_r+0xf2>
 8005942:	f8d8 4000 	ldr.w	r4, [r8]
 8005946:	4626      	mov	r6, r4
 8005948:	2e00      	cmp	r6, #0
 800594a:	d145      	bne.n	80059d8 <_malloc_r+0xdc>
 800594c:	2c00      	cmp	r4, #0
 800594e:	d048      	beq.n	80059e2 <_malloc_r+0xe6>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	4631      	mov	r1, r6
 8005954:	4638      	mov	r0, r7
 8005956:	eb04 0903 	add.w	r9, r4, r3
 800595a:	f000 fc61 	bl	8006220 <_sbrk_r>
 800595e:	4581      	cmp	r9, r0
 8005960:	d13f      	bne.n	80059e2 <_malloc_r+0xe6>
 8005962:	6821      	ldr	r1, [r4, #0]
 8005964:	1a6d      	subs	r5, r5, r1
 8005966:	4629      	mov	r1, r5
 8005968:	4638      	mov	r0, r7
 800596a:	f7ff ffa7 	bl	80058bc <sbrk_aligned>
 800596e:	3001      	adds	r0, #1
 8005970:	d037      	beq.n	80059e2 <_malloc_r+0xe6>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	442b      	add	r3, r5
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	f8d8 3000 	ldr.w	r3, [r8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d038      	beq.n	80059f2 <_malloc_r+0xf6>
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	42a2      	cmp	r2, r4
 8005984:	d12b      	bne.n	80059de <_malloc_r+0xe2>
 8005986:	2200      	movs	r2, #0
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	e00f      	b.n	80059ac <_malloc_r+0xb0>
 800598c:	6822      	ldr	r2, [r4, #0]
 800598e:	1b52      	subs	r2, r2, r5
 8005990:	d41f      	bmi.n	80059d2 <_malloc_r+0xd6>
 8005992:	2a0b      	cmp	r2, #11
 8005994:	d917      	bls.n	80059c6 <_malloc_r+0xca>
 8005996:	1961      	adds	r1, r4, r5
 8005998:	42a3      	cmp	r3, r4
 800599a:	6025      	str	r5, [r4, #0]
 800599c:	bf18      	it	ne
 800599e:	6059      	strne	r1, [r3, #4]
 80059a0:	6863      	ldr	r3, [r4, #4]
 80059a2:	bf08      	it	eq
 80059a4:	f8c8 1000 	streq.w	r1, [r8]
 80059a8:	5162      	str	r2, [r4, r5]
 80059aa:	604b      	str	r3, [r1, #4]
 80059ac:	4638      	mov	r0, r7
 80059ae:	f104 060b 	add.w	r6, r4, #11
 80059b2:	f000 f829 	bl	8005a08 <__malloc_unlock>
 80059b6:	f026 0607 	bic.w	r6, r6, #7
 80059ba:	1d23      	adds	r3, r4, #4
 80059bc:	1af2      	subs	r2, r6, r3
 80059be:	d0ae      	beq.n	800591e <_malloc_r+0x22>
 80059c0:	1b9b      	subs	r3, r3, r6
 80059c2:	50a3      	str	r3, [r4, r2]
 80059c4:	e7ab      	b.n	800591e <_malloc_r+0x22>
 80059c6:	42a3      	cmp	r3, r4
 80059c8:	6862      	ldr	r2, [r4, #4]
 80059ca:	d1dd      	bne.n	8005988 <_malloc_r+0x8c>
 80059cc:	f8c8 2000 	str.w	r2, [r8]
 80059d0:	e7ec      	b.n	80059ac <_malloc_r+0xb0>
 80059d2:	4623      	mov	r3, r4
 80059d4:	6864      	ldr	r4, [r4, #4]
 80059d6:	e7ac      	b.n	8005932 <_malloc_r+0x36>
 80059d8:	4634      	mov	r4, r6
 80059da:	6876      	ldr	r6, [r6, #4]
 80059dc:	e7b4      	b.n	8005948 <_malloc_r+0x4c>
 80059de:	4613      	mov	r3, r2
 80059e0:	e7cc      	b.n	800597c <_malloc_r+0x80>
 80059e2:	230c      	movs	r3, #12
 80059e4:	603b      	str	r3, [r7, #0]
 80059e6:	4638      	mov	r0, r7
 80059e8:	f000 f80e 	bl	8005a08 <__malloc_unlock>
 80059ec:	e797      	b.n	800591e <_malloc_r+0x22>
 80059ee:	6025      	str	r5, [r4, #0]
 80059f0:	e7dc      	b.n	80059ac <_malloc_r+0xb0>
 80059f2:	605b      	str	r3, [r3, #4]
 80059f4:	deff      	udf	#255	; 0xff
 80059f6:	bf00      	nop
 80059f8:	20000a58 	.word	0x20000a58

080059fc <__malloc_lock>:
 80059fc:	4801      	ldr	r0, [pc, #4]	; (8005a04 <__malloc_lock+0x8>)
 80059fe:	f7ff bf0e 	b.w	800581e <__retarget_lock_acquire_recursive>
 8005a02:	bf00      	nop
 8005a04:	20000a54 	.word	0x20000a54

08005a08 <__malloc_unlock>:
 8005a08:	4801      	ldr	r0, [pc, #4]	; (8005a10 <__malloc_unlock+0x8>)
 8005a0a:	f7ff bf09 	b.w	8005820 <__retarget_lock_release_recursive>
 8005a0e:	bf00      	nop
 8005a10:	20000a54 	.word	0x20000a54

08005a14 <__sfputc_r>:
 8005a14:	6893      	ldr	r3, [r2, #8]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	b410      	push	{r4}
 8005a1c:	6093      	str	r3, [r2, #8]
 8005a1e:	da08      	bge.n	8005a32 <__sfputc_r+0x1e>
 8005a20:	6994      	ldr	r4, [r2, #24]
 8005a22:	42a3      	cmp	r3, r4
 8005a24:	db01      	blt.n	8005a2a <__sfputc_r+0x16>
 8005a26:	290a      	cmp	r1, #10
 8005a28:	d103      	bne.n	8005a32 <__sfputc_r+0x1e>
 8005a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a2e:	f7ff bde8 	b.w	8005602 <__swbuf_r>
 8005a32:	6813      	ldr	r3, [r2, #0]
 8005a34:	1c58      	adds	r0, r3, #1
 8005a36:	6010      	str	r0, [r2, #0]
 8005a38:	7019      	strb	r1, [r3, #0]
 8005a3a:	4608      	mov	r0, r1
 8005a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <__sfputs_r>:
 8005a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	4614      	mov	r4, r2
 8005a4a:	18d5      	adds	r5, r2, r3
 8005a4c:	42ac      	cmp	r4, r5
 8005a4e:	d101      	bne.n	8005a54 <__sfputs_r+0x12>
 8005a50:	2000      	movs	r0, #0
 8005a52:	e007      	b.n	8005a64 <__sfputs_r+0x22>
 8005a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a58:	463a      	mov	r2, r7
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7ff ffda 	bl	8005a14 <__sfputc_r>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d1f3      	bne.n	8005a4c <__sfputs_r+0xa>
 8005a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a68 <_vfiprintf_r>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	460d      	mov	r5, r1
 8005a6e:	b09d      	sub	sp, #116	; 0x74
 8005a70:	4614      	mov	r4, r2
 8005a72:	4698      	mov	r8, r3
 8005a74:	4606      	mov	r6, r0
 8005a76:	b118      	cbz	r0, 8005a80 <_vfiprintf_r+0x18>
 8005a78:	6a03      	ldr	r3, [r0, #32]
 8005a7a:	b90b      	cbnz	r3, 8005a80 <_vfiprintf_r+0x18>
 8005a7c:	f7ff fcda 	bl	8005434 <__sinit>
 8005a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a82:	07d9      	lsls	r1, r3, #31
 8005a84:	d405      	bmi.n	8005a92 <_vfiprintf_r+0x2a>
 8005a86:	89ab      	ldrh	r3, [r5, #12]
 8005a88:	059a      	lsls	r2, r3, #22
 8005a8a:	d402      	bmi.n	8005a92 <_vfiprintf_r+0x2a>
 8005a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a8e:	f7ff fec6 	bl	800581e <__retarget_lock_acquire_recursive>
 8005a92:	89ab      	ldrh	r3, [r5, #12]
 8005a94:	071b      	lsls	r3, r3, #28
 8005a96:	d501      	bpl.n	8005a9c <_vfiprintf_r+0x34>
 8005a98:	692b      	ldr	r3, [r5, #16]
 8005a9a:	b99b      	cbnz	r3, 8005ac4 <_vfiprintf_r+0x5c>
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	f7ff fdec 	bl	800567c <__swsetup_r>
 8005aa4:	b170      	cbz	r0, 8005ac4 <_vfiprintf_r+0x5c>
 8005aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aa8:	07dc      	lsls	r4, r3, #31
 8005aaa:	d504      	bpl.n	8005ab6 <_vfiprintf_r+0x4e>
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	b01d      	add	sp, #116	; 0x74
 8005ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab6:	89ab      	ldrh	r3, [r5, #12]
 8005ab8:	0598      	lsls	r0, r3, #22
 8005aba:	d4f7      	bmi.n	8005aac <_vfiprintf_r+0x44>
 8005abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005abe:	f7ff feaf 	bl	8005820 <__retarget_lock_release_recursive>
 8005ac2:	e7f3      	b.n	8005aac <_vfiprintf_r+0x44>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac8:	2320      	movs	r3, #32
 8005aca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ad2:	2330      	movs	r3, #48	; 0x30
 8005ad4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c88 <_vfiprintf_r+0x220>
 8005ad8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005adc:	f04f 0901 	mov.w	r9, #1
 8005ae0:	4623      	mov	r3, r4
 8005ae2:	469a      	mov	sl, r3
 8005ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae8:	b10a      	cbz	r2, 8005aee <_vfiprintf_r+0x86>
 8005aea:	2a25      	cmp	r2, #37	; 0x25
 8005aec:	d1f9      	bne.n	8005ae2 <_vfiprintf_r+0x7a>
 8005aee:	ebba 0b04 	subs.w	fp, sl, r4
 8005af2:	d00b      	beq.n	8005b0c <_vfiprintf_r+0xa4>
 8005af4:	465b      	mov	r3, fp
 8005af6:	4622      	mov	r2, r4
 8005af8:	4629      	mov	r1, r5
 8005afa:	4630      	mov	r0, r6
 8005afc:	f7ff ffa1 	bl	8005a42 <__sfputs_r>
 8005b00:	3001      	adds	r0, #1
 8005b02:	f000 80a9 	beq.w	8005c58 <_vfiprintf_r+0x1f0>
 8005b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b08:	445a      	add	r2, fp
 8005b0a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80a1 	beq.w	8005c58 <_vfiprintf_r+0x1f0>
 8005b16:	2300      	movs	r3, #0
 8005b18:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b20:	f10a 0a01 	add.w	sl, sl, #1
 8005b24:	9304      	str	r3, [sp, #16]
 8005b26:	9307      	str	r3, [sp, #28]
 8005b28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b2c:	931a      	str	r3, [sp, #104]	; 0x68
 8005b2e:	4654      	mov	r4, sl
 8005b30:	2205      	movs	r2, #5
 8005b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b36:	4854      	ldr	r0, [pc, #336]	; (8005c88 <_vfiprintf_r+0x220>)
 8005b38:	f7fa fb82 	bl	8000240 <memchr>
 8005b3c:	9a04      	ldr	r2, [sp, #16]
 8005b3e:	b9d8      	cbnz	r0, 8005b78 <_vfiprintf_r+0x110>
 8005b40:	06d1      	lsls	r1, r2, #27
 8005b42:	bf44      	itt	mi
 8005b44:	2320      	movmi	r3, #32
 8005b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b4a:	0713      	lsls	r3, r2, #28
 8005b4c:	bf44      	itt	mi
 8005b4e:	232b      	movmi	r3, #43	; 0x2b
 8005b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b54:	f89a 3000 	ldrb.w	r3, [sl]
 8005b58:	2b2a      	cmp	r3, #42	; 0x2a
 8005b5a:	d015      	beq.n	8005b88 <_vfiprintf_r+0x120>
 8005b5c:	9a07      	ldr	r2, [sp, #28]
 8005b5e:	4654      	mov	r4, sl
 8005b60:	2000      	movs	r0, #0
 8005b62:	f04f 0c0a 	mov.w	ip, #10
 8005b66:	4621      	mov	r1, r4
 8005b68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b6c:	3b30      	subs	r3, #48	; 0x30
 8005b6e:	2b09      	cmp	r3, #9
 8005b70:	d94d      	bls.n	8005c0e <_vfiprintf_r+0x1a6>
 8005b72:	b1b0      	cbz	r0, 8005ba2 <_vfiprintf_r+0x13a>
 8005b74:	9207      	str	r2, [sp, #28]
 8005b76:	e014      	b.n	8005ba2 <_vfiprintf_r+0x13a>
 8005b78:	eba0 0308 	sub.w	r3, r0, r8
 8005b7c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b80:	4313      	orrs	r3, r2
 8005b82:	9304      	str	r3, [sp, #16]
 8005b84:	46a2      	mov	sl, r4
 8005b86:	e7d2      	b.n	8005b2e <_vfiprintf_r+0xc6>
 8005b88:	9b03      	ldr	r3, [sp, #12]
 8005b8a:	1d19      	adds	r1, r3, #4
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	9103      	str	r1, [sp, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	bfbb      	ittet	lt
 8005b94:	425b      	neglt	r3, r3
 8005b96:	f042 0202 	orrlt.w	r2, r2, #2
 8005b9a:	9307      	strge	r3, [sp, #28]
 8005b9c:	9307      	strlt	r3, [sp, #28]
 8005b9e:	bfb8      	it	lt
 8005ba0:	9204      	strlt	r2, [sp, #16]
 8005ba2:	7823      	ldrb	r3, [r4, #0]
 8005ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ba6:	d10c      	bne.n	8005bc2 <_vfiprintf_r+0x15a>
 8005ba8:	7863      	ldrb	r3, [r4, #1]
 8005baa:	2b2a      	cmp	r3, #42	; 0x2a
 8005bac:	d134      	bne.n	8005c18 <_vfiprintf_r+0x1b0>
 8005bae:	9b03      	ldr	r3, [sp, #12]
 8005bb0:	1d1a      	adds	r2, r3, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	9203      	str	r2, [sp, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bfb8      	it	lt
 8005bba:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bbe:	3402      	adds	r4, #2
 8005bc0:	9305      	str	r3, [sp, #20]
 8005bc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c98 <_vfiprintf_r+0x230>
 8005bc6:	7821      	ldrb	r1, [r4, #0]
 8005bc8:	2203      	movs	r2, #3
 8005bca:	4650      	mov	r0, sl
 8005bcc:	f7fa fb38 	bl	8000240 <memchr>
 8005bd0:	b138      	cbz	r0, 8005be2 <_vfiprintf_r+0x17a>
 8005bd2:	9b04      	ldr	r3, [sp, #16]
 8005bd4:	eba0 000a 	sub.w	r0, r0, sl
 8005bd8:	2240      	movs	r2, #64	; 0x40
 8005bda:	4082      	lsls	r2, r0
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	3401      	adds	r4, #1
 8005be0:	9304      	str	r3, [sp, #16]
 8005be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be6:	4829      	ldr	r0, [pc, #164]	; (8005c8c <_vfiprintf_r+0x224>)
 8005be8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bec:	2206      	movs	r2, #6
 8005bee:	f7fa fb27 	bl	8000240 <memchr>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d03f      	beq.n	8005c76 <_vfiprintf_r+0x20e>
 8005bf6:	4b26      	ldr	r3, [pc, #152]	; (8005c90 <_vfiprintf_r+0x228>)
 8005bf8:	bb1b      	cbnz	r3, 8005c42 <_vfiprintf_r+0x1da>
 8005bfa:	9b03      	ldr	r3, [sp, #12]
 8005bfc:	3307      	adds	r3, #7
 8005bfe:	f023 0307 	bic.w	r3, r3, #7
 8005c02:	3308      	adds	r3, #8
 8005c04:	9303      	str	r3, [sp, #12]
 8005c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c08:	443b      	add	r3, r7
 8005c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0c:	e768      	b.n	8005ae0 <_vfiprintf_r+0x78>
 8005c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c12:	460c      	mov	r4, r1
 8005c14:	2001      	movs	r0, #1
 8005c16:	e7a6      	b.n	8005b66 <_vfiprintf_r+0xfe>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	3401      	adds	r4, #1
 8005c1c:	9305      	str	r3, [sp, #20]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	f04f 0c0a 	mov.w	ip, #10
 8005c24:	4620      	mov	r0, r4
 8005c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c2a:	3a30      	subs	r2, #48	; 0x30
 8005c2c:	2a09      	cmp	r2, #9
 8005c2e:	d903      	bls.n	8005c38 <_vfiprintf_r+0x1d0>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0c6      	beq.n	8005bc2 <_vfiprintf_r+0x15a>
 8005c34:	9105      	str	r1, [sp, #20]
 8005c36:	e7c4      	b.n	8005bc2 <_vfiprintf_r+0x15a>
 8005c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e7f0      	b.n	8005c24 <_vfiprintf_r+0x1bc>
 8005c42:	ab03      	add	r3, sp, #12
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	462a      	mov	r2, r5
 8005c48:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <_vfiprintf_r+0x22c>)
 8005c4a:	a904      	add	r1, sp, #16
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f3af 8000 	nop.w
 8005c52:	4607      	mov	r7, r0
 8005c54:	1c78      	adds	r0, r7, #1
 8005c56:	d1d6      	bne.n	8005c06 <_vfiprintf_r+0x19e>
 8005c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c5a:	07d9      	lsls	r1, r3, #31
 8005c5c:	d405      	bmi.n	8005c6a <_vfiprintf_r+0x202>
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	059a      	lsls	r2, r3, #22
 8005c62:	d402      	bmi.n	8005c6a <_vfiprintf_r+0x202>
 8005c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c66:	f7ff fddb 	bl	8005820 <__retarget_lock_release_recursive>
 8005c6a:	89ab      	ldrh	r3, [r5, #12]
 8005c6c:	065b      	lsls	r3, r3, #25
 8005c6e:	f53f af1d 	bmi.w	8005aac <_vfiprintf_r+0x44>
 8005c72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c74:	e71c      	b.n	8005ab0 <_vfiprintf_r+0x48>
 8005c76:	ab03      	add	r3, sp, #12
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <_vfiprintf_r+0x22c>)
 8005c7e:	a904      	add	r1, sp, #16
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 f879 	bl	8005d78 <_printf_i>
 8005c86:	e7e4      	b.n	8005c52 <_vfiprintf_r+0x1ea>
 8005c88:	080062e4 	.word	0x080062e4
 8005c8c:	080062ee 	.word	0x080062ee
 8005c90:	00000000 	.word	0x00000000
 8005c94:	08005a43 	.word	0x08005a43
 8005c98:	080062ea 	.word	0x080062ea

08005c9c <_printf_common>:
 8005c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca0:	4616      	mov	r6, r2
 8005ca2:	4699      	mov	r9, r3
 8005ca4:	688a      	ldr	r2, [r1, #8]
 8005ca6:	690b      	ldr	r3, [r1, #16]
 8005ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cac:	4293      	cmp	r3, r2
 8005cae:	bfb8      	it	lt
 8005cb0:	4613      	movlt	r3, r2
 8005cb2:	6033      	str	r3, [r6, #0]
 8005cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cb8:	4607      	mov	r7, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	b10a      	cbz	r2, 8005cc2 <_printf_common+0x26>
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	6033      	str	r3, [r6, #0]
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	0699      	lsls	r1, r3, #26
 8005cc6:	bf42      	ittt	mi
 8005cc8:	6833      	ldrmi	r3, [r6, #0]
 8005cca:	3302      	addmi	r3, #2
 8005ccc:	6033      	strmi	r3, [r6, #0]
 8005cce:	6825      	ldr	r5, [r4, #0]
 8005cd0:	f015 0506 	ands.w	r5, r5, #6
 8005cd4:	d106      	bne.n	8005ce4 <_printf_common+0x48>
 8005cd6:	f104 0a19 	add.w	sl, r4, #25
 8005cda:	68e3      	ldr	r3, [r4, #12]
 8005cdc:	6832      	ldr	r2, [r6, #0]
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	42ab      	cmp	r3, r5
 8005ce2:	dc26      	bgt.n	8005d32 <_printf_common+0x96>
 8005ce4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ce8:	1e13      	subs	r3, r2, #0
 8005cea:	6822      	ldr	r2, [r4, #0]
 8005cec:	bf18      	it	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	0692      	lsls	r2, r2, #26
 8005cf2:	d42b      	bmi.n	8005d4c <_printf_common+0xb0>
 8005cf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cf8:	4649      	mov	r1, r9
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	47c0      	blx	r8
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d01e      	beq.n	8005d40 <_printf_common+0xa4>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	6922      	ldr	r2, [r4, #16]
 8005d06:	f003 0306 	and.w	r3, r3, #6
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	bf02      	ittt	eq
 8005d0e:	68e5      	ldreq	r5, [r4, #12]
 8005d10:	6833      	ldreq	r3, [r6, #0]
 8005d12:	1aed      	subeq	r5, r5, r3
 8005d14:	68a3      	ldr	r3, [r4, #8]
 8005d16:	bf0c      	ite	eq
 8005d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d1c:	2500      	movne	r5, #0
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	bfc4      	itt	gt
 8005d22:	1a9b      	subgt	r3, r3, r2
 8005d24:	18ed      	addgt	r5, r5, r3
 8005d26:	2600      	movs	r6, #0
 8005d28:	341a      	adds	r4, #26
 8005d2a:	42b5      	cmp	r5, r6
 8005d2c:	d11a      	bne.n	8005d64 <_printf_common+0xc8>
 8005d2e:	2000      	movs	r0, #0
 8005d30:	e008      	b.n	8005d44 <_printf_common+0xa8>
 8005d32:	2301      	movs	r3, #1
 8005d34:	4652      	mov	r2, sl
 8005d36:	4649      	mov	r1, r9
 8005d38:	4638      	mov	r0, r7
 8005d3a:	47c0      	blx	r8
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d103      	bne.n	8005d48 <_printf_common+0xac>
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d48:	3501      	adds	r5, #1
 8005d4a:	e7c6      	b.n	8005cda <_printf_common+0x3e>
 8005d4c:	18e1      	adds	r1, r4, r3
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	2030      	movs	r0, #48	; 0x30
 8005d52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d56:	4422      	add	r2, r4
 8005d58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d60:	3302      	adds	r3, #2
 8005d62:	e7c7      	b.n	8005cf4 <_printf_common+0x58>
 8005d64:	2301      	movs	r3, #1
 8005d66:	4622      	mov	r2, r4
 8005d68:	4649      	mov	r1, r9
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	47c0      	blx	r8
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d0e6      	beq.n	8005d40 <_printf_common+0xa4>
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7d9      	b.n	8005d2a <_printf_common+0x8e>
	...

08005d78 <_printf_i>:
 8005d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	7e0f      	ldrb	r7, [r1, #24]
 8005d7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d80:	2f78      	cmp	r7, #120	; 0x78
 8005d82:	4691      	mov	r9, r2
 8005d84:	4680      	mov	r8, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	469a      	mov	sl, r3
 8005d8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d8e:	d807      	bhi.n	8005da0 <_printf_i+0x28>
 8005d90:	2f62      	cmp	r7, #98	; 0x62
 8005d92:	d80a      	bhi.n	8005daa <_printf_i+0x32>
 8005d94:	2f00      	cmp	r7, #0
 8005d96:	f000 80d4 	beq.w	8005f42 <_printf_i+0x1ca>
 8005d9a:	2f58      	cmp	r7, #88	; 0x58
 8005d9c:	f000 80c0 	beq.w	8005f20 <_printf_i+0x1a8>
 8005da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005da4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005da8:	e03a      	b.n	8005e20 <_printf_i+0xa8>
 8005daa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dae:	2b15      	cmp	r3, #21
 8005db0:	d8f6      	bhi.n	8005da0 <_printf_i+0x28>
 8005db2:	a101      	add	r1, pc, #4	; (adr r1, 8005db8 <_printf_i+0x40>)
 8005db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005db8:	08005e11 	.word	0x08005e11
 8005dbc:	08005e25 	.word	0x08005e25
 8005dc0:	08005da1 	.word	0x08005da1
 8005dc4:	08005da1 	.word	0x08005da1
 8005dc8:	08005da1 	.word	0x08005da1
 8005dcc:	08005da1 	.word	0x08005da1
 8005dd0:	08005e25 	.word	0x08005e25
 8005dd4:	08005da1 	.word	0x08005da1
 8005dd8:	08005da1 	.word	0x08005da1
 8005ddc:	08005da1 	.word	0x08005da1
 8005de0:	08005da1 	.word	0x08005da1
 8005de4:	08005f29 	.word	0x08005f29
 8005de8:	08005e51 	.word	0x08005e51
 8005dec:	08005ee3 	.word	0x08005ee3
 8005df0:	08005da1 	.word	0x08005da1
 8005df4:	08005da1 	.word	0x08005da1
 8005df8:	08005f4b 	.word	0x08005f4b
 8005dfc:	08005da1 	.word	0x08005da1
 8005e00:	08005e51 	.word	0x08005e51
 8005e04:	08005da1 	.word	0x08005da1
 8005e08:	08005da1 	.word	0x08005da1
 8005e0c:	08005eeb 	.word	0x08005eeb
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	1d1a      	adds	r2, r3, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	602a      	str	r2, [r5, #0]
 8005e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e20:	2301      	movs	r3, #1
 8005e22:	e09f      	b.n	8005f64 <_printf_i+0x1ec>
 8005e24:	6820      	ldr	r0, [r4, #0]
 8005e26:	682b      	ldr	r3, [r5, #0]
 8005e28:	0607      	lsls	r7, r0, #24
 8005e2a:	f103 0104 	add.w	r1, r3, #4
 8005e2e:	6029      	str	r1, [r5, #0]
 8005e30:	d501      	bpl.n	8005e36 <_printf_i+0xbe>
 8005e32:	681e      	ldr	r6, [r3, #0]
 8005e34:	e003      	b.n	8005e3e <_printf_i+0xc6>
 8005e36:	0646      	lsls	r6, r0, #25
 8005e38:	d5fb      	bpl.n	8005e32 <_printf_i+0xba>
 8005e3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e3e:	2e00      	cmp	r6, #0
 8005e40:	da03      	bge.n	8005e4a <_printf_i+0xd2>
 8005e42:	232d      	movs	r3, #45	; 0x2d
 8005e44:	4276      	negs	r6, r6
 8005e46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e4a:	485a      	ldr	r0, [pc, #360]	; (8005fb4 <_printf_i+0x23c>)
 8005e4c:	230a      	movs	r3, #10
 8005e4e:	e012      	b.n	8005e76 <_printf_i+0xfe>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	6820      	ldr	r0, [r4, #0]
 8005e54:	1d19      	adds	r1, r3, #4
 8005e56:	6029      	str	r1, [r5, #0]
 8005e58:	0605      	lsls	r5, r0, #24
 8005e5a:	d501      	bpl.n	8005e60 <_printf_i+0xe8>
 8005e5c:	681e      	ldr	r6, [r3, #0]
 8005e5e:	e002      	b.n	8005e66 <_printf_i+0xee>
 8005e60:	0641      	lsls	r1, r0, #25
 8005e62:	d5fb      	bpl.n	8005e5c <_printf_i+0xe4>
 8005e64:	881e      	ldrh	r6, [r3, #0]
 8005e66:	4853      	ldr	r0, [pc, #332]	; (8005fb4 <_printf_i+0x23c>)
 8005e68:	2f6f      	cmp	r7, #111	; 0x6f
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2308      	moveq	r3, #8
 8005e6e:	230a      	movne	r3, #10
 8005e70:	2100      	movs	r1, #0
 8005e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e76:	6865      	ldr	r5, [r4, #4]
 8005e78:	60a5      	str	r5, [r4, #8]
 8005e7a:	2d00      	cmp	r5, #0
 8005e7c:	bfa2      	ittt	ge
 8005e7e:	6821      	ldrge	r1, [r4, #0]
 8005e80:	f021 0104 	bicge.w	r1, r1, #4
 8005e84:	6021      	strge	r1, [r4, #0]
 8005e86:	b90e      	cbnz	r6, 8005e8c <_printf_i+0x114>
 8005e88:	2d00      	cmp	r5, #0
 8005e8a:	d04b      	beq.n	8005f24 <_printf_i+0x1ac>
 8005e8c:	4615      	mov	r5, r2
 8005e8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e92:	fb03 6711 	mls	r7, r3, r1, r6
 8005e96:	5dc7      	ldrb	r7, [r0, r7]
 8005e98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e9c:	4637      	mov	r7, r6
 8005e9e:	42bb      	cmp	r3, r7
 8005ea0:	460e      	mov	r6, r1
 8005ea2:	d9f4      	bls.n	8005e8e <_printf_i+0x116>
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d10b      	bne.n	8005ec0 <_printf_i+0x148>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	07de      	lsls	r6, r3, #31
 8005eac:	d508      	bpl.n	8005ec0 <_printf_i+0x148>
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	6861      	ldr	r1, [r4, #4]
 8005eb2:	4299      	cmp	r1, r3
 8005eb4:	bfde      	ittt	le
 8005eb6:	2330      	movle	r3, #48	; 0x30
 8005eb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ec0:	1b52      	subs	r2, r2, r5
 8005ec2:	6122      	str	r2, [r4, #16]
 8005ec4:	f8cd a000 	str.w	sl, [sp]
 8005ec8:	464b      	mov	r3, r9
 8005eca:	aa03      	add	r2, sp, #12
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4640      	mov	r0, r8
 8005ed0:	f7ff fee4 	bl	8005c9c <_printf_common>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d14a      	bne.n	8005f6e <_printf_i+0x1f6>
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8005edc:	b004      	add	sp, #16
 8005ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	f043 0320 	orr.w	r3, r3, #32
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	4833      	ldr	r0, [pc, #204]	; (8005fb8 <_printf_i+0x240>)
 8005eec:	2778      	movs	r7, #120	; 0x78
 8005eee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	6829      	ldr	r1, [r5, #0]
 8005ef6:	061f      	lsls	r7, r3, #24
 8005ef8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005efc:	d402      	bmi.n	8005f04 <_printf_i+0x18c>
 8005efe:	065f      	lsls	r7, r3, #25
 8005f00:	bf48      	it	mi
 8005f02:	b2b6      	uxthmi	r6, r6
 8005f04:	07df      	lsls	r7, r3, #31
 8005f06:	bf48      	it	mi
 8005f08:	f043 0320 	orrmi.w	r3, r3, #32
 8005f0c:	6029      	str	r1, [r5, #0]
 8005f0e:	bf48      	it	mi
 8005f10:	6023      	strmi	r3, [r4, #0]
 8005f12:	b91e      	cbnz	r6, 8005f1c <_printf_i+0x1a4>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	f023 0320 	bic.w	r3, r3, #32
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	e7a7      	b.n	8005e70 <_printf_i+0xf8>
 8005f20:	4824      	ldr	r0, [pc, #144]	; (8005fb4 <_printf_i+0x23c>)
 8005f22:	e7e4      	b.n	8005eee <_printf_i+0x176>
 8005f24:	4615      	mov	r5, r2
 8005f26:	e7bd      	b.n	8005ea4 <_printf_i+0x12c>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	6826      	ldr	r6, [r4, #0]
 8005f2c:	6961      	ldr	r1, [r4, #20]
 8005f2e:	1d18      	adds	r0, r3, #4
 8005f30:	6028      	str	r0, [r5, #0]
 8005f32:	0635      	lsls	r5, r6, #24
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	d501      	bpl.n	8005f3c <_printf_i+0x1c4>
 8005f38:	6019      	str	r1, [r3, #0]
 8005f3a:	e002      	b.n	8005f42 <_printf_i+0x1ca>
 8005f3c:	0670      	lsls	r0, r6, #25
 8005f3e:	d5fb      	bpl.n	8005f38 <_printf_i+0x1c0>
 8005f40:	8019      	strh	r1, [r3, #0]
 8005f42:	2300      	movs	r3, #0
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	4615      	mov	r5, r2
 8005f48:	e7bc      	b.n	8005ec4 <_printf_i+0x14c>
 8005f4a:	682b      	ldr	r3, [r5, #0]
 8005f4c:	1d1a      	adds	r2, r3, #4
 8005f4e:	602a      	str	r2, [r5, #0]
 8005f50:	681d      	ldr	r5, [r3, #0]
 8005f52:	6862      	ldr	r2, [r4, #4]
 8005f54:	2100      	movs	r1, #0
 8005f56:	4628      	mov	r0, r5
 8005f58:	f7fa f972 	bl	8000240 <memchr>
 8005f5c:	b108      	cbz	r0, 8005f62 <_printf_i+0x1ea>
 8005f5e:	1b40      	subs	r0, r0, r5
 8005f60:	6060      	str	r0, [r4, #4]
 8005f62:	6863      	ldr	r3, [r4, #4]
 8005f64:	6123      	str	r3, [r4, #16]
 8005f66:	2300      	movs	r3, #0
 8005f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f6c:	e7aa      	b.n	8005ec4 <_printf_i+0x14c>
 8005f6e:	6923      	ldr	r3, [r4, #16]
 8005f70:	462a      	mov	r2, r5
 8005f72:	4649      	mov	r1, r9
 8005f74:	4640      	mov	r0, r8
 8005f76:	47d0      	blx	sl
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d0ad      	beq.n	8005ed8 <_printf_i+0x160>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	079b      	lsls	r3, r3, #30
 8005f80:	d413      	bmi.n	8005faa <_printf_i+0x232>
 8005f82:	68e0      	ldr	r0, [r4, #12]
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	4298      	cmp	r0, r3
 8005f88:	bfb8      	it	lt
 8005f8a:	4618      	movlt	r0, r3
 8005f8c:	e7a6      	b.n	8005edc <_printf_i+0x164>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	4632      	mov	r2, r6
 8005f92:	4649      	mov	r1, r9
 8005f94:	4640      	mov	r0, r8
 8005f96:	47d0      	blx	sl
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d09d      	beq.n	8005ed8 <_printf_i+0x160>
 8005f9c:	3501      	adds	r5, #1
 8005f9e:	68e3      	ldr	r3, [r4, #12]
 8005fa0:	9903      	ldr	r1, [sp, #12]
 8005fa2:	1a5b      	subs	r3, r3, r1
 8005fa4:	42ab      	cmp	r3, r5
 8005fa6:	dcf2      	bgt.n	8005f8e <_printf_i+0x216>
 8005fa8:	e7eb      	b.n	8005f82 <_printf_i+0x20a>
 8005faa:	2500      	movs	r5, #0
 8005fac:	f104 0619 	add.w	r6, r4, #25
 8005fb0:	e7f5      	b.n	8005f9e <_printf_i+0x226>
 8005fb2:	bf00      	nop
 8005fb4:	080062f5 	.word	0x080062f5
 8005fb8:	08006306 	.word	0x08006306

08005fbc <__sflush_r>:
 8005fbc:	898a      	ldrh	r2, [r1, #12]
 8005fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	0710      	lsls	r0, r2, #28
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	d458      	bmi.n	800607c <__sflush_r+0xc0>
 8005fca:	684b      	ldr	r3, [r1, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	dc05      	bgt.n	8005fdc <__sflush_r+0x20>
 8005fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	dc02      	bgt.n	8005fdc <__sflush_r+0x20>
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fde:	2e00      	cmp	r6, #0
 8005fe0:	d0f9      	beq.n	8005fd6 <__sflush_r+0x1a>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fe8:	682f      	ldr	r7, [r5, #0]
 8005fea:	6a21      	ldr	r1, [r4, #32]
 8005fec:	602b      	str	r3, [r5, #0]
 8005fee:	d032      	beq.n	8006056 <__sflush_r+0x9a>
 8005ff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	075a      	lsls	r2, r3, #29
 8005ff6:	d505      	bpl.n	8006004 <__sflush_r+0x48>
 8005ff8:	6863      	ldr	r3, [r4, #4]
 8005ffa:	1ac0      	subs	r0, r0, r3
 8005ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ffe:	b10b      	cbz	r3, 8006004 <__sflush_r+0x48>
 8006000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006002:	1ac0      	subs	r0, r0, r3
 8006004:	2300      	movs	r3, #0
 8006006:	4602      	mov	r2, r0
 8006008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800600a:	6a21      	ldr	r1, [r4, #32]
 800600c:	4628      	mov	r0, r5
 800600e:	47b0      	blx	r6
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	d106      	bne.n	8006024 <__sflush_r+0x68>
 8006016:	6829      	ldr	r1, [r5, #0]
 8006018:	291d      	cmp	r1, #29
 800601a:	d82b      	bhi.n	8006074 <__sflush_r+0xb8>
 800601c:	4a29      	ldr	r2, [pc, #164]	; (80060c4 <__sflush_r+0x108>)
 800601e:	410a      	asrs	r2, r1
 8006020:	07d6      	lsls	r6, r2, #31
 8006022:	d427      	bmi.n	8006074 <__sflush_r+0xb8>
 8006024:	2200      	movs	r2, #0
 8006026:	6062      	str	r2, [r4, #4]
 8006028:	04d9      	lsls	r1, r3, #19
 800602a:	6922      	ldr	r2, [r4, #16]
 800602c:	6022      	str	r2, [r4, #0]
 800602e:	d504      	bpl.n	800603a <__sflush_r+0x7e>
 8006030:	1c42      	adds	r2, r0, #1
 8006032:	d101      	bne.n	8006038 <__sflush_r+0x7c>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b903      	cbnz	r3, 800603a <__sflush_r+0x7e>
 8006038:	6560      	str	r0, [r4, #84]	; 0x54
 800603a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800603c:	602f      	str	r7, [r5, #0]
 800603e:	2900      	cmp	r1, #0
 8006040:	d0c9      	beq.n	8005fd6 <__sflush_r+0x1a>
 8006042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006046:	4299      	cmp	r1, r3
 8006048:	d002      	beq.n	8006050 <__sflush_r+0x94>
 800604a:	4628      	mov	r0, r5
 800604c:	f7ff fbea 	bl	8005824 <_free_r>
 8006050:	2000      	movs	r0, #0
 8006052:	6360      	str	r0, [r4, #52]	; 0x34
 8006054:	e7c0      	b.n	8005fd8 <__sflush_r+0x1c>
 8006056:	2301      	movs	r3, #1
 8006058:	4628      	mov	r0, r5
 800605a:	47b0      	blx	r6
 800605c:	1c41      	adds	r1, r0, #1
 800605e:	d1c8      	bne.n	8005ff2 <__sflush_r+0x36>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0c5      	beq.n	8005ff2 <__sflush_r+0x36>
 8006066:	2b1d      	cmp	r3, #29
 8006068:	d001      	beq.n	800606e <__sflush_r+0xb2>
 800606a:	2b16      	cmp	r3, #22
 800606c:	d101      	bne.n	8006072 <__sflush_r+0xb6>
 800606e:	602f      	str	r7, [r5, #0]
 8006070:	e7b1      	b.n	8005fd6 <__sflush_r+0x1a>
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	e7ad      	b.n	8005fd8 <__sflush_r+0x1c>
 800607c:	690f      	ldr	r7, [r1, #16]
 800607e:	2f00      	cmp	r7, #0
 8006080:	d0a9      	beq.n	8005fd6 <__sflush_r+0x1a>
 8006082:	0793      	lsls	r3, r2, #30
 8006084:	680e      	ldr	r6, [r1, #0]
 8006086:	bf08      	it	eq
 8006088:	694b      	ldreq	r3, [r1, #20]
 800608a:	600f      	str	r7, [r1, #0]
 800608c:	bf18      	it	ne
 800608e:	2300      	movne	r3, #0
 8006090:	eba6 0807 	sub.w	r8, r6, r7
 8006094:	608b      	str	r3, [r1, #8]
 8006096:	f1b8 0f00 	cmp.w	r8, #0
 800609a:	dd9c      	ble.n	8005fd6 <__sflush_r+0x1a>
 800609c:	6a21      	ldr	r1, [r4, #32]
 800609e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060a0:	4643      	mov	r3, r8
 80060a2:	463a      	mov	r2, r7
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b0      	blx	r6
 80060a8:	2800      	cmp	r0, #0
 80060aa:	dc06      	bgt.n	80060ba <__sflush_r+0xfe>
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060b2:	81a3      	strh	r3, [r4, #12]
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	e78e      	b.n	8005fd8 <__sflush_r+0x1c>
 80060ba:	4407      	add	r7, r0
 80060bc:	eba8 0800 	sub.w	r8, r8, r0
 80060c0:	e7e9      	b.n	8006096 <__sflush_r+0xda>
 80060c2:	bf00      	nop
 80060c4:	dfbffffe 	.word	0xdfbffffe

080060c8 <_fflush_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	690b      	ldr	r3, [r1, #16]
 80060cc:	4605      	mov	r5, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	b913      	cbnz	r3, 80060d8 <_fflush_r+0x10>
 80060d2:	2500      	movs	r5, #0
 80060d4:	4628      	mov	r0, r5
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	b118      	cbz	r0, 80060e2 <_fflush_r+0x1a>
 80060da:	6a03      	ldr	r3, [r0, #32]
 80060dc:	b90b      	cbnz	r3, 80060e2 <_fflush_r+0x1a>
 80060de:	f7ff f9a9 	bl	8005434 <__sinit>
 80060e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0f3      	beq.n	80060d2 <_fflush_r+0xa>
 80060ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060ec:	07d0      	lsls	r0, r2, #31
 80060ee:	d404      	bmi.n	80060fa <_fflush_r+0x32>
 80060f0:	0599      	lsls	r1, r3, #22
 80060f2:	d402      	bmi.n	80060fa <_fflush_r+0x32>
 80060f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060f6:	f7ff fb92 	bl	800581e <__retarget_lock_acquire_recursive>
 80060fa:	4628      	mov	r0, r5
 80060fc:	4621      	mov	r1, r4
 80060fe:	f7ff ff5d 	bl	8005fbc <__sflush_r>
 8006102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006104:	07da      	lsls	r2, r3, #31
 8006106:	4605      	mov	r5, r0
 8006108:	d4e4      	bmi.n	80060d4 <_fflush_r+0xc>
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	059b      	lsls	r3, r3, #22
 800610e:	d4e1      	bmi.n	80060d4 <_fflush_r+0xc>
 8006110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006112:	f7ff fb85 	bl	8005820 <__retarget_lock_release_recursive>
 8006116:	e7dd      	b.n	80060d4 <_fflush_r+0xc>

08006118 <__swhatbuf_r>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	460c      	mov	r4, r1
 800611c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006120:	2900      	cmp	r1, #0
 8006122:	b096      	sub	sp, #88	; 0x58
 8006124:	4615      	mov	r5, r2
 8006126:	461e      	mov	r6, r3
 8006128:	da0d      	bge.n	8006146 <__swhatbuf_r+0x2e>
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006130:	f04f 0100 	mov.w	r1, #0
 8006134:	bf0c      	ite	eq
 8006136:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800613a:	2340      	movne	r3, #64	; 0x40
 800613c:	2000      	movs	r0, #0
 800613e:	6031      	str	r1, [r6, #0]
 8006140:	602b      	str	r3, [r5, #0]
 8006142:	b016      	add	sp, #88	; 0x58
 8006144:	bd70      	pop	{r4, r5, r6, pc}
 8006146:	466a      	mov	r2, sp
 8006148:	f000 f848 	bl	80061dc <_fstat_r>
 800614c:	2800      	cmp	r0, #0
 800614e:	dbec      	blt.n	800612a <__swhatbuf_r+0x12>
 8006150:	9901      	ldr	r1, [sp, #4]
 8006152:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006156:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800615a:	4259      	negs	r1, r3
 800615c:	4159      	adcs	r1, r3
 800615e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006162:	e7eb      	b.n	800613c <__swhatbuf_r+0x24>

08006164 <__smakebuf_r>:
 8006164:	898b      	ldrh	r3, [r1, #12]
 8006166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006168:	079d      	lsls	r5, r3, #30
 800616a:	4606      	mov	r6, r0
 800616c:	460c      	mov	r4, r1
 800616e:	d507      	bpl.n	8006180 <__smakebuf_r+0x1c>
 8006170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	2301      	movs	r3, #1
 800617a:	6163      	str	r3, [r4, #20]
 800617c:	b002      	add	sp, #8
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	ab01      	add	r3, sp, #4
 8006182:	466a      	mov	r2, sp
 8006184:	f7ff ffc8 	bl	8006118 <__swhatbuf_r>
 8006188:	9900      	ldr	r1, [sp, #0]
 800618a:	4605      	mov	r5, r0
 800618c:	4630      	mov	r0, r6
 800618e:	f7ff fbb5 	bl	80058fc <_malloc_r>
 8006192:	b948      	cbnz	r0, 80061a8 <__smakebuf_r+0x44>
 8006194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006198:	059a      	lsls	r2, r3, #22
 800619a:	d4ef      	bmi.n	800617c <__smakebuf_r+0x18>
 800619c:	f023 0303 	bic.w	r3, r3, #3
 80061a0:	f043 0302 	orr.w	r3, r3, #2
 80061a4:	81a3      	strh	r3, [r4, #12]
 80061a6:	e7e3      	b.n	8006170 <__smakebuf_r+0xc>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	6020      	str	r0, [r4, #0]
 80061ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	9b00      	ldr	r3, [sp, #0]
 80061b4:	6163      	str	r3, [r4, #20]
 80061b6:	9b01      	ldr	r3, [sp, #4]
 80061b8:	6120      	str	r0, [r4, #16]
 80061ba:	b15b      	cbz	r3, 80061d4 <__smakebuf_r+0x70>
 80061bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061c0:	4630      	mov	r0, r6
 80061c2:	f000 f81d 	bl	8006200 <_isatty_r>
 80061c6:	b128      	cbz	r0, 80061d4 <__smakebuf_r+0x70>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	431d      	orrs	r5, r3
 80061d8:	81a5      	strh	r5, [r4, #12]
 80061da:	e7cf      	b.n	800617c <__smakebuf_r+0x18>

080061dc <_fstat_r>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	4d07      	ldr	r5, [pc, #28]	; (80061fc <_fstat_r+0x20>)
 80061e0:	2300      	movs	r3, #0
 80061e2:	4604      	mov	r4, r0
 80061e4:	4608      	mov	r0, r1
 80061e6:	4611      	mov	r1, r2
 80061e8:	602b      	str	r3, [r5, #0]
 80061ea:	f7fa ffe2 	bl	80011b2 <_fstat>
 80061ee:	1c43      	adds	r3, r0, #1
 80061f0:	d102      	bne.n	80061f8 <_fstat_r+0x1c>
 80061f2:	682b      	ldr	r3, [r5, #0]
 80061f4:	b103      	cbz	r3, 80061f8 <_fstat_r+0x1c>
 80061f6:	6023      	str	r3, [r4, #0]
 80061f8:	bd38      	pop	{r3, r4, r5, pc}
 80061fa:	bf00      	nop
 80061fc:	20000a50 	.word	0x20000a50

08006200 <_isatty_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d06      	ldr	r5, [pc, #24]	; (800621c <_isatty_r+0x1c>)
 8006204:	2300      	movs	r3, #0
 8006206:	4604      	mov	r4, r0
 8006208:	4608      	mov	r0, r1
 800620a:	602b      	str	r3, [r5, #0]
 800620c:	f7fa ffe1 	bl	80011d2 <_isatty>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d102      	bne.n	800621a <_isatty_r+0x1a>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	b103      	cbz	r3, 800621a <_isatty_r+0x1a>
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	bd38      	pop	{r3, r4, r5, pc}
 800621c:	20000a50 	.word	0x20000a50

08006220 <_sbrk_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4d06      	ldr	r5, [pc, #24]	; (800623c <_sbrk_r+0x1c>)
 8006224:	2300      	movs	r3, #0
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fa ffea 	bl	8001204 <_sbrk>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_sbrk_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_sbrk_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	20000a50 	.word	0x20000a50

08006240 <_init>:
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006242:	bf00      	nop
 8006244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006246:	bc08      	pop	{r3}
 8006248:	469e      	mov	lr, r3
 800624a:	4770      	bx	lr

0800624c <_fini>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	bf00      	nop
 8006250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006252:	bc08      	pop	{r3}
 8006254:	469e      	mov	lr, r3
 8006256:	4770      	bx	lr
