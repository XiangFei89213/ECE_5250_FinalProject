
EB_final_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006434  08006434  000201ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800643c  0800643c  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800643c  0800643c  0001643c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  080064b0  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  08006550  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008fc  200001ac  080065f0  000201ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000aa8  080065f0  00020aa8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201da  2**0
                  CONTENTS, READONLY
 15 .debug_info   00018c35  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000031a6  00000000  00000000  00038e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001508  00000000  00000000  0003bff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001064  00000000  00000000  0003d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b446  00000000  00000000  0003e564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00019583  00000000  00000000  000699aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010ba38  00000000  00000000  00082f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006028  00000000  00000000  0018e968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  00194990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001ac 	.word	0x200001ac
 8000214:	00000000 	.word	0x00000000
 8000218:	080063d8 	.word	0x080063d8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001b0 	.word	0x200001b0
 8000234:	080063d8 	.word	0x080063d8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800053c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000540:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	2b00      	cmp	r3, #0
 800054a:	d013      	beq.n	8000574 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800054c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000550:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000554:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000558:	2b00      	cmp	r3, #0
 800055a:	d00b      	beq.n	8000574 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800055c:	e000      	b.n	8000560 <ITM_SendChar+0x2c>
    {
      __NOP();
 800055e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000560:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f9      	beq.n	800055e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800056a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	b2d2      	uxtb	r2, r2
 8000572:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <_write>:

// This character buffer array will
// store the result after conversion complete
//char dma_result_buffer[100];

int _write(int file, char *ptr, int len){
 8000582:	b580      	push	{r7, lr}
 8000584:	b086      	sub	sp, #24
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
	int i=0;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	e009      	b.n	80005ac <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	60ba      	str	r2, [r7, #8]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ffc7 	bl	8000534 <ITM_SendChar>
	for(i=0;i<len;i++){
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	3301      	adds	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dbf1      	blt.n	8000598 <_write+0x16>
	}
	return len;
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <HAL_ADC_ConvCpltCallback>:

int flag_forward, flag_backwoard, flag_left, flag_right;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

	  if (adc_dma_result[0] >= 3800){
 80005c8:	4b66      	ldr	r3, [pc, #408]	; (8000764 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	f640 62d7 	movw	r2, #3799	; 0xed7
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d91e      	bls.n	8000614 <HAL_ADC_ConvCpltCallback+0x54>
		  //forward
		  printf("forward\n");
 80005d6:	4864      	ldr	r0, [pc, #400]	; (8000768 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80005d8:	f005 fb68 	bl	8005cac <puts>
		  flag_forward = 1;
 80005dc:	4b63      	ldr	r3, [pc, #396]	; (800076c <HAL_ADC_ConvCpltCallback+0x1ac>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1); // Motor Left Forward
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	4861      	ldr	r0, [pc, #388]	; (8000770 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80005ea:	f002 fd45 	bl	8003078 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0); // Motor Left Backward
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f4:	485f      	ldr	r0, [pc, #380]	; (8000774 <HAL_ADC_ConvCpltCallback+0x1b4>)
 80005f6:	f002 fd3f 	bl	8003078 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1); // Motor Right Forward
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000600:	485d      	ldr	r0, [pc, #372]	; (8000778 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8000602:	f002 fd39 	bl	8003078 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); // Motor Right Backward
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060c:	485a      	ldr	r0, [pc, #360]	; (8000778 <HAL_ADC_ConvCpltCallback+0x1b8>)
 800060e:	f002 fd33 	bl	8003078 <HAL_GPIO_WritePin>
 8000612:	e002      	b.n	800061a <HAL_ADC_ConvCpltCallback+0x5a>
	  }else{
		  flag_forward = 0;
 8000614:	4b55      	ldr	r3, [pc, #340]	; (800076c <HAL_ADC_ConvCpltCallback+0x1ac>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
	  }
	  if (adc_dma_result[1] >= 3800){
 800061a:	4b52      	ldr	r3, [pc, #328]	; (8000764 <HAL_ADC_ConvCpltCallback+0x1a4>)
 800061c:	885b      	ldrh	r3, [r3, #2]
 800061e:	b29b      	uxth	r3, r3
 8000620:	f640 62d7 	movw	r2, #3799	; 0xed7
 8000624:	4293      	cmp	r3, r2
 8000626:	d91e      	bls.n	8000666 <HAL_ADC_ConvCpltCallback+0xa6>
		  //backward
		  printf("backward\n");
 8000628:	4854      	ldr	r0, [pc, #336]	; (800077c <HAL_ADC_ConvCpltCallback+0x1bc>)
 800062a:	f005 fb3f 	bl	8005cac <puts>
		  flag_backwoard =1;
 800062e:	4b54      	ldr	r3, [pc, #336]	; (8000780 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0); // Motor Left Forward
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063a:	484d      	ldr	r0, [pc, #308]	; (8000770 <HAL_ADC_ConvCpltCallback+0x1b0>)
 800063c:	f002 fd1c 	bl	8003078 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1); // Motor Left Backward
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000646:	484b      	ldr	r0, [pc, #300]	; (8000774 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8000648:	f002 fd16 	bl	8003078 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); // Motor Right Forward
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000652:	4849      	ldr	r0, [pc, #292]	; (8000778 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8000654:	f002 fd10 	bl	8003078 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1); // Motor Right Backward
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065e:	4846      	ldr	r0, [pc, #280]	; (8000778 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8000660:	f002 fd0a 	bl	8003078 <HAL_GPIO_WritePin>
 8000664:	e002      	b.n	800066c <HAL_ADC_ConvCpltCallback+0xac>
	  }else{
		  flag_backwoard = 0;
 8000666:	4b46      	ldr	r3, [pc, #280]	; (8000780 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
	  }
	  if (adc_dma_result[2] >= 3800){
 800066c:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <HAL_ADC_ConvCpltCallback+0x1a4>)
 800066e:	889b      	ldrh	r3, [r3, #4]
 8000670:	b29b      	uxth	r3, r3
 8000672:	f640 62d7 	movw	r2, #3799	; 0xed7
 8000676:	4293      	cmp	r3, r2
 8000678:	d91e      	bls.n	80006b8 <HAL_ADC_ConvCpltCallback+0xf8>
		  //left
		  printf("left\n");
 800067a:	4842      	ldr	r0, [pc, #264]	; (8000784 <HAL_ADC_ConvCpltCallback+0x1c4>)
 800067c:	f005 fb16 	bl	8005cac <puts>
		  flag_left = 1;
 8000680:	4b41      	ldr	r3, [pc, #260]	; (8000788 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8000682:	2201      	movs	r2, #1
 8000684:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0); // Motor Left Forward
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068c:	4838      	ldr	r0, [pc, #224]	; (8000770 <HAL_ADC_ConvCpltCallback+0x1b0>)
 800068e:	f002 fcf3 	bl	8003078 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1); // Motor Left Backward
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	4836      	ldr	r0, [pc, #216]	; (8000774 <HAL_ADC_ConvCpltCallback+0x1b4>)
 800069a:	f002 fced 	bl	8003078 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1); // Motor Right Forward
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	4834      	ldr	r0, [pc, #208]	; (8000778 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80006a6:	f002 fce7 	bl	8003078 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); // Motor Right Backward
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b0:	4831      	ldr	r0, [pc, #196]	; (8000778 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80006b2:	f002 fce1 	bl	8003078 <HAL_GPIO_WritePin>
 80006b6:	e002      	b.n	80006be <HAL_ADC_ConvCpltCallback+0xfe>
	  }else{
		  flag_left = 0;
 80006b8:	4b33      	ldr	r3, [pc, #204]	; (8000788 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
	  }
	  if (adc_dma_result[3] >= 3800){
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80006c0:	88db      	ldrh	r3, [r3, #6]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	f640 62d7 	movw	r2, #3799	; 0xed7
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d91e      	bls.n	800070a <HAL_ADC_ConvCpltCallback+0x14a>
		  //right
		  printf("right\n");
 80006cc:	482f      	ldr	r0, [pc, #188]	; (800078c <HAL_ADC_ConvCpltCallback+0x1cc>)
 80006ce:	f005 faed 	bl	8005cac <puts>
		  flag_right =1;
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1); // Motor Left Forward
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	4824      	ldr	r0, [pc, #144]	; (8000770 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80006e0:	f002 fcca 	bl	8003078 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0); // Motor Left Backward
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ea:	4822      	ldr	r0, [pc, #136]	; (8000774 <HAL_ADC_ConvCpltCallback+0x1b4>)
 80006ec:	f002 fcc4 	bl	8003078 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); // Motor Right Forward
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f6:	4820      	ldr	r0, [pc, #128]	; (8000778 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80006f8:	f002 fcbe 	bl	8003078 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1); // Motor Right Backward
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000702:	481d      	ldr	r0, [pc, #116]	; (8000778 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8000704:	f002 fcb8 	bl	8003078 <HAL_GPIO_WritePin>
 8000708:	e002      	b.n	8000710 <HAL_ADC_ConvCpltCallback+0x150>
	  }else{
		flag_right =0;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <HAL_ADC_ConvCpltCallback+0x1d0>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
	  }
	  if (flag_forward + flag_backwoard + flag_left + flag_right != 1) {
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <HAL_ADC_ConvCpltCallback+0x1ac>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	441a      	add	r2, r3
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <HAL_ADC_ConvCpltCallback+0x1c8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	441a      	add	r2, r3
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4413      	add	r3, r2
 8000726:	2b01      	cmp	r3, #1
 8000728:	d017      	beq.n	800075a <HAL_ADC_ConvCpltCallback+0x19a>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0); // Motor Left Forward
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000730:	480f      	ldr	r0, [pc, #60]	; (8000770 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000732:	f002 fca1 	bl	8003078 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0); // Motor Left Backward
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <HAL_ADC_ConvCpltCallback+0x1b4>)
 800073e:	f002 fc9b 	bl	8003078 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); // Motor Right Forward
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <HAL_ADC_ConvCpltCallback+0x1b8>)
 800074a:	f002 fc95 	bl	8003078 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0); // Motor Right Backward
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000754:	4808      	ldr	r0, [pc, #32]	; (8000778 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8000756:	f002 fc8f 	bl	8003078 <HAL_GPIO_WritePin>
	  }
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000934 	.word	0x20000934
 8000768:	080063f0 	.word	0x080063f0
 800076c:	2000093c 	.word	0x2000093c
 8000770:	40021400 	.word	0x40021400
 8000774:	40021000 	.word	0x40021000
 8000778:	40020400 	.word	0x40020400
 800077c:	080063f8 	.word	0x080063f8
 8000780:	20000940 	.word	0x20000940
 8000784:	08006404 	.word	0x08006404
 8000788:	20000944 	.word	0x20000944
 800078c:	0800640c 	.word	0x0800640c
 8000790:	20000948 	.word	0x20000948

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	flag_forward = 0;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <main+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
	flag_backwoard = 0;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <main+0x54>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
	flag_left = 0;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <main+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
	flag_right = 0;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <main+0x5c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fe61 	bl	8001476 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f824 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 fa2e 	bl	8000c18 <MX_GPIO_Init>
  MX_DMA_Init();
 80007bc:	f000 fa0e 	bl	8000bdc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80007c0:	f000 f9ae 	bl	8000b20 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007c4:	f000 f9dc 	bl	8000b80 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80007c8:	f000 f88c 	bl	80008e4 <MX_ADC1_Init>
  MX_ETH_Init();
 80007cc:	f000 f906 	bl	80009dc <MX_ETH_Init>
  MX_TIM1_Init();
 80007d0:	f000 f952 	bl	8000a78 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the DMA conversion
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_dma_result , adc_channel_count);
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <main+0x60>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4907      	ldr	r1, [pc, #28]	; (80007f8 <main+0x64>)
 80007dc:	4807      	ldr	r0, [pc, #28]	; (80007fc <main+0x68>)
 80007de:	f000 ff0f 	bl	8001600 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <main+0x4e>
 80007e4:	2000093c 	.word	0x2000093c
 80007e8:	20000940 	.word	0x20000940
 80007ec:	20000944 	.word	0x20000944
 80007f0:	20000948 	.word	0x20000948
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000934 	.word	0x20000934
 80007fc:	20000200 	.word	0x20000200

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2234      	movs	r2, #52	; 0x34
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f005 fb2c 	bl	8005e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000824:	f002 fd8a 	bl	800333c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <SystemClock_Config+0xdc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a2b      	ldr	r2, [pc, #172]	; (80008dc <SystemClock_Config+0xdc>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b29      	ldr	r3, [pc, #164]	; (80008dc <SystemClock_Config+0xdc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000840:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <SystemClock_Config+0xe0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000848:	4a25      	ldr	r2, [pc, #148]	; (80008e0 <SystemClock_Config+0xe0>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <SystemClock_Config+0xe0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000860:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000864:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000880:	2302      	movs	r3, #2
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fdb7 	bl	80033fc <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000894:	f000 faa8 	bl	8000de8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000898:	f002 fd60 	bl	800335c <HAL_PWREx_EnableOverDrive>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008a2:	f000 faa1 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2302      	movs	r3, #2
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2103      	movs	r1, #3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 f848 	bl	8003958 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008ce:	f000 fa8b 	bl	8000de8 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3750      	adds	r7, #80	; 0x50
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008f6:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <MX_ADC1_Init+0xec>)
 80008f8:	4a36      	ldr	r2, [pc, #216]	; (80009d4 <MX_ADC1_Init+0xf0>)
 80008fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <MX_ADC1_Init+0xec>)
 80008fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000902:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000904:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <MX_ADC1_Init+0xec>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <MX_ADC1_Init+0xec>)
 800090c:	2201      	movs	r2, #1
 800090e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <MX_ADC1_Init+0xec>)
 8000912:	2201      	movs	r2, #1
 8000914:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000916:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <MX_ADC1_Init+0xec>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800091e:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <MX_ADC1_Init+0xec>)
 8000920:	2200      	movs	r2, #0
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <MX_ADC1_Init+0xec>)
 8000926:	4a2c      	ldr	r2, [pc, #176]	; (80009d8 <MX_ADC1_Init+0xf4>)
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800092a:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <MX_ADC1_Init+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000930:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <MX_ADC1_Init+0xec>)
 8000932:	2204      	movs	r2, #4
 8000934:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_ADC1_Init+0xec>)
 8000938:	2201      	movs	r2, #1
 800093a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800093e:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <MX_ADC1_Init+0xec>)
 8000940:	2201      	movs	r2, #1
 8000942:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000944:	4822      	ldr	r0, [pc, #136]	; (80009d0 <MX_ADC1_Init+0xec>)
 8000946:	f000 fe17 	bl	8001578 <HAL_ADC_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000950:	f000 fa4a 	bl	8000de8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000954:	2303      	movs	r3, #3
 8000956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000958:	2301      	movs	r3, #1
 800095a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	481a      	ldr	r0, [pc, #104]	; (80009d0 <MX_ADC1_Init+0xec>)
 8000966:	f000 ff59 	bl	800181c <HAL_ADC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000970:	f000 fa3a 	bl	8000de8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000974:	2304      	movs	r3, #4
 8000976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000978:	2302      	movs	r3, #2
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <MX_ADC1_Init+0xec>)
 8000982:	f000 ff4b 	bl	800181c <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800098c:	f000 fa2c 	bl	8000de8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000990:	2305      	movs	r3, #5
 8000992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000994:	2303      	movs	r3, #3
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_ADC1_Init+0xec>)
 800099e:	f000 ff3d 	bl	800181c <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009a8:	f000 fa1e 	bl	8000de8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009ac:	2306      	movs	r3, #6
 80009ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_ADC1_Init+0xec>)
 80009ba:	f000 ff2f 	bl	800181c <HAL_ADC_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009c4:	f000 fa10 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000200 	.word	0x20000200
 80009d4:	40012000 	.word	0x40012000
 80009d8:	0f000001 	.word	0x0f000001

080009dc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_ETH_Init+0x84>)
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <MX_ETH_Init+0x88>)
 80009e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009f4:	22e1      	movs	r2, #225	; 0xe1
 80009f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_ETH_Init+0x8c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a0c:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <MX_ETH_Init+0x8c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a16:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a1c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a20:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <MX_ETH_Init+0x94>)
 8000a22:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a2a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_ETH_Init+0x84>)
 8000a2e:	f001 fe51 	bl	80026d4 <HAL_ETH_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a38:	f000 f9d6 	bl	8000de8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a3c:	2238      	movs	r2, #56	; 0x38
 8000a3e:	2100      	movs	r1, #0
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a42:	f005 fa13 	bl	8005e6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a48:	2221      	movs	r2, #33	; 0x21
 8000a4a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a4e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a52:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200002a8 	.word	0x200002a8
 8000a64:	40028000 	.word	0x40028000
 8000a68:	2000094c 	.word	0x2000094c
 8000a6c:	2000010c 	.word	0x2000010c
 8000a70:	2000006c 	.word	0x2000006c
 8000a74:	200001c8 	.word	0x200001c8

08000a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <MX_TIM1_Init+0xa0>)
 8000a98:	4a20      	ldr	r2, [pc, #128]	; (8000b1c <MX_TIM1_Init+0xa4>)
 8000a9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 900;
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_TIM1_Init+0xa0>)
 8000a9e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000aa2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_TIM1_Init+0xa0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_TIM1_Init+0xa0>)
 8000aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ab0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_TIM1_Init+0xa0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_TIM1_Init+0xa0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_TIM1_Init+0xa0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac4:	4814      	ldr	r0, [pc, #80]	; (8000b18 <MX_TIM1_Init+0xa0>)
 8000ac6:	f003 fd95 	bl	80045f4 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000ad0:	f000 f98a 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_TIM1_Init+0xa0>)
 8000ae2:	f003 fddf 	bl	80046a4 <HAL_TIM_ConfigClockSource>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000aec:	f000 f97c 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_TIM1_Init+0xa0>)
 8000b02:	f003 ffd3 	bl	8004aac <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b0c:	f000 f96c 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000358 	.word	0x20000358
 8000b1c:	40010000 	.word	0x40010000

08000b20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MX_USART3_UART_Init+0x5c>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART3_UART_Init+0x58>)
 8000b64:	f004 f830 	bl	8004bc8 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 f93b 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200003a4 	.word	0x200003a4
 8000b7c:	40004800 	.word	0x40004800

08000b80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8e:	2206      	movs	r2, #6
 8000b90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b94:	2202      	movs	r2, #2
 8000b96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc4:	f002 fa71 	bl	80030aa <HAL_PCD_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bce:	f000 f90b 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000042c 	.word	0x2000042c

08000bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_DMA_Init+0x38>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <MX_DMA_Init+0x38>)
 8000be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_DMA_Init+0x38>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2038      	movs	r0, #56	; 0x38
 8000c00:	f001 f9b9 	bl	8001f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c04:	2038      	movs	r0, #56	; 0x38
 8000c06:	f001 f9d2 	bl	8001fae <HAL_NVIC_EnableIRQ>

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b68      	ldr	r3, [pc, #416]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a67      	ldr	r2, [pc, #412]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b65      	ldr	r3, [pc, #404]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	623b      	str	r3, [r7, #32]
 8000c44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	4b62      	ldr	r3, [pc, #392]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a61      	ldr	r2, [pc, #388]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b5f      	ldr	r3, [pc, #380]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b5c      	ldr	r3, [pc, #368]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a5b      	ldr	r2, [pc, #364]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b59      	ldr	r3, [pc, #356]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b56      	ldr	r3, [pc, #344]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a55      	ldr	r2, [pc, #340]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b53      	ldr	r3, [pc, #332]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c8e:	4b50      	ldr	r3, [pc, #320]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a4f      	ldr	r2, [pc, #316]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c94:	f043 0320 	orr.w	r3, r3, #32
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b4d      	ldr	r3, [pc, #308]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0320 	and.w	r3, r3, #32
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca6:	4b4a      	ldr	r3, [pc, #296]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a49      	ldr	r2, [pc, #292]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a43      	ldr	r2, [pc, #268]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b41      	ldr	r3, [pc, #260]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a3d      	ldr	r2, [pc, #244]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b3b      	ldr	r3, [pc, #236]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f644 4181 	movw	r1, #19585	; 0x4c81
 8000cf4:	4837      	ldr	r0, [pc, #220]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000cf6:	f002 f9bf 	bl	8003078 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d00:	4835      	ldr	r0, [pc, #212]	; (8000dd8 <MX_GPIO_Init+0x1c0>)
 8000d02:	f002 f9b9 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0c:	4833      	ldr	r0, [pc, #204]	; (8000ddc <MX_GPIO_Init+0x1c4>)
 8000d0e:	f002 f9b3 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2140      	movs	r1, #64	; 0x40
 8000d16:	4832      	ldr	r0, [pc, #200]	; (8000de0 <MX_GPIO_Init+0x1c8>)
 8000d18:	f002 f9ae 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	482c      	ldr	r0, [pc, #176]	; (8000de4 <MX_GPIO_Init+0x1cc>)
 8000d34:	f001 fff4 	bl	8002d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10 PB11 LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin
 8000d38:	f644 4381 	movw	r3, #19585	; 0x4c81
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4820      	ldr	r0, [pc, #128]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000d52:	f001 ffe5 	bl	8002d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481a      	ldr	r0, [pc, #104]	; (8000dd8 <MX_GPIO_Init+0x1c0>)
 8000d70:	f001 ffd6 	bl	8002d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <MX_GPIO_Init+0x1c4>)
 8000d8e:	f001 ffc7 	bl	8002d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d92:	2340      	movs	r3, #64	; 0x40
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_GPIO_Init+0x1c8>)
 8000daa:	f001 ffb9 	bl	8002d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <MX_GPIO_Init+0x1c8>)
 8000dc2:	f001 ffad 	bl	8002d20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3738      	adds	r7, #56	; 0x38
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40021400 	.word	0x40021400
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40021800 	.word	0x40021800
 8000de4:	40020800 	.word	0x40020800

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_MspInit+0x44>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_MspInit+0x44>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_MspInit+0x44>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_MspInit+0x44>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_MspInit+0x44>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x44>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a2d      	ldr	r2, [pc, #180]	; (8000f10 <HAL_ADC_MspInit+0xd4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d153      	bne.n	8000f06 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <HAL_ADC_MspInit+0xd8>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a2c      	ldr	r2, [pc, #176]	; (8000f14 <HAL_ADC_MspInit+0xd8>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_ADC_MspInit+0xd8>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <HAL_ADC_MspInit+0xd8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a26      	ldr	r2, [pc, #152]	; (8000f14 <HAL_ADC_MspInit+0xd8>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <HAL_ADC_MspInit+0xd8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e8e:	2378      	movs	r3, #120	; 0x78
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e92:	2303      	movs	r3, #3
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481d      	ldr	r0, [pc, #116]	; (8000f18 <HAL_ADC_MspInit+0xdc>)
 8000ea2:	f001 ff3d 	bl	8002d20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <HAL_ADC_MspInit+0xe4>)
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ecc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000ed0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ed4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000edc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000eec:	f001 f87a 	bl	8001fe4 <HAL_DMA_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000ef6:	f7ff ff77 	bl	8000de8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000efe:	639a      	str	r2, [r3, #56]	; 0x38
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40012000 	.word	0x40012000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	20000248 	.word	0x20000248
 8000f20:	40026410 	.word	0x40026410

08000f24 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a4e      	ldr	r2, [pc, #312]	; (800107c <HAL_ETH_MspInit+0x158>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	f040 8096 	bne.w	8001074 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f48:	4b4d      	ldr	r3, [pc, #308]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4a4c      	ldr	r2, [pc, #304]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f52:	6313      	str	r3, [r2, #48]	; 0x30
 8000f54:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5c:	623b      	str	r3, [r7, #32]
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	4b47      	ldr	r3, [pc, #284]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	4a46      	ldr	r2, [pc, #280]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6c:	4b44      	ldr	r3, [pc, #272]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	4b41      	ldr	r3, [pc, #260]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	4a40      	ldr	r2, [pc, #256]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f82:	6313      	str	r3, [r2, #48]	; 0x30
 8000f84:	4b3e      	ldr	r3, [pc, #248]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f90:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a3a      	ldr	r2, [pc, #232]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b38      	ldr	r3, [pc, #224]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b35      	ldr	r3, [pc, #212]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a34      	ldr	r2, [pc, #208]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a2e      	ldr	r2, [pc, #184]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	4a28      	ldr	r2, [pc, #160]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ff0:	2332      	movs	r3, #50	; 0x32
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001000:	230b      	movs	r3, #11
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	481e      	ldr	r0, [pc, #120]	; (8001084 <HAL_ETH_MspInit+0x160>)
 800100c:	f001 fe88 	bl	8002d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001010:	2386      	movs	r3, #134	; 0x86
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001020:	230b      	movs	r3, #11
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4817      	ldr	r0, [pc, #92]	; (8001088 <HAL_ETH_MspInit+0x164>)
 800102c:	f001 fe78 	bl	8002d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001042:	230b      	movs	r3, #11
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	4619      	mov	r1, r3
 800104c:	480f      	ldr	r0, [pc, #60]	; (800108c <HAL_ETH_MspInit+0x168>)
 800104e:	f001 fe67 	bl	8002d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001052:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001064:	230b      	movs	r3, #11
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	4808      	ldr	r0, [pc, #32]	; (8001090 <HAL_ETH_MspInit+0x16c>)
 8001070:	f001 fe56 	bl	8002d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3738      	adds	r7, #56	; 0x38
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40028000 	.word	0x40028000
 8001080:	40023800 	.word	0x40023800
 8001084:	40020800 	.word	0x40020800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40021800 	.word	0x40021800

08001094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_TIM_Base_MspInit+0x38>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d10b      	bne.n	80010be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_TIM_Base_MspInit+0x3c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <HAL_TIM_Base_MspInit+0x3c>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <HAL_TIM_Base_MspInit+0x3c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40010000 	.word	0x40010000
 80010d0:	40023800 	.word	0x40023800

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ae      	sub	sp, #184	; 0xb8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2290      	movs	r2, #144	; 0x90
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 feb9 	bl	8005e6c <memset>
  if(huart->Instance==USART3)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a22      	ldr	r2, [pc, #136]	; (8001188 <HAL_UART_MspInit+0xb4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13c      	bne.n	800117e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001108:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800110a:	2300      	movs	r3, #0
 800110c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fe46 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800111e:	f7ff fe63 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <HAL_UART_MspInit+0xb8>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a19      	ldr	r2, [pc, #100]	; (800118c <HAL_UART_MspInit+0xb8>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_UART_MspInit+0xb8>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_UART_MspInit+0xb8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a13      	ldr	r2, [pc, #76]	; (800118c <HAL_UART_MspInit+0xb8>)
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_UART_MspInit+0xb8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800116c:	2307      	movs	r3, #7
 800116e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001172:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_UART_MspInit+0xbc>)
 800117a:	f001 fdd1 	bl	8002d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	37b8      	adds	r7, #184	; 0xb8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40004800 	.word	0x40004800
 800118c:	40023800 	.word	0x40023800
 8001190:	40020c00 	.word	0x40020c00

08001194 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0ae      	sub	sp, #184	; 0xb8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2290      	movs	r2, #144	; 0x90
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 fe59 	bl	8005e6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011c2:	d159      	bne.n	8001278 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fde5 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011e0:	f7ff fe02 	bl	8000de8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_PCD_MspInit+0xec>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a25      	ldr	r2, [pc, #148]	; (8001280 <HAL_PCD_MspInit+0xec>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_PCD_MspInit+0xec>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011fc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001200:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001216:	230a      	movs	r3, #10
 8001218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001220:	4619      	mov	r1, r3
 8001222:	4818      	ldr	r0, [pc, #96]	; (8001284 <HAL_PCD_MspInit+0xf0>)
 8001224:	f001 fd7c 	bl	8002d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001240:	4619      	mov	r1, r3
 8001242:	4810      	ldr	r0, [pc, #64]	; (8001284 <HAL_PCD_MspInit+0xf0>)
 8001244:	f001 fd6c 	bl	8002d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_PCD_MspInit+0xec>)
 800124a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124c:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <HAL_PCD_MspInit+0xec>)
 800124e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001252:	6353      	str	r3, [r2, #52]	; 0x34
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_PCD_MspInit+0xec>)
 8001256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_PCD_MspInit+0xec>)
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_PCD_MspInit+0xec>)
 8001266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126a:	6453      	str	r3, [r2, #68]	; 0x44
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_PCD_MspInit+0xec>)
 800126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	37b8      	adds	r7, #184	; 0xb8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d4:	f000 f90c 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <DMA2_Stream0_IRQHandler+0x10>)
 80012e2:	f000 ff8d 	bl	8002200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000248 	.word	0x20000248

080012f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e00a      	b.n	8001318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001302:	f3af 8000 	nop.w
 8001306:	4601      	mov	r1, r0
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	b2ca      	uxtb	r2, r1
 8001310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf0      	blt.n	8001302 <_read+0x12>
  }

  return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_close>:
  }
  return len;
}

int _close(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001352:	605a      	str	r2, [r3, #4]
  return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_isatty>:

int _isatty(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f004 fda0 	bl	8005f08 <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20080000 	.word	0x20080000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	20000954 	.word	0x20000954
 80013fc:	20000aa8 	.word	0x20000aa8

08001400 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800145c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142a:	490e      	ldr	r1, [pc, #56]	; (8001464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001440:	4c0b      	ldr	r4, [pc, #44]	; (8001470 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800144e:	f7ff ffd7 	bl	8001400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001452:	f004 fd5f 	bl	8005f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001456:	f7ff f99d 	bl	8000794 <main>
  bx  lr    
 800145a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001468:	08006444 	.word	0x08006444
  ldr r2, =_sbss
 800146c:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001470:	20000aa8 	.word	0x20000aa8

08001474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC_IRQHandler>

08001476 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147a:	2003      	movs	r0, #3
 800147c:	f000 fd70 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001480:	2000      	movs	r0, #0
 8001482:	f000 f805 	bl	8001490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001486:	f7ff fcb5 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_InitTick+0x54>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x58>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fd8b 	bl	8001fca <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00e      	b.n	80014dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b0f      	cmp	r3, #15
 80014c2:	d80a      	bhi.n	80014da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c4:	2200      	movs	r2, #0
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f000 fd53 	bl	8001f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_InitTick+0x5c>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000004 	.word	0x20000004
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	20000008 	.word	0x20000008

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000000c 	.word	0x2000000c
 8001514:	20000958 	.word	0x20000958

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000958 	.word	0x20000958

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000000c 	.word	0x2000000c

08001578 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e031      	b.n	80015f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fc50 	bl	8000e3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d116      	bne.n	80015e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_ADC_Init+0x84>)
 80015bc:	4013      	ands	r3, r2
 80015be:	f043 0202 	orr.w	r2, r3, #2
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fa7e 	bl	8001ac8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f023 0303 	bic.w	r3, r3, #3
 80015da:	f043 0201 	orr.w	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
 80015e2:	e001      	b.n	80015e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	ffffeefd 	.word	0xffffeefd

08001600 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_ADC_Start_DMA+0x1e>
 800161a:	2302      	movs	r3, #2
 800161c:	e0d4      	b.n	80017c8 <HAL_ADC_Start_DMA+0x1c8>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b01      	cmp	r3, #1
 8001632:	d018      	beq.n	8001666 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001644:	4b62      	ldr	r3, [pc, #392]	; (80017d0 <HAL_ADC_Start_DMA+0x1d0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a62      	ldr	r2, [pc, #392]	; (80017d4 <HAL_ADC_Start_DMA+0x1d4>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0c9a      	lsrs	r2, r3, #18
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001658:	e002      	b.n	8001660 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3b01      	subs	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f9      	bne.n	800165a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	f040 809c 	bne.w	80017ae <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800167a:	4b57      	ldr	r3, [pc, #348]	; (80017d8 <HAL_ADC_Start_DMA+0x1d8>)
 800167c:	4013      	ands	r3, r2
 800167e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800169c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016b0:	d106      	bne.n	80016c0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f023 0206 	bic.w	r2, r3, #6
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44
 80016be:	e002      	b.n	80016c6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d2:	4a42      	ldr	r2, [pc, #264]	; (80017dc <HAL_ADC_Start_DMA+0x1dc>)
 80016d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016da:	4a41      	ldr	r2, [pc, #260]	; (80017e0 <HAL_ADC_Start_DMA+0x1e0>)
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e2:	4a40      	ldr	r2, [pc, #256]	; (80017e4 <HAL_ADC_Start_DMA+0x1e4>)
 80016e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800170e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	334c      	adds	r3, #76	; 0x4c
 800171a:	4619      	mov	r1, r3
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f000 fd0e 	bl	8002140 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001724:	4b30      	ldr	r3, [pc, #192]	; (80017e8 <HAL_ADC_Start_DMA+0x1e8>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10f      	bne.n	8001750 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d143      	bne.n	80017c6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	e03a      	b.n	80017c6 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a25      	ldr	r2, [pc, #148]	; (80017ec <HAL_ADC_Start_DMA+0x1ec>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d10e      	bne.n	8001778 <HAL_ADC_Start_DMA+0x178>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001776:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_ADC_Start_DMA+0x1e8>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d120      	bne.n	80017c6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_ADC_Start_DMA+0x1f0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d11b      	bne.n	80017c6 <HAL_ADC_Start_DMA+0x1c6>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d114      	bne.n	80017c6 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	e00b      	b.n	80017c6 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f043 0210 	orr.w	r2, r3, #16
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000004 	.word	0x20000004
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	fffff8fe 	.word	0xfffff8fe
 80017dc:	08001cbd 	.word	0x08001cbd
 80017e0:	08001d77 	.word	0x08001d77
 80017e4:	08001d93 	.word	0x08001d93
 80017e8:	40012300 	.word	0x40012300
 80017ec:	40012000 	.word	0x40012000
 80017f0:	40012200 	.word	0x40012200

080017f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x1c>
 8001834:	2302      	movs	r3, #2
 8001836:	e136      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x28a>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b09      	cmp	r3, #9
 8001846:	d93a      	bls.n	80018be <HAL_ADC_ConfigChannel+0xa2>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001850:	d035      	beq.n	80018be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68d9      	ldr	r1, [r3, #12]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	3b1e      	subs	r3, #30
 8001868:	2207      	movs	r2, #7
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	400a      	ands	r2, r1
 8001876:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a8d      	ldr	r2, [pc, #564]	; (8001ab4 <HAL_ADC_ConfigChannel+0x298>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10a      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68d9      	ldr	r1, [r3, #12]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	061a      	lsls	r2, r3, #24
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001896:	e035      	b.n	8001904 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68d9      	ldr	r1, [r3, #12]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4403      	add	r3, r0
 80018b0:	3b1e      	subs	r3, #30
 80018b2:	409a      	lsls	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018bc:	e022      	b.n	8001904 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6919      	ldr	r1, [r3, #16]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	2207      	movs	r2, #7
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43da      	mvns	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	400a      	ands	r2, r1
 80018e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6919      	ldr	r1, [r3, #16]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	4603      	mov	r3, r0
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4403      	add	r3, r0
 80018fa:	409a      	lsls	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b06      	cmp	r3, #6
 800190a:	d824      	bhi.n	8001956 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	3b05      	subs	r3, #5
 800191e:	221f      	movs	r2, #31
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43da      	mvns	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	400a      	ands	r2, r1
 800192c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b05      	subs	r3, #5
 8001948:	fa00 f203 	lsl.w	r2, r0, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	635a      	str	r2, [r3, #52]	; 0x34
 8001954:	e04c      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d824      	bhi.n	80019a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	3b23      	subs	r3, #35	; 0x23
 8001970:	221f      	movs	r2, #31
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	400a      	ands	r2, r1
 800197e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b23      	subs	r3, #35	; 0x23
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	631a      	str	r2, [r3, #48]	; 0x30
 80019a6:	e023      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	3b41      	subs	r3, #65	; 0x41
 80019ba:	221f      	movs	r2, #31
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43da      	mvns	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	400a      	ands	r2, r1
 80019c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3b41      	subs	r3, #65	; 0x41
 80019e4:	fa00 f203 	lsl.w	r2, r0, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a30      	ldr	r2, [pc, #192]	; (8001ab8 <HAL_ADC_ConfigChannel+0x29c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10a      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x1f4>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a2c      	ldr	r2, [pc, #176]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a0a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a0e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a28      	ldr	r2, [pc, #160]	; (8001ab8 <HAL_ADC_ConfigChannel+0x29c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10f      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x21e>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d10b      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a25      	ldr	r2, [pc, #148]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a2c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a22      	ldr	r2, [pc, #136]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a38:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_ADC_ConfigChannel+0x29c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d12b      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x280>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1a      	ldr	r2, [pc, #104]	; (8001ab4 <HAL_ADC_ConfigChannel+0x298>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d003      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x23a>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b11      	cmp	r3, #17
 8001a54:	d122      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a60:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <HAL_ADC_ConfigChannel+0x2a0>)
 8001a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_ADC_ConfigChannel+0x298>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d111      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a11      	ldr	r2, [pc, #68]	; (8001ac4 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0c9a      	lsrs	r2, r3, #18
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a8e:	e002      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f9      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	10000012 	.word	0x10000012
 8001ab8:	40012000 	.word	0x40012000
 8001abc:	40012300 	.word	0x40012300
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	431bde83 	.word	0x431bde83

08001ac8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ad0:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <ADC_Init+0x1ec>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a77      	ldr	r2, [pc, #476]	; (8001cb4 <ADC_Init+0x1ec>)
 8001ad6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ada:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001adc:	4b75      	ldr	r3, [pc, #468]	; (8001cb4 <ADC_Init+0x1ec>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4973      	ldr	r1, [pc, #460]	; (8001cb4 <ADC_Init+0x1ec>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	021a      	lsls	r2, r3, #8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6899      	ldr	r1, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <ADC_Init+0x1f0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d022      	beq.n	8001ba2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6899      	ldr	r1, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6899      	ldr	r1, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	e00f      	b.n	8001bc2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0202 	bic.w	r2, r2, #2
 8001bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6899      	ldr	r1, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	005a      	lsls	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01b      	beq.n	8001c28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	035a      	lsls	r2, r3, #13
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	e007      	b.n	8001c38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	051a      	lsls	r2, r3, #20
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6899      	ldr	r1, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c7a:	025a      	lsls	r2, r3, #9
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6899      	ldr	r1, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	029a      	lsls	r2, r3, #10
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40012300 	.word	0x40012300
 8001cb8:	0f000001 	.word	0x0f000001

08001cbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d13c      	bne.n	8001d50 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d12b      	bne.n	8001d48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d127      	bne.n	8001d48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d119      	bne.n	8001d48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0220 	bic.w	r2, r2, #32
 8001d22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d105      	bne.n	8001d48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7fe fc39 	bl	80005c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d4e:	e00e      	b.n	8001d6e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff fd53 	bl	8001808 <HAL_ADC_ErrorCallback>
}
 8001d62:	e004      	b.n	8001d6e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d82:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7ff fd35 	bl	80017f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f043 0204 	orr.w	r2, r3, #4
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7ff fd28 	bl	8001808 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <__NVIC_SetPriorityGrouping>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <__NVIC_SetPriorityGrouping+0x40>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00
 8001e04:	05fa0000 	.word	0x05fa0000

08001e08 <__NVIC_GetPriorityGrouping>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_EnableIRQ>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0b      	blt.n	8001e4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4907      	ldr	r1, [pc, #28]	; (8001e5c <__NVIC_EnableIRQ+0x38>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <__NVIC_SetPriority>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db0a      	blt.n	8001e8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	; (8001eac <__NVIC_SetPriority+0x4c>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e88:	e00a      	b.n	8001ea0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4908      	ldr	r1, [pc, #32]	; (8001eb0 <__NVIC_SetPriority+0x50>)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3b04      	subs	r3, #4
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	761a      	strb	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <NVIC_EncodePriority>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f1c3 0307 	rsb	r3, r3, #7
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf28      	it	cs
 8001ed2:	2304      	movcs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d902      	bls.n	8001ee4 <NVIC_EncodePriority+0x30>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	e000      	b.n	8001ee6 <NVIC_EncodePriority+0x32>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	4313      	orrs	r3, r2
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <SysTick_Config>:
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f2c:	d301      	bcc.n	8001f32 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00f      	b.n	8001f52 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <SysTick_Config+0x40>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3a:	210f      	movs	r1, #15
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f7ff ff8e 	bl	8001e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <SysTick_Config+0x40>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <SysTick_Config+0x40>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff29 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f88:	f7ff ff3e 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	6978      	ldr	r0, [r7, #20]
 8001f94:	f7ff ff8e 	bl	8001eb4 <NVIC_EncodePriority>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff5d 	bl	8001e60 <__NVIC_SetPriority>
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff31 	bl	8001e24 <__NVIC_EnableIRQ>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffa2 	bl	8001f1c <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff fa92 	bl	8001518 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e099      	b.n	8002134 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002020:	e00f      	b.n	8002042 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002022:	f7ff fa79 	bl	8001518 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b05      	cmp	r3, #5
 800202e:	d908      	bls.n	8002042 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e078      	b.n	8002134 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e8      	bne.n	8002022 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4b38      	ldr	r3, [pc, #224]	; (800213c <HAL_DMA_Init+0x158>)
 800205c:	4013      	ands	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800206e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	2b04      	cmp	r3, #4
 800209a:	d107      	bne.n	80020ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4313      	orrs	r3, r2
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f023 0307 	bic.w	r3, r3, #7
 80020c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d117      	bne.n	8002106 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00e      	beq.n	8002106 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fa77 	bl	80025dc <DMA_CheckFifoParam>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2240      	movs	r2, #64	; 0x40
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002102:	2301      	movs	r3, #1
 8002104:	e016      	b.n	8002134 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fa2e 	bl	8002570 <DMA_CalcBaseAndBitshift>
 8002114:	4603      	mov	r3, r0
 8002116:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	223f      	movs	r2, #63	; 0x3f
 800211e:	409a      	lsls	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	e010803f 	.word	0xe010803f

08002140 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_DMA_Start_IT+0x26>
 8002162:	2302      	movs	r3, #2
 8002164:	e048      	b.n	80021f8 <HAL_DMA_Start_IT+0xb8>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d137      	bne.n	80021ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2202      	movs	r2, #2
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f9c0 	bl	8002514 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	223f      	movs	r2, #63	; 0x3f
 800219a:	409a      	lsls	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0216 	orr.w	r2, r2, #22
 80021ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021be:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0208 	orr.w	r2, r2, #8
 80021d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e005      	b.n	80021f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021f2:	2302      	movs	r3, #2
 80021f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800220c:	4b8e      	ldr	r3, [pc, #568]	; (8002448 <HAL_DMA_IRQHandler+0x248>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a8e      	ldr	r2, [pc, #568]	; (800244c <HAL_DMA_IRQHandler+0x24c>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0a9b      	lsrs	r3, r3, #10
 8002218:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	2208      	movs	r2, #8
 800222c:	409a      	lsls	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01a      	beq.n	800226c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0204 	bic.w	r2, r2, #4
 8002252:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	2208      	movs	r2, #8
 800225a:	409a      	lsls	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	2201      	movs	r2, #1
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d012      	beq.n	80022a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	2201      	movs	r2, #1
 8002290:	409a      	lsls	r2, r3
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	f043 0202 	orr.w	r2, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2204      	movs	r2, #4
 80022a8:	409a      	lsls	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d012      	beq.n	80022d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	2204      	movs	r2, #4
 80022c6:	409a      	lsls	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	f043 0204 	orr.w	r2, r3, #4
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	2210      	movs	r2, #16
 80022de:	409a      	lsls	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d043      	beq.n	8002370 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d03c      	beq.n	8002370 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	2210      	movs	r2, #16
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d018      	beq.n	8002342 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d108      	bne.n	8002330 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d024      	beq.n	8002370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4798      	blx	r3
 800232e:	e01f      	b.n	8002370 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01b      	beq.n	8002370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
 8002340:	e016      	b.n	8002370 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d107      	bne.n	8002360 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0208 	bic.w	r2, r2, #8
 800235e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	2220      	movs	r2, #32
 8002376:	409a      	lsls	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 808f 	beq.w	80024a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8087 	beq.w	80024a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	2220      	movs	r2, #32
 8002398:	409a      	lsls	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d136      	bne.n	8002418 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0216 	bic.w	r2, r2, #22
 80023b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d103      	bne.n	80023da <HAL_DMA_IRQHandler+0x1da>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0208 	bic.w	r2, r2, #8
 80023e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	223f      	movs	r2, #63	; 0x3f
 80023f0:	409a      	lsls	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240a:	2b00      	cmp	r3, #0
 800240c:	d07e      	beq.n	800250c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	4798      	blx	r3
        }
        return;
 8002416:	e079      	b.n	800250c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01d      	beq.n	8002462 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10d      	bne.n	8002450 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	2b00      	cmp	r3, #0
 800243a:	d031      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
 8002444:	e02c      	b.n	80024a0 <HAL_DMA_IRQHandler+0x2a0>
 8002446:	bf00      	nop
 8002448:	20000004 	.word	0x20000004
 800244c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d023      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
 8002460:	e01e      	b.n	80024a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10f      	bne.n	8002490 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0210 	bic.w	r2, r2, #16
 800247e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d032      	beq.n	800250e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d022      	beq.n	80024fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2205      	movs	r2, #5
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	3301      	adds	r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d307      	bcc.n	80024e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f2      	bne.n	80024cc <HAL_DMA_IRQHandler+0x2cc>
 80024e6:	e000      	b.n	80024ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
 800250a:	e000      	b.n	800250e <HAL_DMA_IRQHandler+0x30e>
        return;
 800250c:	bf00      	nop
    }
  }
}
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002530:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b40      	cmp	r3, #64	; 0x40
 8002540:	d108      	bne.n	8002554 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002552:	e007      	b.n	8002564 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	60da      	str	r2, [r3, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	3b10      	subs	r3, #16
 8002580:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <DMA_CalcBaseAndBitshift+0x60>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <DMA_CalcBaseAndBitshift+0x64>)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d908      	bls.n	80025b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <DMA_CalcBaseAndBitshift+0x68>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	1d1a      	adds	r2, r3, #4
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	659a      	str	r2, [r3, #88]	; 0x58
 80025ae:	e006      	b.n	80025be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <DMA_CalcBaseAndBitshift+0x68>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	aaaaaaab 	.word	0xaaaaaaab
 80025d4:	0800642c 	.word	0x0800642c
 80025d8:	fffffc00 	.word	0xfffffc00

080025dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11f      	bne.n	8002636 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d856      	bhi.n	80026aa <DMA_CheckFifoParam+0xce>
 80025fc:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <DMA_CheckFifoParam+0x28>)
 80025fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002602:	bf00      	nop
 8002604:	08002615 	.word	0x08002615
 8002608:	08002627 	.word	0x08002627
 800260c:	08002615 	.word	0x08002615
 8002610:	080026ab 	.word	0x080026ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d046      	beq.n	80026ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002624:	e043      	b.n	80026ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800262e:	d140      	bne.n	80026b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002634:	e03d      	b.n	80026b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263e:	d121      	bne.n	8002684 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d837      	bhi.n	80026b6 <DMA_CheckFifoParam+0xda>
 8002646:	a201      	add	r2, pc, #4	; (adr r2, 800264c <DMA_CheckFifoParam+0x70>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	0800265d 	.word	0x0800265d
 8002650:	08002663 	.word	0x08002663
 8002654:	0800265d 	.word	0x0800265d
 8002658:	08002675 	.word	0x08002675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
      break;
 8002660:	e030      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d025      	beq.n	80026ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002672:	e022      	b.n	80026ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800267c:	d11f      	bne.n	80026be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002682:	e01c      	b.n	80026be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d903      	bls.n	8002692 <DMA_CheckFifoParam+0xb6>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d003      	beq.n	8002698 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002690:	e018      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      break;
 8002696:	e015      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00e      	beq.n	80026c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      break;
 80026a8:	e00b      	b.n	80026c2 <DMA_CheckFifoParam+0xe6>
      break;
 80026aa:	bf00      	nop
 80026ac:	e00a      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e008      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026b2:	bf00      	nop
 80026b4:	e006      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
 80026b8:	e004      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026ba:	bf00      	nop
 80026bc:	e002      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80026be:	bf00      	nop
 80026c0:	e000      	b.n	80026c4 <DMA_CheckFifoParam+0xe8>
      break;
 80026c2:	bf00      	nop
    }
  } 
  
  return status; 
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop

080026d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e06a      	b.n	80027bc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d106      	bne.n	80026fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2223      	movs	r2, #35	; 0x23
 80026f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7fe fc13 	bl	8000f24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <HAL_ETH_Init+0xf0>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a30      	ldr	r2, [pc, #192]	; (80027c4 <HAL_ETH_Init+0xf0>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <HAL_ETH_Init+0xf0>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002716:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <HAL_ETH_Init+0xf4>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a2b      	ldr	r2, [pc, #172]	; (80027c8 <HAL_ETH_Init+0xf4>)
 800271c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002720:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002722:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <HAL_ETH_Init+0xf4>)
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4927      	ldr	r1, [pc, #156]	; (80027c8 <HAL_ETH_Init+0xf4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_ETH_Init+0xf4>)
 8002732:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800274a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800274c:	f7fe fee4 	bl	8001518 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002752:	e011      	b.n	8002778 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002754:	f7fe fee0 	bl	8001518 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002762:	d909      	bls.n	8002778 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2204      	movs	r2, #4
 8002768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	22e0      	movs	r2, #224	; 0xe0
 8002770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e021      	b.n	80027bc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e4      	bne.n	8002754 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f958 	bl	8002a40 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f9ff 	bl	8002b94 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fa55 	bl	8002c46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	461a      	mov	r2, r3
 80027a2:	2100      	movs	r1, #0
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f9bd 	bl	8002b24 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2210      	movs	r2, #16
 80027b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800

080027cc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4b51      	ldr	r3, [pc, #324]	; (8002928 <ETH_SetMACConfig+0x15c>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	7c1b      	ldrb	r3, [r3, #16]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <ETH_SetMACConfig+0x28>
 80027ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027f2:	e000      	b.n	80027f6 <ETH_SetMACConfig+0x2a>
 80027f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	7c5b      	ldrb	r3, [r3, #17]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <ETH_SetMACConfig+0x38>
 80027fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002802:	e000      	b.n	8002806 <ETH_SetMACConfig+0x3a>
 8002804:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002806:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800280c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	7fdb      	ldrb	r3, [r3, #31]
 8002812:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002814:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800281a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	7f92      	ldrb	r2, [r2, #30]
 8002820:	2a00      	cmp	r2, #0
 8002822:	d102      	bne.n	800282a <ETH_SetMACConfig+0x5e>
 8002824:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002828:	e000      	b.n	800282c <ETH_SetMACConfig+0x60>
 800282a:	2200      	movs	r2, #0
                        macconf->Speed |
 800282c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	7f1b      	ldrb	r3, [r3, #28]
 8002832:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002834:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800283a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	791b      	ldrb	r3, [r3, #4]
 8002840:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002842:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	f892 2020 	ldrb.w	r2, [r2, #32]
 800284a:	2a00      	cmp	r2, #0
 800284c:	d102      	bne.n	8002854 <ETH_SetMACConfig+0x88>
 800284e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002852:	e000      	b.n	8002856 <ETH_SetMACConfig+0x8a>
 8002854:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002856:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	7bdb      	ldrb	r3, [r3, #15]
 800285c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800285e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002864:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800286c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800286e:	4313      	orrs	r3, r2
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002886:	2001      	movs	r0, #1
 8002888:	f7fe fe52 	bl	8001530 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028a2:	4013      	ands	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80028b2:	2a00      	cmp	r2, #0
 80028b4:	d101      	bne.n	80028ba <ETH_SetMACConfig+0xee>
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	e000      	b.n	80028bc <ETH_SetMACConfig+0xf0>
 80028ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80028ca:	2a01      	cmp	r2, #1
 80028cc:	d101      	bne.n	80028d2 <ETH_SetMACConfig+0x106>
 80028ce:	2208      	movs	r2, #8
 80028d0:	e000      	b.n	80028d4 <ETH_SetMACConfig+0x108>
 80028d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80028dc:	2a01      	cmp	r2, #1
 80028de:	d101      	bne.n	80028e4 <ETH_SetMACConfig+0x118>
 80028e0:	2204      	movs	r2, #4
 80028e2:	e000      	b.n	80028e6 <ETH_SetMACConfig+0x11a>
 80028e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80028ee:	2a01      	cmp	r2, #1
 80028f0:	d101      	bne.n	80028f6 <ETH_SetMACConfig+0x12a>
 80028f2:	2202      	movs	r2, #2
 80028f4:	e000      	b.n	80028f8 <ETH_SetMACConfig+0x12c>
 80028f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028f8:	4313      	orrs	r3, r2
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002910:	2001      	movs	r0, #1
 8002912:	f7fe fe0d 	bl	8001530 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	619a      	str	r2, [r3, #24]
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	ff20810f 	.word	0xff20810f

0800292c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <ETH_SetDMAConfig+0x110>)
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	7b1b      	ldrb	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <ETH_SetDMAConfig+0x2c>
 8002952:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002956:	e000      	b.n	800295a <ETH_SetDMAConfig+0x2e>
 8002958:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	7b5b      	ldrb	r3, [r3, #13]
 800295e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002960:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	7f52      	ldrb	r2, [r2, #29]
 8002966:	2a00      	cmp	r2, #0
 8002968:	d102      	bne.n	8002970 <ETH_SetDMAConfig+0x44>
 800296a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800296e:	e000      	b.n	8002972 <ETH_SetDMAConfig+0x46>
 8002970:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002972:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	7b9b      	ldrb	r3, [r3, #14]
 8002978:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800297a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002980:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	7f1b      	ldrb	r3, [r3, #28]
 8002986:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002988:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	7f9b      	ldrb	r3, [r3, #30]
 800298e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002990:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002996:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800299e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029a0:	4313      	orrs	r3, r2
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b0:	461a      	mov	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029c2:	2001      	movs	r0, #1
 80029c4:	f7fe fdb4 	bl	8001530 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d0:	461a      	mov	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	791b      	ldrb	r3, [r3, #4]
 80029da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a04:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a12:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a20:	2001      	movs	r0, #1
 8002a22:	f7fe fd85 	bl	8001530 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6013      	str	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	f8de3f23 	.word	0xf8de3f23

08002a40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0a6      	sub	sp, #152	; 0x98
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a54:	2300      	movs	r3, #0
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ab4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fe86 	bl	80027cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002aec:	2301      	movs	r3, #1
 8002aee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002af4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002afa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b00:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	4619      	mov	r1, r3
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ff08 	bl	800292c <ETH_SetDMAConfig>
}
 8002b1c:	bf00      	nop
 8002b1e:	3798      	adds	r7, #152	; 0x98
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3305      	adds	r3, #5
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	3204      	adds	r2, #4
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <ETH_MACAddressConfig+0x68>)
 8002b46:	4413      	add	r3, r2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3303      	adds	r3, #3
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	061a      	lsls	r2, r3, #24
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3302      	adds	r3, #2
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3301      	adds	r3, #1
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <ETH_MACAddressConfig+0x6c>)
 8002b76:	4413      	add	r3, r2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	6013      	str	r3, [r2, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40028040 	.word	0x40028040
 8002b90:	40028044 	.word	0x40028044

08002b94 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e03e      	b.n	8002c20 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68d9      	ldr	r1, [r3, #12]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	3206      	adds	r2, #6
 8002bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d80c      	bhi.n	8002c04 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68d9      	ldr	r1, [r3, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	e004      	b.n	8002c0e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d9bd      	bls.n	8002ba2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c38:	611a      	str	r2, [r3, #16]
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e046      	b.n	8002ce2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6919      	ldr	r1, [r3, #16]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2200      	movs	r2, #0
 8002c82:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2200      	movs	r2, #0
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c90:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002c98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	3212      	adds	r2, #18
 8002cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d80c      	bhi.n	8002cd2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6919      	ldr	r1, [r3, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	440b      	add	r3, r1
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	60da      	str	r2, [r3, #12]
 8002cd0:	e004      	b.n	8002cdc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d9b5      	bls.n	8002c54 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d12:	60da      	str	r2, [r3, #12]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e175      	b.n	800302c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	f040 8164 	bne.w	8003026 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d005      	beq.n	8002d76 <HAL_GPIO_Init+0x56>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d130      	bne.n	8002dd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 0201 	and.w	r2, r3, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d017      	beq.n	8002e14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d123      	bne.n	8002e68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	08da      	lsrs	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3208      	adds	r2, #8
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0203 	and.w	r2, r3, #3
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80be 	beq.w	8003026 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eaa:	4b66      	ldr	r3, [pc, #408]	; (8003044 <HAL_GPIO_Init+0x324>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4a65      	ldr	r2, [pc, #404]	; (8003044 <HAL_GPIO_Init+0x324>)
 8002eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb6:	4b63      	ldr	r3, [pc, #396]	; (8003044 <HAL_GPIO_Init+0x324>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ec2:	4a61      	ldr	r2, [pc, #388]	; (8003048 <HAL_GPIO_Init+0x328>)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	3302      	adds	r3, #2
 8002eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	220f      	movs	r2, #15
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <HAL_GPIO_Init+0x32c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d037      	beq.n	8002f5e <HAL_GPIO_Init+0x23e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a57      	ldr	r2, [pc, #348]	; (8003050 <HAL_GPIO_Init+0x330>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d031      	beq.n	8002f5a <HAL_GPIO_Init+0x23a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a56      	ldr	r2, [pc, #344]	; (8003054 <HAL_GPIO_Init+0x334>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02b      	beq.n	8002f56 <HAL_GPIO_Init+0x236>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a55      	ldr	r2, [pc, #340]	; (8003058 <HAL_GPIO_Init+0x338>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d025      	beq.n	8002f52 <HAL_GPIO_Init+0x232>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a54      	ldr	r2, [pc, #336]	; (800305c <HAL_GPIO_Init+0x33c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01f      	beq.n	8002f4e <HAL_GPIO_Init+0x22e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a53      	ldr	r2, [pc, #332]	; (8003060 <HAL_GPIO_Init+0x340>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d019      	beq.n	8002f4a <HAL_GPIO_Init+0x22a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a52      	ldr	r2, [pc, #328]	; (8003064 <HAL_GPIO_Init+0x344>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_GPIO_Init+0x226>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a51      	ldr	r2, [pc, #324]	; (8003068 <HAL_GPIO_Init+0x348>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00d      	beq.n	8002f42 <HAL_GPIO_Init+0x222>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a50      	ldr	r2, [pc, #320]	; (800306c <HAL_GPIO_Init+0x34c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <HAL_GPIO_Init+0x21e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4f      	ldr	r2, [pc, #316]	; (8003070 <HAL_GPIO_Init+0x350>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_GPIO_Init+0x21a>
 8002f36:	2309      	movs	r3, #9
 8002f38:	e012      	b.n	8002f60 <HAL_GPIO_Init+0x240>
 8002f3a:	230a      	movs	r3, #10
 8002f3c:	e010      	b.n	8002f60 <HAL_GPIO_Init+0x240>
 8002f3e:	2308      	movs	r3, #8
 8002f40:	e00e      	b.n	8002f60 <HAL_GPIO_Init+0x240>
 8002f42:	2307      	movs	r3, #7
 8002f44:	e00c      	b.n	8002f60 <HAL_GPIO_Init+0x240>
 8002f46:	2306      	movs	r3, #6
 8002f48:	e00a      	b.n	8002f60 <HAL_GPIO_Init+0x240>
 8002f4a:	2305      	movs	r3, #5
 8002f4c:	e008      	b.n	8002f60 <HAL_GPIO_Init+0x240>
 8002f4e:	2304      	movs	r3, #4
 8002f50:	e006      	b.n	8002f60 <HAL_GPIO_Init+0x240>
 8002f52:	2303      	movs	r3, #3
 8002f54:	e004      	b.n	8002f60 <HAL_GPIO_Init+0x240>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_Init+0x240>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_GPIO_Init+0x240>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	f002 0203 	and.w	r2, r2, #3
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	4093      	lsls	r3, r2
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f70:	4935      	ldr	r1, [pc, #212]	; (8003048 <HAL_GPIO_Init+0x328>)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	089b      	lsrs	r3, r3, #2
 8002f76:	3302      	adds	r3, #2
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	; (8003074 <HAL_GPIO_Init+0x354>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fa2:	4a34      	ldr	r2, [pc, #208]	; (8003074 <HAL_GPIO_Init+0x354>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa8:	4b32      	ldr	r3, [pc, #200]	; (8003074 <HAL_GPIO_Init+0x354>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fcc:	4a29      	ldr	r2, [pc, #164]	; (8003074 <HAL_GPIO_Init+0x354>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_GPIO_Init+0x354>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ff6:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <HAL_GPIO_Init+0x354>)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <HAL_GPIO_Init+0x354>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003020:	4a14      	ldr	r2, [pc, #80]	; (8003074 <HAL_GPIO_Init+0x354>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3301      	adds	r3, #1
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b0f      	cmp	r3, #15
 8003030:	f67f ae86 	bls.w	8002d40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	40013800 	.word	0x40013800
 800304c:	40020000 	.word	0x40020000
 8003050:	40020400 	.word	0x40020400
 8003054:	40020800 	.word	0x40020800
 8003058:	40020c00 	.word	0x40020c00
 800305c:	40021000 	.word	0x40021000
 8003060:	40021400 	.word	0x40021400
 8003064:	40021800 	.word	0x40021800
 8003068:	40021c00 	.word	0x40021c00
 800306c:	40022000 	.word	0x40022000
 8003070:	40022400 	.word	0x40022400
 8003074:	40013c00 	.word	0x40013c00

08003078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
 8003084:	4613      	mov	r3, r2
 8003086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003088:	787b      	ldrb	r3, [r7, #1]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003094:	e003      	b.n	800309e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	041a      	lsls	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	619a      	str	r2, [r3, #24]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ac:	b08f      	sub	sp, #60	; 0x3c
 80030ae:	af0a      	add	r7, sp, #40	; 0x28
 80030b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e116      	b.n	80032ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe f85c 	bl	8001194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2203      	movs	r2, #3
 80030e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f002 fa24 	bl	8005548 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	687e      	ldr	r6, [r7, #4]
 8003108:	466d      	mov	r5, sp
 800310a:	f106 0410 	add.w	r4, r6, #16
 800310e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003116:	e894 0003 	ldmia.w	r4, {r0, r1}
 800311a:	e885 0003 	stmia.w	r5, {r0, r1}
 800311e:	1d33      	adds	r3, r6, #4
 8003120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003122:	6838      	ldr	r0, [r7, #0]
 8003124:	f002 f9b8 	bl	8005498 <USB_CoreInit>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e0d7      	b.n	80032ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f002 fa12 	bl	800556a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	e04a      	b.n	80031e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	333d      	adds	r3, #61	; 0x3d
 800315c:	2201      	movs	r2, #1
 800315e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	333c      	adds	r3, #60	; 0x3c
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	b298      	uxth	r0, r3
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3344      	adds	r3, #68	; 0x44
 8003188:	4602      	mov	r2, r0
 800318a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3340      	adds	r3, #64	; 0x40
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3348      	adds	r3, #72	; 0x48
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	334c      	adds	r3, #76	; 0x4c
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031c8:	7bfa      	ldrb	r2, [r7, #15]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3354      	adds	r3, #84	; 0x54
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	3301      	adds	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3af      	bcc.n	800314c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e044      	b.n	800327c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800324a:	7bfa      	ldrb	r2, [r7, #15]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	3301      	adds	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	d3b5      	bcc.n	80031f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	687e      	ldr	r6, [r7, #4]
 800328e:	466d      	mov	r5, sp
 8003290:	f106 0410 	add.w	r4, r6, #16
 8003294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800329a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800329c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80032a4:	1d33      	adds	r3, r6, #4
 80032a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a8:	6838      	ldr	r0, [r7, #0]
 80032aa:	f002 f9ab 	bl	8005604 <USB_DevInit>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e014      	b.n	80032ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d102      	bne.n	80032de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f80b 	bl	80032f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f002 fb69 	bl	80059ba <USB_DevDisconnect>

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_PCDEx_ActivateLPM+0x44>)
 8003324:	4313      	orrs	r3, r2
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	10000003 	.word	0x10000003

0800333c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40007000 	.word	0x40007000

0800335c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a22      	ldr	r2, [pc, #136]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800338a:	f7fe f8c5 	bl	8001518 <HAL_GetTick>
 800338e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003390:	e009      	b.n	80033a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003392:	f7fe f8c1 	bl	8001518 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a0:	d901      	bls.n	80033a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e022      	b.n	80033ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b2:	d1ee      	bne.n	8003392 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c0:	f7fe f8aa 	bl	8001518 <HAL_GetTick>
 80033c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033c6:	e009      	b.n	80033dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033c8:	f7fe f8a6 	bl	8001518 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033d6:	d901      	bls.n	80033dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e007      	b.n	80033ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033e8:	d1ee      	bne.n	80033c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000

080033fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e29b      	b.n	800394a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8087 	beq.w	800352e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003420:	4b96      	ldr	r3, [pc, #600]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b04      	cmp	r3, #4
 800342a:	d00c      	beq.n	8003446 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342c:	4b93      	ldr	r3, [pc, #588]	; (800367c <HAL_RCC_OscConfig+0x280>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d112      	bne.n	800345e <HAL_RCC_OscConfig+0x62>
 8003438:	4b90      	ldr	r3, [pc, #576]	; (800367c <HAL_RCC_OscConfig+0x280>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003444:	d10b      	bne.n	800345e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003446:	4b8d      	ldr	r3, [pc, #564]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d06c      	beq.n	800352c <HAL_RCC_OscConfig+0x130>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d168      	bne.n	800352c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e275      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x7a>
 8003468:	4b84      	ldr	r3, [pc, #528]	; (800367c <HAL_RCC_OscConfig+0x280>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a83      	ldr	r2, [pc, #524]	; (800367c <HAL_RCC_OscConfig+0x280>)
 800346e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	e02e      	b.n	80034d4 <HAL_RCC_OscConfig+0xd8>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x9c>
 800347e:	4b7f      	ldr	r3, [pc, #508]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a7e      	ldr	r2, [pc, #504]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b7c      	ldr	r3, [pc, #496]	; (800367c <HAL_RCC_OscConfig+0x280>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7b      	ldr	r2, [pc, #492]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e01d      	b.n	80034d4 <HAL_RCC_OscConfig+0xd8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0xc0>
 80034a2:	4b76      	ldr	r3, [pc, #472]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a75      	ldr	r2, [pc, #468]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80034a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a72      	ldr	r2, [pc, #456]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0xd8>
 80034bc:	4b6f      	ldr	r3, [pc, #444]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a6e      	ldr	r2, [pc, #440]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b6c      	ldr	r3, [pc, #432]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6b      	ldr	r2, [pc, #428]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80034ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d013      	beq.n	8003504 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe f81c 	bl	8001518 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e4:	f7fe f818 	bl	8001518 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e229      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	4b61      	ldr	r3, [pc, #388]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0xe8>
 8003502:	e014      	b.n	800352e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe f808 	bl	8001518 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe f804 	bl	8001518 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e215      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351e:	4b57      	ldr	r3, [pc, #348]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x110>
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d069      	beq.n	800360e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800353a:	4b50      	ldr	r3, [pc, #320]	; (800367c <HAL_RCC_OscConfig+0x280>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003546:	4b4d      	ldr	r3, [pc, #308]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b08      	cmp	r3, #8
 8003550:	d11c      	bne.n	800358c <HAL_RCC_OscConfig+0x190>
 8003552:	4b4a      	ldr	r3, [pc, #296]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d116      	bne.n	800358c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	4b47      	ldr	r3, [pc, #284]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_RCC_OscConfig+0x17a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e1e9      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003576:	4b41      	ldr	r3, [pc, #260]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	493d      	ldr	r1, [pc, #244]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	e040      	b.n	800360e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d023      	beq.n	80035dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003594:	4b39      	ldr	r3, [pc, #228]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a38      	ldr	r2, [pc, #224]	; (800367c <HAL_RCC_OscConfig+0x280>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fd ffba 	bl	8001518 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a8:	f7fd ffb6 	bl	8001518 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1c7      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ba:	4b30      	ldr	r3, [pc, #192]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b2d      	ldr	r3, [pc, #180]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4929      	ldr	r1, [pc, #164]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
 80035da:	e018      	b.n	800360e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035dc:	4b27      	ldr	r3, [pc, #156]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a26      	ldr	r2, [pc, #152]	; (800367c <HAL_RCC_OscConfig+0x280>)
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd ff96 	bl	8001518 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fd ff92 	bl	8001518 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1a3      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4b1e      	ldr	r3, [pc, #120]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d038      	beq.n	800368c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d019      	beq.n	8003656 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b16      	ldr	r3, [pc, #88]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	4a15      	ldr	r2, [pc, #84]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fd ff73 	bl	8001518 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003636:	f7fd ff6f 	bl	8001518 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e180      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RCC_OscConfig+0x280>)
 800364a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x23a>
 8003654:	e01a      	b.n	800368c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <HAL_RCC_OscConfig+0x280>)
 8003658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365a:	4a08      	ldr	r2, [pc, #32]	; (800367c <HAL_RCC_OscConfig+0x280>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003662:	f7fd ff59 	bl	8001518 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003668:	e00a      	b.n	8003680 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800366a:	f7fd ff55 	bl	8001518 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d903      	bls.n	8003680 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e166      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
 800367c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	4b92      	ldr	r3, [pc, #584]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ee      	bne.n	800366a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a4 	beq.w	80037e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369a:	4b8c      	ldr	r3, [pc, #560]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	4b89      	ldr	r3, [pc, #548]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a88      	ldr	r2, [pc, #544]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 80036ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
 80036b2:	4b86      	ldr	r3, [pc, #536]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036be:	2301      	movs	r3, #1
 80036c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c2:	4b83      	ldr	r3, [pc, #524]	; (80038d0 <HAL_RCC_OscConfig+0x4d4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d118      	bne.n	8003700 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036ce:	4b80      	ldr	r3, [pc, #512]	; (80038d0 <HAL_RCC_OscConfig+0x4d4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a7f      	ldr	r2, [pc, #508]	; (80038d0 <HAL_RCC_OscConfig+0x4d4>)
 80036d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036da:	f7fd ff1d 	bl	8001518 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e2:	f7fd ff19 	bl	8001518 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b64      	cmp	r3, #100	; 0x64
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e12a      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f4:	4b76      	ldr	r3, [pc, #472]	; (80038d0 <HAL_RCC_OscConfig+0x4d4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x31a>
 8003708:	4b70      	ldr	r3, [pc, #448]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4a6f      	ldr	r2, [pc, #444]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6713      	str	r3, [r2, #112]	; 0x70
 8003714:	e02d      	b.n	8003772 <HAL_RCC_OscConfig+0x376>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x33c>
 800371e:	4b6b      	ldr	r3, [pc, #428]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a6a      	ldr	r2, [pc, #424]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
 800372a:	4b68      	ldr	r3, [pc, #416]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a67      	ldr	r2, [pc, #412]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003730:	f023 0304 	bic.w	r3, r3, #4
 8003734:	6713      	str	r3, [r2, #112]	; 0x70
 8003736:	e01c      	b.n	8003772 <HAL_RCC_OscConfig+0x376>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b05      	cmp	r3, #5
 800373e:	d10c      	bne.n	800375a <HAL_RCC_OscConfig+0x35e>
 8003740:	4b62      	ldr	r3, [pc, #392]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003744:	4a61      	ldr	r2, [pc, #388]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003746:	f043 0304 	orr.w	r3, r3, #4
 800374a:	6713      	str	r3, [r2, #112]	; 0x70
 800374c:	4b5f      	ldr	r3, [pc, #380]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	4a5e      	ldr	r2, [pc, #376]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6713      	str	r3, [r2, #112]	; 0x70
 8003758:	e00b      	b.n	8003772 <HAL_RCC_OscConfig+0x376>
 800375a:	4b5c      	ldr	r3, [pc, #368]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a5b      	ldr	r2, [pc, #364]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	6713      	str	r3, [r2, #112]	; 0x70
 8003766:	4b59      	ldr	r3, [pc, #356]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	4a58      	ldr	r2, [pc, #352]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800376c:	f023 0304 	bic.w	r3, r3, #4
 8003770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d015      	beq.n	80037a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fd fecd 	bl	8001518 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003780:	e00a      	b.n	8003798 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003782:	f7fd fec9 	bl	8001518 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003790:	4293      	cmp	r3, r2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e0d8      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003798:	4b4c      	ldr	r3, [pc, #304]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0ee      	beq.n	8003782 <HAL_RCC_OscConfig+0x386>
 80037a4:	e014      	b.n	80037d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fd feb7 	bl	8001518 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7fd feb3 	bl	8001518 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e0c2      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c4:	4b41      	ldr	r3, [pc, #260]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1ee      	bne.n	80037ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d105      	bne.n	80037e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a3c      	ldr	r2, [pc, #240]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80ae 	beq.w	8003948 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ec:	4b37      	ldr	r3, [pc, #220]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 030c 	and.w	r3, r3, #12
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d06d      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d14b      	bne.n	8003898 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003800:	4b32      	ldr	r3, [pc, #200]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a31      	ldr	r2, [pc, #196]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800380a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fe84 	bl	8001518 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003814:	f7fd fe80 	bl	8001518 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e091      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b29      	ldr	r3, [pc, #164]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	019b      	lsls	r3, r3, #6
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	3b01      	subs	r3, #1
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	071b      	lsls	r3, r3, #28
 800385e:	491b      	ldr	r1, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a18      	ldr	r2, [pc, #96]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800386a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd fe52 	bl	8001518 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fd fe4e 	bl	8001518 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e05f      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x47c>
 8003896:	e057      	b.n	8003948 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 800389e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd fe38 	bl	8001518 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fd fe34 	bl	8001518 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e045      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	4b03      	ldr	r3, [pc, #12]	; (80038cc <HAL_RCC_OscConfig+0x4d0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x4b0>
 80038ca:	e03d      	b.n	8003948 <HAL_RCC_OscConfig+0x54c>
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038d4:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <HAL_RCC_OscConfig+0x558>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d030      	beq.n	8003944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d129      	bne.n	8003944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d122      	bne.n	8003944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003904:	4013      	ands	r3, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800390a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800390c:	4293      	cmp	r3, r2
 800390e:	d119      	bne.n	8003944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	3b01      	subs	r3, #1
 800391e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d10f      	bne.n	8003944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0d0      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003970:	4b6a      	ldr	r3, [pc, #424]	; (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d910      	bls.n	80039a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b67      	ldr	r3, [pc, #412]	; (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 020f 	bic.w	r2, r3, #15
 8003986:	4965      	ldr	r1, [pc, #404]	; (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b63      	ldr	r3, [pc, #396]	; (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0b8      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d020      	beq.n	80039ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b8:	4b59      	ldr	r3, [pc, #356]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4a58      	ldr	r2, [pc, #352]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d0:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4a52      	ldr	r2, [pc, #328]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 80039d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039dc:	4b50      	ldr	r3, [pc, #320]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	494d      	ldr	r1, [pc, #308]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d040      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d115      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e07f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e073      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06b      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 0203 	bic.w	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4936      	ldr	r1, [pc, #216]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fd64 	bl	8001518 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fd fd60 	bl	8001518 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e053      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 020c 	and.w	r2, r3, #12
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1eb      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d210      	bcs.n	8003aac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 020f 	bic.w	r2, r3, #15
 8003a92:	4922      	ldr	r1, [pc, #136]	; (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e032      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab8:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4916      	ldr	r1, [pc, #88]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	490e      	ldr	r1, [pc, #56]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aea:	f000 f821 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003aee:	4602      	mov	r2, r0
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	490a      	ldr	r1, [pc, #40]	; (8003b24 <HAL_RCC_ClockConfig+0x1cc>)
 8003afc:	5ccb      	ldrb	r3, [r1, r3]
 8003afe:	fa22 f303 	lsr.w	r3, r2, r3
 8003b02:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <HAL_RCC_ClockConfig+0x1d0>)
 8003b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x1d4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fcc0 	bl	8001490 <HAL_InitTick>

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023c00 	.word	0x40023c00
 8003b20:	40023800 	.word	0x40023800
 8003b24:	08006414 	.word	0x08006414
 8003b28:	20000004 	.word	0x20000004
 8003b2c:	20000008 	.word	0x20000008

08003b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b34:	b094      	sub	sp, #80	; 0x50
 8003b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b40:	2300      	movs	r3, #0
 8003b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b48:	4b79      	ldr	r3, [pc, #484]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d00d      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x40>
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	f200 80e1 	bhi.w	8003d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x34>
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b62:	e0db      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b73      	ldr	r3, [pc, #460]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b68:	e0db      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b6a:	4b73      	ldr	r3, [pc, #460]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b6e:	e0d8      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b70:	4b6f      	ldr	r3, [pc, #444]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b78:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b7a:	4b6d      	ldr	r3, [pc, #436]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d063      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b86:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	099b      	lsrs	r3, r3, #6
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	0159      	lsls	r1, r3, #5
 8003bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb4:	0150      	lsls	r0, r2, #5
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4621      	mov	r1, r4
 8003bbc:	1a51      	subs	r1, r2, r1
 8003bbe:	6139      	str	r1, [r7, #16]
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bd4:	4659      	mov	r1, fp
 8003bd6:	018b      	lsls	r3, r1, #6
 8003bd8:	4651      	mov	r1, sl
 8003bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bde:	4651      	mov	r1, sl
 8003be0:	018a      	lsls	r2, r1, #6
 8003be2:	4651      	mov	r1, sl
 8003be4:	ebb2 0801 	subs.w	r8, r2, r1
 8003be8:	4659      	mov	r1, fp
 8003bea:	eb63 0901 	sbc.w	r9, r3, r1
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c02:	4690      	mov	r8, r2
 8003c04:	4699      	mov	r9, r3
 8003c06:	4623      	mov	r3, r4
 8003c08:	eb18 0303 	adds.w	r3, r8, r3
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	462b      	mov	r3, r5
 8003c10:	eb49 0303 	adc.w	r3, r9, r3
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c22:	4629      	mov	r1, r5
 8003c24:	024b      	lsls	r3, r1, #9
 8003c26:	4621      	mov	r1, r4
 8003c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	024a      	lsls	r2, r1, #9
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c36:	2200      	movs	r2, #0
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c40:	f7fc fafa 	bl	8000238 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4613      	mov	r3, r2
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c4c:	e058      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4e:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	2200      	movs	r2, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	4611      	mov	r1, r2
 8003c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c5e:	623b      	str	r3, [r7, #32]
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
 8003c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c68:	4642      	mov	r2, r8
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	f04f 0000 	mov.w	r0, #0
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	0159      	lsls	r1, r3, #5
 8003c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7a:	0150      	lsls	r0, r2, #5
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4641      	mov	r1, r8
 8003c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c86:	4649      	mov	r1, r9
 8003c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	00eb      	lsls	r3, r5, #3
 8003cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb6:	00e2      	lsls	r2, r4, #3
 8003cb8:	4614      	mov	r4, r2
 8003cba:	461d      	mov	r5, r3
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	18e3      	adds	r3, r4, r3
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	eb45 0303 	adc.w	r3, r5, r3
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	028b      	lsls	r3, r1, #10
 8003cda:	4621      	mov	r1, r4
 8003cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	028a      	lsls	r2, r1, #10
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cea:	2200      	movs	r2, #0
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	61fa      	str	r2, [r7, #28]
 8003cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf4:	f7fc faa0 	bl	8000238 <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d1a:	e002      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3750      	adds	r7, #80	; 0x50
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200

08003d3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000004 	.word	0x20000004

08003d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d58:	f7ff fff0 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4903      	ldr	r1, [pc, #12]	; (8003d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	08006424 	.word	0x08006424

08003d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d80:	f7ff ffdc 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0b5b      	lsrs	r3, r3, #13
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	08006424 	.word	0x08006424

08003da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d012      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dcc:	4b69      	ldr	r3, [pc, #420]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a68      	ldr	r2, [pc, #416]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dd6:	6093      	str	r3, [r2, #8]
 8003dd8:	4b66      	ldr	r3, [pc, #408]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de0:	4964      	ldr	r1, [pc, #400]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d017      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dfe:	4b5d      	ldr	r3, [pc, #372]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	4959      	ldr	r1, [pc, #356]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d017      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e3a:	4b4e      	ldr	r3, [pc, #312]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	494a      	ldr	r1, [pc, #296]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e58:	d101      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e66:	2301      	movs	r3, #1
 8003e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e76:	2301      	movs	r3, #1
 8003e78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 808b 	beq.w	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e88:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	4a39      	ldr	r2, [pc, #228]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6413      	str	r3, [r2, #64]	; 0x40
 8003e94:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ea0:	4b35      	ldr	r3, [pc, #212]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a34      	ldr	r2, [pc, #208]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eac:	f7fd fb34 	bl	8001518 <HAL_GetTick>
 8003eb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb4:	f7fd fb30 	bl	8001518 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	; 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e38f      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ec6:	4b2c      	ldr	r3, [pc, #176]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ed2:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d035      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d02e      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ef0:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003efa:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f12:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f18:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d114      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fd faf8 	bl	8001518 <HAL_GetTick>
 8003f28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f7fd faf4 	bl	8001518 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e351      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f42:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0ee      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f5a:	d111      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f6a:	400b      	ands	r3, r1
 8003f6c:	4901      	ldr	r1, [pc, #4]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
 8003f72:	e00b      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	0ffffcff 	.word	0x0ffffcff
 8003f80:	4bac      	ldr	r3, [pc, #688]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4aab      	ldr	r2, [pc, #684]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f8a:	6093      	str	r3, [r2, #8]
 8003f8c:	4ba9      	ldr	r3, [pc, #676]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f98:	49a6      	ldr	r1, [pc, #664]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d010      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003faa:	4ba2      	ldr	r3, [pc, #648]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb0:	4aa0      	ldr	r2, [pc, #640]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fba:	4b9e      	ldr	r3, [pc, #632]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	499b      	ldr	r1, [pc, #620]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fd8:	4b96      	ldr	r3, [pc, #600]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe6:	4993      	ldr	r1, [pc, #588]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ffa:	4b8e      	ldr	r3, [pc, #568]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004008:	498a      	ldr	r1, [pc, #552]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800401c:	4b85      	ldr	r3, [pc, #532]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402a:	4982      	ldr	r1, [pc, #520]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800403e:	4b7d      	ldr	r3, [pc, #500]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	4979      	ldr	r1, [pc, #484]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004060:	4b74      	ldr	r3, [pc, #464]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	4971      	ldr	r1, [pc, #452]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004082:	4b6c      	ldr	r3, [pc, #432]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f023 020c 	bic.w	r2, r3, #12
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004090:	4968      	ldr	r1, [pc, #416]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040a4:	4b63      	ldr	r3, [pc, #396]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	4960      	ldr	r1, [pc, #384]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040c6:	4b5b      	ldr	r3, [pc, #364]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d4:	4957      	ldr	r1, [pc, #348]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040e8:	4b52      	ldr	r3, [pc, #328]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	494f      	ldr	r1, [pc, #316]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800410a:	4b4a      	ldr	r3, [pc, #296]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	4946      	ldr	r1, [pc, #280]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800412c:	4b41      	ldr	r3, [pc, #260]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	493e      	ldr	r1, [pc, #248]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800414e:	4b39      	ldr	r3, [pc, #228]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415c:	4935      	ldr	r1, [pc, #212]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004170:	4b30      	ldr	r3, [pc, #192]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800417e:	492d      	ldr	r1, [pc, #180]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d011      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004192:	4b28      	ldr	r3, [pc, #160]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a0:	4924      	ldr	r1, [pc, #144]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b0:	d101      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041b2:	2301      	movs	r3, #1
 80041b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041c2:	2301      	movs	r3, #1
 80041c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041d2:	4b18      	ldr	r3, [pc, #96]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e0:	4914      	ldr	r1, [pc, #80]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004204:	490b      	ldr	r1, [pc, #44]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00f      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004228:	4902      	ldr	r1, [pc, #8]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004230:	e002      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004244:	4b8a      	ldr	r3, [pc, #552]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800424a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	4986      	ldr	r1, [pc, #536]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004268:	4b81      	ldr	r3, [pc, #516]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800426a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004278:	497d      	ldr	r1, [pc, #500]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d006      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80d6 	beq.w	8004440 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004294:	4b76      	ldr	r3, [pc, #472]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a75      	ldr	r2, [pc, #468]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800429e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a0:	f7fd f93a 	bl	8001518 <HAL_GetTick>
 80042a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042a8:	f7fd f936 	bl	8001518 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e195      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042ba:	4b6d      	ldr	r3, [pc, #436]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d021      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d11d      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042da:	4b65      	ldr	r3, [pc, #404]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042e8:	4b61      	ldr	r3, [pc, #388]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ee:	0e1b      	lsrs	r3, r3, #24
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	019a      	lsls	r2, r3, #6
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	071b      	lsls	r3, r3, #28
 800430e:	4958      	ldr	r1, [pc, #352]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d004      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004334:	2b00      	cmp	r3, #0
 8004336:	d02e      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004340:	d129      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004342:	4b4b      	ldr	r3, [pc, #300]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004350:	4b47      	ldr	r3, [pc, #284]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004356:	0f1b      	lsrs	r3, r3, #28
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	019a      	lsls	r2, r3, #6
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	061b      	lsls	r3, r3, #24
 8004370:	431a      	orrs	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	071b      	lsls	r3, r3, #28
 8004376:	493e      	ldr	r1, [pc, #248]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800437e:	4b3c      	ldr	r3, [pc, #240]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004384:	f023 021f 	bic.w	r2, r3, #31
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	3b01      	subs	r3, #1
 800438e:	4938      	ldr	r1, [pc, #224]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d01d      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043a2:	4b33      	ldr	r3, [pc, #204]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a8:	0e1b      	lsrs	r3, r3, #24
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043b0:	4b2f      	ldr	r3, [pc, #188]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b6:	0f1b      	lsrs	r3, r3, #28
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	019a      	lsls	r2, r3, #6
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	431a      	orrs	r2, r3
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	061b      	lsls	r3, r3, #24
 80043d0:	431a      	orrs	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	071b      	lsls	r3, r3, #28
 80043d6:	4926      	ldr	r1, [pc, #152]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d011      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	019a      	lsls	r2, r3, #6
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	061b      	lsls	r3, r3, #24
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	071b      	lsls	r3, r3, #28
 8004406:	491a      	ldr	r1, [pc, #104]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800440e:	4b18      	ldr	r3, [pc, #96]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a17      	ldr	r2, [pc, #92]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004414:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441a:	f7fd f87d 	bl	8001518 <HAL_GetTick>
 800441e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004420:	e008      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004422:	f7fd f879 	bl	8001518 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b64      	cmp	r3, #100	; 0x64
 800442e:	d901      	bls.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e0d8      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004434:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b01      	cmp	r3, #1
 8004444:	f040 80ce 	bne.w	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004448:	4b09      	ldr	r3, [pc, #36]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a08      	ldr	r2, [pc, #32]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004454:	f7fd f860 	bl	8001518 <HAL_GetTick>
 8004458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800445a:	e00b      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800445c:	f7fd f85c 	bl	8001518 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b64      	cmp	r3, #100	; 0x64
 8004468:	d904      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e0bb      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004474:	4b5e      	ldr	r3, [pc, #376]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800447c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004480:	d0ec      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d02e      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d12a      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044aa:	4b51      	ldr	r3, [pc, #324]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044b8:	4b4d      	ldr	r3, [pc, #308]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	0f1b      	lsrs	r3, r3, #28
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	019a      	lsls	r2, r3, #6
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	041b      	lsls	r3, r3, #16
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	061b      	lsls	r3, r3, #24
 80044d8:	431a      	orrs	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	071b      	lsls	r3, r3, #28
 80044de:	4944      	ldr	r1, [pc, #272]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044e6:	4b42      	ldr	r3, [pc, #264]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	3b01      	subs	r3, #1
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	493d      	ldr	r1, [pc, #244]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d022      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004514:	d11d      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004516:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	0e1b      	lsrs	r3, r3, #24
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004524:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	0f1b      	lsrs	r3, r3, #28
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	019a      	lsls	r2, r3, #6
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	431a      	orrs	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	071b      	lsls	r3, r3, #28
 800454a:	4929      	ldr	r1, [pc, #164]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d028      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800455e:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	0e1b      	lsrs	r3, r3, #24
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800456c:	4b20      	ldr	r3, [pc, #128]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	0c1b      	lsrs	r3, r3, #16
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	019a      	lsls	r2, r3, #6
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	431a      	orrs	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	071b      	lsls	r3, r3, #28
 8004592:	4917      	ldr	r1, [pc, #92]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	4911      	ldr	r1, [pc, #68]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0e      	ldr	r2, [pc, #56]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045bc:	f7fc ffac 	bl	8001518 <HAL_GetTick>
 80045c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045c4:	f7fc ffa8 	bl	8001518 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e007      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e2:	d1ef      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800

080045f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e049      	b.n	800469a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fd3a 	bl	8001094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f000 f900 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_TIM_ConfigClockSource+0x1c>
 80046bc:	2302      	movs	r3, #2
 80046be:	e0b4      	b.n	800482a <HAL_TIM_ConfigClockSource+0x186>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	4b56      	ldr	r3, [pc, #344]	; (8004834 <HAL_TIM_ConfigClockSource+0x190>)
 80046dc:	4013      	ands	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f8:	d03e      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0xd4>
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fe:	f200 8087 	bhi.w	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004706:	f000 8086 	beq.w	8004816 <HAL_TIM_ConfigClockSource+0x172>
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470e:	d87f      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004710:	2b70      	cmp	r3, #112	; 0x70
 8004712:	d01a      	beq.n	800474a <HAL_TIM_ConfigClockSource+0xa6>
 8004714:	2b70      	cmp	r3, #112	; 0x70
 8004716:	d87b      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004718:	2b60      	cmp	r3, #96	; 0x60
 800471a:	d050      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x11a>
 800471c:	2b60      	cmp	r3, #96	; 0x60
 800471e:	d877      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004720:	2b50      	cmp	r3, #80	; 0x50
 8004722:	d03c      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xfa>
 8004724:	2b50      	cmp	r3, #80	; 0x50
 8004726:	d873      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	d058      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x13a>
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d86f      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b30      	cmp	r3, #48	; 0x30
 8004732:	d064      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 8004734:	2b30      	cmp	r3, #48	; 0x30
 8004736:	d86b      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004738:	2b20      	cmp	r3, #32
 800473a:	d060      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 800473c:	2b20      	cmp	r3, #32
 800473e:	d867      	bhi.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d05c      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 8004744:	2b10      	cmp	r3, #16
 8004746:	d05a      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x15a>
 8004748:	e062      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800475a:	f000 f987 	bl	8004a6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800476c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	609a      	str	r2, [r3, #8]
      break;
 8004776:	e04f      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004788:	f000 f970 	bl	8004a6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800479a:	609a      	str	r2, [r3, #8]
      break;
 800479c:	e03c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 f8e4 	bl	8004978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2150      	movs	r1, #80	; 0x50
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f93d 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 80047bc:	e02c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ca:	461a      	mov	r2, r3
 80047cc:	f000 f903 	bl	80049d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2160      	movs	r1, #96	; 0x60
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f92d 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 80047dc:	e01c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 f8c4 	bl	8004978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2140      	movs	r1, #64	; 0x40
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f91d 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 80047fc:	e00c      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f000 f914 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 800480e:	e003      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      break;
 8004814:	e000      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	fffeff88 	.word	0xfffeff88

08004838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a40      	ldr	r2, [pc, #256]	; (800494c <TIM_Base_SetConfig+0x114>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d00f      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3d      	ldr	r2, [pc, #244]	; (8004950 <TIM_Base_SetConfig+0x118>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00b      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3c      	ldr	r2, [pc, #240]	; (8004954 <TIM_Base_SetConfig+0x11c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3b      	ldr	r2, [pc, #236]	; (8004958 <TIM_Base_SetConfig+0x120>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3a      	ldr	r2, [pc, #232]	; (800495c <TIM_Base_SetConfig+0x124>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d108      	bne.n	800488a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2f      	ldr	r2, [pc, #188]	; (800494c <TIM_Base_SetConfig+0x114>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d02b      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d027      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2c      	ldr	r2, [pc, #176]	; (8004950 <TIM_Base_SetConfig+0x118>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d023      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2b      	ldr	r2, [pc, #172]	; (8004954 <TIM_Base_SetConfig+0x11c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01f      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <TIM_Base_SetConfig+0x120>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01b      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a29      	ldr	r2, [pc, #164]	; (800495c <TIM_Base_SetConfig+0x124>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d017      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a28      	ldr	r2, [pc, #160]	; (8004960 <TIM_Base_SetConfig+0x128>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a27      	ldr	r2, [pc, #156]	; (8004964 <TIM_Base_SetConfig+0x12c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00f      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a26      	ldr	r2, [pc, #152]	; (8004968 <TIM_Base_SetConfig+0x130>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00b      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a25      	ldr	r2, [pc, #148]	; (800496c <TIM_Base_SetConfig+0x134>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a24      	ldr	r2, [pc, #144]	; (8004970 <TIM_Base_SetConfig+0x138>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d003      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a23      	ldr	r2, [pc, #140]	; (8004974 <TIM_Base_SetConfig+0x13c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d108      	bne.n	80048fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a0a      	ldr	r2, [pc, #40]	; (800494c <TIM_Base_SetConfig+0x114>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_Base_SetConfig+0xf8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a0c      	ldr	r2, [pc, #48]	; (800495c <TIM_Base_SetConfig+0x124>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d103      	bne.n	8004938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	615a      	str	r2, [r3, #20]
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40010400 	.word	0x40010400
 8004960:	40014000 	.word	0x40014000
 8004964:	40014400 	.word	0x40014400
 8004968:	40014800 	.word	0x40014800
 800496c:	40001800 	.word	0x40001800
 8004970:	40001c00 	.word	0x40001c00
 8004974:	40002000 	.word	0x40002000

08004978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0201 	bic.w	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f023 030a 	bic.w	r3, r3, #10
 80049b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b087      	sub	sp, #28
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f023 0210 	bic.w	r2, r3, #16
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	031b      	lsls	r3, r3, #12
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f043 0307 	orr.w	r3, r3, #7
 8004a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	609a      	str	r2, [r3, #8]
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	021a      	lsls	r2, r3, #8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e06d      	b.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a30      	ldr	r2, [pc, #192]	; (8004bac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a2f      	ldr	r2, [pc, #188]	; (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d108      	bne.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004afe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a20      	ldr	r2, [pc, #128]	; (8004bac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d022      	beq.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b36:	d01d      	beq.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d018      	beq.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1a      	ldr	r2, [pc, #104]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00e      	beq.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d009      	beq.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d10c      	bne.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40010400 	.word	0x40010400
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40000c00 	.word	0x40000c00
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40001800 	.word	0x40001800

08004bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e040      	b.n	8004c5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc fa72 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2224      	movs	r2, #36	; 0x24
 8004bf4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f82c 	bl	8004c64 <UART_SetConfig>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e022      	b.n	8004c5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa84 	bl	800512c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fb0b 	bl	8005270 <UART_CheckIdleState>
 8004c5a:	4603      	mov	r3, r0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4ba6      	ldr	r3, [pc, #664]	; (8004f28 <UART_SetConfig+0x2c4>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	6979      	ldr	r1, [r7, #20]
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a94      	ldr	r2, [pc, #592]	; (8004f2c <UART_SetConfig+0x2c8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d120      	bne.n	8004d22 <UART_SetConfig+0xbe>
 8004ce0:	4b93      	ldr	r3, [pc, #588]	; (8004f30 <UART_SetConfig+0x2cc>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d816      	bhi.n	8004d1c <UART_SetConfig+0xb8>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0x90>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d05 	.word	0x08004d05
 8004cf8:	08004d11 	.word	0x08004d11
 8004cfc:	08004d0b 	.word	0x08004d0b
 8004d00:	08004d17 	.word	0x08004d17
 8004d04:	2301      	movs	r3, #1
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e150      	b.n	8004fac <UART_SetConfig+0x348>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e14d      	b.n	8004fac <UART_SetConfig+0x348>
 8004d10:	2304      	movs	r3, #4
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e14a      	b.n	8004fac <UART_SetConfig+0x348>
 8004d16:	2308      	movs	r3, #8
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e147      	b.n	8004fac <UART_SetConfig+0x348>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e144      	b.n	8004fac <UART_SetConfig+0x348>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a83      	ldr	r2, [pc, #524]	; (8004f34 <UART_SetConfig+0x2d0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d132      	bne.n	8004d92 <UART_SetConfig+0x12e>
 8004d2c:	4b80      	ldr	r3, [pc, #512]	; (8004f30 <UART_SetConfig+0x2cc>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d828      	bhi.n	8004d8c <UART_SetConfig+0x128>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0xdc>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d75 	.word	0x08004d75
 8004d44:	08004d8d 	.word	0x08004d8d
 8004d48:	08004d8d 	.word	0x08004d8d
 8004d4c:	08004d8d 	.word	0x08004d8d
 8004d50:	08004d81 	.word	0x08004d81
 8004d54:	08004d8d 	.word	0x08004d8d
 8004d58:	08004d8d 	.word	0x08004d8d
 8004d5c:	08004d8d 	.word	0x08004d8d
 8004d60:	08004d7b 	.word	0x08004d7b
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d8d 	.word	0x08004d8d
 8004d6c:	08004d8d 	.word	0x08004d8d
 8004d70:	08004d87 	.word	0x08004d87
 8004d74:	2300      	movs	r3, #0
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e118      	b.n	8004fac <UART_SetConfig+0x348>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e115      	b.n	8004fac <UART_SetConfig+0x348>
 8004d80:	2304      	movs	r3, #4
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e112      	b.n	8004fac <UART_SetConfig+0x348>
 8004d86:	2308      	movs	r3, #8
 8004d88:	77fb      	strb	r3, [r7, #31]
 8004d8a:	e10f      	b.n	8004fac <UART_SetConfig+0x348>
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e10c      	b.n	8004fac <UART_SetConfig+0x348>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a68      	ldr	r2, [pc, #416]	; (8004f38 <UART_SetConfig+0x2d4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d120      	bne.n	8004dde <UART_SetConfig+0x17a>
 8004d9c:	4b64      	ldr	r3, [pc, #400]	; (8004f30 <UART_SetConfig+0x2cc>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004da6:	2b30      	cmp	r3, #48	; 0x30
 8004da8:	d013      	beq.n	8004dd2 <UART_SetConfig+0x16e>
 8004daa:	2b30      	cmp	r3, #48	; 0x30
 8004dac:	d814      	bhi.n	8004dd8 <UART_SetConfig+0x174>
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d009      	beq.n	8004dc6 <UART_SetConfig+0x162>
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d810      	bhi.n	8004dd8 <UART_SetConfig+0x174>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <UART_SetConfig+0x15c>
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d006      	beq.n	8004dcc <UART_SetConfig+0x168>
 8004dbe:	e00b      	b.n	8004dd8 <UART_SetConfig+0x174>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	e0f2      	b.n	8004fac <UART_SetConfig+0x348>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	e0ef      	b.n	8004fac <UART_SetConfig+0x348>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e0ec      	b.n	8004fac <UART_SetConfig+0x348>
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e0e9      	b.n	8004fac <UART_SetConfig+0x348>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e0e6      	b.n	8004fac <UART_SetConfig+0x348>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a56      	ldr	r2, [pc, #344]	; (8004f3c <UART_SetConfig+0x2d8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d120      	bne.n	8004e2a <UART_SetConfig+0x1c6>
 8004de8:	4b51      	ldr	r3, [pc, #324]	; (8004f30 <UART_SetConfig+0x2cc>)
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004df2:	2bc0      	cmp	r3, #192	; 0xc0
 8004df4:	d013      	beq.n	8004e1e <UART_SetConfig+0x1ba>
 8004df6:	2bc0      	cmp	r3, #192	; 0xc0
 8004df8:	d814      	bhi.n	8004e24 <UART_SetConfig+0x1c0>
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d009      	beq.n	8004e12 <UART_SetConfig+0x1ae>
 8004dfe:	2b80      	cmp	r3, #128	; 0x80
 8004e00:	d810      	bhi.n	8004e24 <UART_SetConfig+0x1c0>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <UART_SetConfig+0x1a8>
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d006      	beq.n	8004e18 <UART_SetConfig+0x1b4>
 8004e0a:	e00b      	b.n	8004e24 <UART_SetConfig+0x1c0>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	77fb      	strb	r3, [r7, #31]
 8004e10:	e0cc      	b.n	8004fac <UART_SetConfig+0x348>
 8004e12:	2302      	movs	r3, #2
 8004e14:	77fb      	strb	r3, [r7, #31]
 8004e16:	e0c9      	b.n	8004fac <UART_SetConfig+0x348>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	e0c6      	b.n	8004fac <UART_SetConfig+0x348>
 8004e1e:	2308      	movs	r3, #8
 8004e20:	77fb      	strb	r3, [r7, #31]
 8004e22:	e0c3      	b.n	8004fac <UART_SetConfig+0x348>
 8004e24:	2310      	movs	r3, #16
 8004e26:	77fb      	strb	r3, [r7, #31]
 8004e28:	e0c0      	b.n	8004fac <UART_SetConfig+0x348>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a44      	ldr	r2, [pc, #272]	; (8004f40 <UART_SetConfig+0x2dc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d125      	bne.n	8004e80 <UART_SetConfig+0x21c>
 8004e34:	4b3e      	ldr	r3, [pc, #248]	; (8004f30 <UART_SetConfig+0x2cc>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e42:	d017      	beq.n	8004e74 <UART_SetConfig+0x210>
 8004e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e48:	d817      	bhi.n	8004e7a <UART_SetConfig+0x216>
 8004e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4e:	d00b      	beq.n	8004e68 <UART_SetConfig+0x204>
 8004e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e54:	d811      	bhi.n	8004e7a <UART_SetConfig+0x216>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <UART_SetConfig+0x1fe>
 8004e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5e:	d006      	beq.n	8004e6e <UART_SetConfig+0x20a>
 8004e60:	e00b      	b.n	8004e7a <UART_SetConfig+0x216>
 8004e62:	2300      	movs	r3, #0
 8004e64:	77fb      	strb	r3, [r7, #31]
 8004e66:	e0a1      	b.n	8004fac <UART_SetConfig+0x348>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e09e      	b.n	8004fac <UART_SetConfig+0x348>
 8004e6e:	2304      	movs	r3, #4
 8004e70:	77fb      	strb	r3, [r7, #31]
 8004e72:	e09b      	b.n	8004fac <UART_SetConfig+0x348>
 8004e74:	2308      	movs	r3, #8
 8004e76:	77fb      	strb	r3, [r7, #31]
 8004e78:	e098      	b.n	8004fac <UART_SetConfig+0x348>
 8004e7a:	2310      	movs	r3, #16
 8004e7c:	77fb      	strb	r3, [r7, #31]
 8004e7e:	e095      	b.n	8004fac <UART_SetConfig+0x348>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2f      	ldr	r2, [pc, #188]	; (8004f44 <UART_SetConfig+0x2e0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d125      	bne.n	8004ed6 <UART_SetConfig+0x272>
 8004e8a:	4b29      	ldr	r3, [pc, #164]	; (8004f30 <UART_SetConfig+0x2cc>)
 8004e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e98:	d017      	beq.n	8004eca <UART_SetConfig+0x266>
 8004e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e9e:	d817      	bhi.n	8004ed0 <UART_SetConfig+0x26c>
 8004ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea4:	d00b      	beq.n	8004ebe <UART_SetConfig+0x25a>
 8004ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eaa:	d811      	bhi.n	8004ed0 <UART_SetConfig+0x26c>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <UART_SetConfig+0x254>
 8004eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb4:	d006      	beq.n	8004ec4 <UART_SetConfig+0x260>
 8004eb6:	e00b      	b.n	8004ed0 <UART_SetConfig+0x26c>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e076      	b.n	8004fac <UART_SetConfig+0x348>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e073      	b.n	8004fac <UART_SetConfig+0x348>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e070      	b.n	8004fac <UART_SetConfig+0x348>
 8004eca:	2308      	movs	r3, #8
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e06d      	b.n	8004fac <UART_SetConfig+0x348>
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e06a      	b.n	8004fac <UART_SetConfig+0x348>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <UART_SetConfig+0x2e4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d138      	bne.n	8004f52 <UART_SetConfig+0x2ee>
 8004ee0:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <UART_SetConfig+0x2cc>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004eea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eee:	d017      	beq.n	8004f20 <UART_SetConfig+0x2bc>
 8004ef0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ef4:	d82a      	bhi.n	8004f4c <UART_SetConfig+0x2e8>
 8004ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efa:	d00b      	beq.n	8004f14 <UART_SetConfig+0x2b0>
 8004efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f00:	d824      	bhi.n	8004f4c <UART_SetConfig+0x2e8>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <UART_SetConfig+0x2aa>
 8004f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0a:	d006      	beq.n	8004f1a <UART_SetConfig+0x2b6>
 8004f0c:	e01e      	b.n	8004f4c <UART_SetConfig+0x2e8>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	77fb      	strb	r3, [r7, #31]
 8004f12:	e04b      	b.n	8004fac <UART_SetConfig+0x348>
 8004f14:	2302      	movs	r3, #2
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e048      	b.n	8004fac <UART_SetConfig+0x348>
 8004f1a:	2304      	movs	r3, #4
 8004f1c:	77fb      	strb	r3, [r7, #31]
 8004f1e:	e045      	b.n	8004fac <UART_SetConfig+0x348>
 8004f20:	2308      	movs	r3, #8
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e042      	b.n	8004fac <UART_SetConfig+0x348>
 8004f26:	bf00      	nop
 8004f28:	efff69f3 	.word	0xefff69f3
 8004f2c:	40011000 	.word	0x40011000
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40004400 	.word	0x40004400
 8004f38:	40004800 	.word	0x40004800
 8004f3c:	40004c00 	.word	0x40004c00
 8004f40:	40005000 	.word	0x40005000
 8004f44:	40011400 	.word	0x40011400
 8004f48:	40007800 	.word	0x40007800
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e02c      	b.n	8004fac <UART_SetConfig+0x348>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a72      	ldr	r2, [pc, #456]	; (8005120 <UART_SetConfig+0x4bc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d125      	bne.n	8004fa8 <UART_SetConfig+0x344>
 8004f5c:	4b71      	ldr	r3, [pc, #452]	; (8005124 <UART_SetConfig+0x4c0>)
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f6a:	d017      	beq.n	8004f9c <UART_SetConfig+0x338>
 8004f6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f70:	d817      	bhi.n	8004fa2 <UART_SetConfig+0x33e>
 8004f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f76:	d00b      	beq.n	8004f90 <UART_SetConfig+0x32c>
 8004f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7c:	d811      	bhi.n	8004fa2 <UART_SetConfig+0x33e>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <UART_SetConfig+0x326>
 8004f82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f86:	d006      	beq.n	8004f96 <UART_SetConfig+0x332>
 8004f88:	e00b      	b.n	8004fa2 <UART_SetConfig+0x33e>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e00d      	b.n	8004fac <UART_SetConfig+0x348>
 8004f90:	2302      	movs	r3, #2
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e00a      	b.n	8004fac <UART_SetConfig+0x348>
 8004f96:	2304      	movs	r3, #4
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e007      	b.n	8004fac <UART_SetConfig+0x348>
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e004      	b.n	8004fac <UART_SetConfig+0x348>
 8004fa2:	2310      	movs	r3, #16
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e001      	b.n	8004fac <UART_SetConfig+0x348>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb4:	d15b      	bne.n	800506e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004fb6:	7ffb      	ldrb	r3, [r7, #31]
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d828      	bhi.n	800500e <UART_SetConfig+0x3aa>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0x360>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	0800500f 	.word	0x0800500f
 8004fd4:	08004fff 	.word	0x08004fff
 8004fd8:	0800500f 	.word	0x0800500f
 8004fdc:	0800500f 	.word	0x0800500f
 8004fe0:	0800500f 	.word	0x0800500f
 8004fe4:	08005007 	.word	0x08005007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe8:	f7fe feb4 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8004fec:	61b8      	str	r0, [r7, #24]
        break;
 8004fee:	e013      	b.n	8005018 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff0:	f7fe fec4 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8004ff4:	61b8      	str	r0, [r7, #24]
        break;
 8004ff6:	e00f      	b.n	8005018 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	; (8005128 <UART_SetConfig+0x4c4>)
 8004ffa:	61bb      	str	r3, [r7, #24]
        break;
 8004ffc:	e00c      	b.n	8005018 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffe:	f7fe fd97 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8005002:	61b8      	str	r0, [r7, #24]
        break;
 8005004:	e008      	b.n	8005018 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500a:	61bb      	str	r3, [r7, #24]
        break;
 800500c:	e004      	b.n	8005018 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	77bb      	strb	r3, [r7, #30]
        break;
 8005016:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d074      	beq.n	8005108 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	005a      	lsls	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	441a      	add	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005032:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b0f      	cmp	r3, #15
 8005038:	d916      	bls.n	8005068 <UART_SetConfig+0x404>
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d212      	bcs.n	8005068 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f023 030f 	bic.w	r3, r3, #15
 800504a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	b29b      	uxth	r3, r3
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	b29a      	uxth	r2, r3
 8005058:	89fb      	ldrh	r3, [r7, #14]
 800505a:	4313      	orrs	r3, r2
 800505c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	89fa      	ldrh	r2, [r7, #14]
 8005064:	60da      	str	r2, [r3, #12]
 8005066:	e04f      	b.n	8005108 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	77bb      	strb	r3, [r7, #30]
 800506c:	e04c      	b.n	8005108 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800506e:	7ffb      	ldrb	r3, [r7, #31]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d828      	bhi.n	80050c6 <UART_SetConfig+0x462>
 8005074:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0x418>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050a9 	.word	0x080050a9
 8005084:	080050b1 	.word	0x080050b1
 8005088:	080050c7 	.word	0x080050c7
 800508c:	080050b7 	.word	0x080050b7
 8005090:	080050c7 	.word	0x080050c7
 8005094:	080050c7 	.word	0x080050c7
 8005098:	080050c7 	.word	0x080050c7
 800509c:	080050bf 	.word	0x080050bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a0:	f7fe fe58 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 80050a4:	61b8      	str	r0, [r7, #24]
        break;
 80050a6:	e013      	b.n	80050d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050a8:	f7fe fe68 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 80050ac:	61b8      	str	r0, [r7, #24]
        break;
 80050ae:	e00f      	b.n	80050d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b0:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <UART_SetConfig+0x4c4>)
 80050b2:	61bb      	str	r3, [r7, #24]
        break;
 80050b4:	e00c      	b.n	80050d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b6:	f7fe fd3b 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 80050ba:	61b8      	str	r0, [r7, #24]
        break;
 80050bc:	e008      	b.n	80050d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c2:	61bb      	str	r3, [r7, #24]
        break;
 80050c4:	e004      	b.n	80050d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	77bb      	strb	r3, [r7, #30]
        break;
 80050ce:	bf00      	nop
    }

    if (pclk != 0U)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d018      	beq.n	8005108 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	085a      	lsrs	r2, r3, #1
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	441a      	add	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b0f      	cmp	r3, #15
 80050ee:	d909      	bls.n	8005104 <UART_SetConfig+0x4a0>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f6:	d205      	bcs.n	8005104 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60da      	str	r2, [r3, #12]
 8005102:	e001      	b.n	8005108 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005114:	7fbb      	ldrb	r3, [r7, #30]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40007c00 	.word	0x40007c00
 8005124:	40023800 	.word	0x40023800
 8005128:	00f42400 	.word	0x00f42400

0800512c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01a      	beq.n	8005242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522a:	d10a      	bne.n	8005242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	605a      	str	r2, [r3, #4]
  }
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af02      	add	r7, sp, #8
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005280:	f7fc f94a 	bl	8001518 <HAL_GetTick>
 8005284:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b08      	cmp	r3, #8
 8005292:	d10e      	bne.n	80052b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f831 	bl	800530a <UART_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e027      	b.n	8005302 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d10e      	bne.n	80052de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f81b 	bl	800530a <UART_WaitOnFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e011      	b.n	8005302 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b09c      	sub	sp, #112	; 0x70
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	4613      	mov	r3, r2
 8005318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531a:	e0a7      	b.n	800546c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	f000 80a3 	beq.w	800546c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fc f8f7 	bl	8001518 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <UART_WaitOnFlagUntilTimeout+0x32>
 8005336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005338:	2b00      	cmp	r3, #0
 800533a:	d13f      	bne.n	80053bc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800534a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005350:	667b      	str	r3, [r7, #100]	; 0x64
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800535a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800535c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005360:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e6      	bne.n	800533c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3308      	adds	r3, #8
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	663b      	str	r3, [r7, #96]	; 0x60
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3308      	adds	r3, #8
 800538c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800538e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800539c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e5      	bne.n	800536e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e068      	b.n	800548e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d050      	beq.n	800546c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d8:	d148      	bne.n	800546c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005402:	637b      	str	r3, [r7, #52]	; 0x34
 8005404:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e6      	bne.n	80053e4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3308      	adds	r3, #8
 800541c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	613b      	str	r3, [r7, #16]
   return(result);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f023 0301 	bic.w	r3, r3, #1
 800542c:	66bb      	str	r3, [r7, #104]	; 0x68
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3308      	adds	r3, #8
 8005434:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005436:	623a      	str	r2, [r7, #32]
 8005438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	69f9      	ldr	r1, [r7, #28]
 800543c:	6a3a      	ldr	r2, [r7, #32]
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	61bb      	str	r3, [r7, #24]
   return(result);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e5      	bne.n	8005416 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e010      	b.n	800548e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	429a      	cmp	r2, r3
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	429a      	cmp	r2, r3
 8005488:	f43f af48 	beq.w	800531c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3770      	adds	r7, #112	; 0x70
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005498:	b084      	sub	sp, #16
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	f107 001c 	add.w	r0, r7, #28
 80054a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d120      	bne.n	80054f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	4b20      	ldr	r3, [pc, #128]	; (8005544 <USB_CoreInit+0xac>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d105      	bne.n	80054e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa96 	bl	8005a18 <USB_CoreReset>
 80054ec:	4603      	mov	r3, r0
 80054ee:	73fb      	strb	r3, [r7, #15]
 80054f0:	e010      	b.n	8005514 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fa8a 	bl	8005a18 <USB_CoreReset>
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	2b01      	cmp	r3, #1
 8005518:	d10b      	bne.n	8005532 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f043 0206 	orr.w	r2, r3, #6
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005532:	7bfb      	ldrb	r3, [r7, #15]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800553e:	b004      	add	sp, #16
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	ffbdffbf 	.word	0xffbdffbf

08005548 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f023 0201 	bic.w	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	460b      	mov	r3, r1
 8005574:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d115      	bne.n	80055b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005598:	2001      	movs	r0, #1
 800559a:	f7fb ffc9 	bl	8001530 <HAL_Delay>
      ms++;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fa29 	bl	80059fc <USB_GetMode>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d01e      	beq.n	80055ee <USB_SetCurrentMode+0x84>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b31      	cmp	r3, #49	; 0x31
 80055b4:	d9f0      	bls.n	8005598 <USB_SetCurrentMode+0x2e>
 80055b6:	e01a      	b.n	80055ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d115      	bne.n	80055ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055ca:	2001      	movs	r0, #1
 80055cc:	f7fb ffb0 	bl	8001530 <HAL_Delay>
      ms++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3301      	adds	r3, #1
 80055d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa10 	bl	80059fc <USB_GetMode>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <USB_SetCurrentMode+0x84>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b31      	cmp	r3, #49	; 0x31
 80055e6:	d9f0      	bls.n	80055ca <USB_SetCurrentMode+0x60>
 80055e8:	e001      	b.n	80055ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e005      	b.n	80055fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b32      	cmp	r3, #50	; 0x32
 80055f2:	d101      	bne.n	80055f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005604:	b084      	sub	sp, #16
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e009      	b.n	8005638 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	3340      	adds	r3, #64	; 0x40
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	2200      	movs	r2, #0
 8005630:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3301      	adds	r3, #1
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b0e      	cmp	r3, #14
 800563c:	d9f2      	bls.n	8005624 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800563e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d11c      	bne.n	800567e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	e005      	b.n	800568a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005690:	461a      	mov	r2, r3
 8005692:	2300      	movs	r3, #0
 8005694:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569c:	4619      	mov	r1, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a4:	461a      	mov	r2, r3
 80056a6:	680b      	ldr	r3, [r1, #0]
 80056a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d10c      	bne.n	80056ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d104      	bne.n	80056c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056b6:	2100      	movs	r1, #0
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f965 	bl	8005988 <USB_SetDevSpeed>
 80056be:	e008      	b.n	80056d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056c0:	2101      	movs	r1, #1
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f960 	bl	8005988 <USB_SetDevSpeed>
 80056c8:	e003      	b.n	80056d2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056ca:	2103      	movs	r1, #3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f95b 	bl	8005988 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056d2:	2110      	movs	r1, #16
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f8f3 	bl	80058c0 <USB_FlushTxFifo>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f91f 	bl	8005928 <USB_FlushRxFifo>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	461a      	mov	r2, r3
 80056fc:	2300      	movs	r3, #0
 80056fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	461a      	mov	r2, r3
 8005708:	2300      	movs	r3, #0
 800570a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	461a      	mov	r2, r3
 8005714:	2300      	movs	r3, #0
 8005716:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005718:	2300      	movs	r3, #0
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e043      	b.n	80057a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005734:	d118      	bne.n	8005768 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	e013      	b.n	800577a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575e:	461a      	mov	r2, r3
 8005760:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e008      	b.n	800577a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	461a      	mov	r2, r3
 8005776:	2300      	movs	r3, #0
 8005778:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005786:	461a      	mov	r2, r3
 8005788:	2300      	movs	r3, #0
 800578a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005798:	461a      	mov	r2, r3
 800579a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800579e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	3301      	adds	r3, #1
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d3b7      	bcc.n	800571e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	e043      	b.n	800583c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ca:	d118      	bne.n	80057fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	461a      	mov	r2, r3
 80057e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	e013      	b.n	8005810 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	461a      	mov	r2, r3
 80057f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	e008      	b.n	8005810 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	461a      	mov	r2, r3
 800580c:	2300      	movs	r3, #0
 800580e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581c:	461a      	mov	r2, r3
 800581e:	2300      	movs	r3, #0
 8005820:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	461a      	mov	r2, r3
 8005830:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005834:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	3301      	adds	r3, #1
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	429a      	cmp	r2, r3
 8005842:	d3b7      	bcc.n	80057b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005856:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005864:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	2b00      	cmp	r3, #0
 800586a:	d105      	bne.n	8005878 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f043 0210 	orr.w	r2, r3, #16
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <USB_DevInit+0x2b4>)
 800587e:	4313      	orrs	r3, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f043 0208 	orr.w	r2, r3, #8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d105      	bne.n	80058a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699a      	ldr	r2, [r3, #24]
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <USB_DevInit+0x2b8>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b4:	b004      	add	sp, #16
 80058b6:	4770      	bx	lr
 80058b8:	803c3800 	.word	0x803c3800
 80058bc:	40000004 	.word	0x40000004

080058c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3301      	adds	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a13      	ldr	r2, [pc, #76]	; (8005924 <USB_FlushTxFifo+0x64>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d901      	bls.n	80058e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e01b      	b.n	8005918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	daf2      	bge.n	80058ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	019b      	lsls	r3, r3, #6
 80058f0:	f043 0220 	orr.w	r2, r3, #32
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a08      	ldr	r2, [pc, #32]	; (8005924 <USB_FlushTxFifo+0x64>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d901      	bls.n	800590a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e006      	b.n	8005918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b20      	cmp	r3, #32
 8005914:	d0f0      	beq.n	80058f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	00030d40 	.word	0x00030d40

08005928 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a11      	ldr	r2, [pc, #68]	; (8005984 <USB_FlushRxFifo+0x5c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e018      	b.n	8005978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	daf2      	bge.n	8005934 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2210      	movs	r2, #16
 8005956:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4a08      	ldr	r2, [pc, #32]	; (8005984 <USB_FlushRxFifo+0x5c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e006      	b.n	8005978 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b10      	cmp	r3, #16
 8005974:	d0f0      	beq.n	8005958 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	00030d40 	.word	0x00030d40

08005988 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	68f9      	ldr	r1, [r7, #12]
 80059a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a8:	4313      	orrs	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059d4:	f023 0303 	bic.w	r3, r3, #3
 80059d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e8:	f043 0302 	orr.w	r3, r3, #2
 80059ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	f003 0301 	and.w	r3, r3, #1
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a13      	ldr	r2, [pc, #76]	; (8005a7c <USB_CoreReset+0x64>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d901      	bls.n	8005a36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e01b      	b.n	8005a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	daf2      	bge.n	8005a24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f043 0201 	orr.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3301      	adds	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <USB_CoreReset+0x64>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d901      	bls.n	8005a60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e006      	b.n	8005a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d0f0      	beq.n	8005a4e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	00030d40 	.word	0x00030d40

08005a80 <std>:
 8005a80:	2300      	movs	r3, #0
 8005a82:	b510      	push	{r4, lr}
 8005a84:	4604      	mov	r4, r0
 8005a86:	e9c0 3300 	strd	r3, r3, [r0]
 8005a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a8e:	6083      	str	r3, [r0, #8]
 8005a90:	8181      	strh	r1, [r0, #12]
 8005a92:	6643      	str	r3, [r0, #100]	; 0x64
 8005a94:	81c2      	strh	r2, [r0, #14]
 8005a96:	6183      	str	r3, [r0, #24]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	305c      	adds	r0, #92	; 0x5c
 8005a9e:	f000 f9e5 	bl	8005e6c <memset>
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <std+0x58>)
 8005aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <std+0x5c>)
 8005aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005aaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <std+0x60>)
 8005aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005aae:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <std+0x64>)
 8005ab0:	6323      	str	r3, [r4, #48]	; 0x30
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <std+0x68>)
 8005ab4:	6224      	str	r4, [r4, #32]
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	d006      	beq.n	8005ac8 <std+0x48>
 8005aba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005abe:	4294      	cmp	r4, r2
 8005ac0:	d002      	beq.n	8005ac8 <std+0x48>
 8005ac2:	33d0      	adds	r3, #208	; 0xd0
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	d105      	bne.n	8005ad4 <std+0x54>
 8005ac8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad0:	f000 ba44 	b.w	8005f5c <__retarget_lock_init_recursive>
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	bf00      	nop
 8005ad8:	08005cbd 	.word	0x08005cbd
 8005adc:	08005cdf 	.word	0x08005cdf
 8005ae0:	08005d17 	.word	0x08005d17
 8005ae4:	08005d3b 	.word	0x08005d3b
 8005ae8:	2000095c 	.word	0x2000095c

08005aec <stdio_exit_handler>:
 8005aec:	4a02      	ldr	r2, [pc, #8]	; (8005af8 <stdio_exit_handler+0xc>)
 8005aee:	4903      	ldr	r1, [pc, #12]	; (8005afc <stdio_exit_handler+0x10>)
 8005af0:	4803      	ldr	r0, [pc, #12]	; (8005b00 <stdio_exit_handler+0x14>)
 8005af2:	f000 b869 	b.w	8005bc8 <_fwalk_sglue>
 8005af6:	bf00      	nop
 8005af8:	20000010 	.word	0x20000010
 8005afc:	08006261 	.word	0x08006261
 8005b00:	2000001c 	.word	0x2000001c

08005b04 <cleanup_stdio>:
 8005b04:	6841      	ldr	r1, [r0, #4]
 8005b06:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <cleanup_stdio+0x34>)
 8005b08:	4299      	cmp	r1, r3
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	d001      	beq.n	8005b14 <cleanup_stdio+0x10>
 8005b10:	f000 fba6 	bl	8006260 <_fflush_r>
 8005b14:	68a1      	ldr	r1, [r4, #8]
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <cleanup_stdio+0x38>)
 8005b18:	4299      	cmp	r1, r3
 8005b1a:	d002      	beq.n	8005b22 <cleanup_stdio+0x1e>
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 fb9f 	bl	8006260 <_fflush_r>
 8005b22:	68e1      	ldr	r1, [r4, #12]
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <cleanup_stdio+0x3c>)
 8005b26:	4299      	cmp	r1, r3
 8005b28:	d004      	beq.n	8005b34 <cleanup_stdio+0x30>
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b30:	f000 bb96 	b.w	8006260 <_fflush_r>
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	bf00      	nop
 8005b38:	2000095c 	.word	0x2000095c
 8005b3c:	200009c4 	.word	0x200009c4
 8005b40:	20000a2c 	.word	0x20000a2c

08005b44 <global_stdio_init.part.0>:
 8005b44:	b510      	push	{r4, lr}
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <global_stdio_init.part.0+0x30>)
 8005b48:	4c0b      	ldr	r4, [pc, #44]	; (8005b78 <global_stdio_init.part.0+0x34>)
 8005b4a:	4a0c      	ldr	r2, [pc, #48]	; (8005b7c <global_stdio_init.part.0+0x38>)
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	4620      	mov	r0, r4
 8005b50:	2200      	movs	r2, #0
 8005b52:	2104      	movs	r1, #4
 8005b54:	f7ff ff94 	bl	8005a80 <std>
 8005b58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	2109      	movs	r1, #9
 8005b60:	f7ff ff8e 	bl	8005a80 <std>
 8005b64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b68:	2202      	movs	r2, #2
 8005b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6e:	2112      	movs	r1, #18
 8005b70:	f7ff bf86 	b.w	8005a80 <std>
 8005b74:	20000a94 	.word	0x20000a94
 8005b78:	2000095c 	.word	0x2000095c
 8005b7c:	08005aed 	.word	0x08005aed

08005b80 <__sfp_lock_acquire>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__sfp_lock_acquire+0x8>)
 8005b82:	f000 b9ec 	b.w	8005f5e <__retarget_lock_acquire_recursive>
 8005b86:	bf00      	nop
 8005b88:	20000a9d 	.word	0x20000a9d

08005b8c <__sfp_lock_release>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__sfp_lock_release+0x8>)
 8005b8e:	f000 b9e7 	b.w	8005f60 <__retarget_lock_release_recursive>
 8005b92:	bf00      	nop
 8005b94:	20000a9d 	.word	0x20000a9d

08005b98 <__sinit>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	f7ff fff0 	bl	8005b80 <__sfp_lock_acquire>
 8005ba0:	6a23      	ldr	r3, [r4, #32]
 8005ba2:	b11b      	cbz	r3, 8005bac <__sinit+0x14>
 8005ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba8:	f7ff bff0 	b.w	8005b8c <__sfp_lock_release>
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <__sinit+0x28>)
 8005bae:	6223      	str	r3, [r4, #32]
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <__sinit+0x2c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f5      	bne.n	8005ba4 <__sinit+0xc>
 8005bb8:	f7ff ffc4 	bl	8005b44 <global_stdio_init.part.0>
 8005bbc:	e7f2      	b.n	8005ba4 <__sinit+0xc>
 8005bbe:	bf00      	nop
 8005bc0:	08005b05 	.word	0x08005b05
 8005bc4:	20000a94 	.word	0x20000a94

08005bc8 <_fwalk_sglue>:
 8005bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bcc:	4607      	mov	r7, r0
 8005bce:	4688      	mov	r8, r1
 8005bd0:	4614      	mov	r4, r2
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bd8:	f1b9 0901 	subs.w	r9, r9, #1
 8005bdc:	d505      	bpl.n	8005bea <_fwalk_sglue+0x22>
 8005bde:	6824      	ldr	r4, [r4, #0]
 8005be0:	2c00      	cmp	r4, #0
 8005be2:	d1f7      	bne.n	8005bd4 <_fwalk_sglue+0xc>
 8005be4:	4630      	mov	r0, r6
 8005be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bea:	89ab      	ldrh	r3, [r5, #12]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d907      	bls.n	8005c00 <_fwalk_sglue+0x38>
 8005bf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	d003      	beq.n	8005c00 <_fwalk_sglue+0x38>
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	47c0      	blx	r8
 8005bfe:	4306      	orrs	r6, r0
 8005c00:	3568      	adds	r5, #104	; 0x68
 8005c02:	e7e9      	b.n	8005bd8 <_fwalk_sglue+0x10>

08005c04 <_puts_r>:
 8005c04:	6a03      	ldr	r3, [r0, #32]
 8005c06:	b570      	push	{r4, r5, r6, lr}
 8005c08:	6884      	ldr	r4, [r0, #8]
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	460e      	mov	r6, r1
 8005c0e:	b90b      	cbnz	r3, 8005c14 <_puts_r+0x10>
 8005c10:	f7ff ffc2 	bl	8005b98 <__sinit>
 8005c14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c16:	07db      	lsls	r3, r3, #31
 8005c18:	d405      	bmi.n	8005c26 <_puts_r+0x22>
 8005c1a:	89a3      	ldrh	r3, [r4, #12]
 8005c1c:	0598      	lsls	r0, r3, #22
 8005c1e:	d402      	bmi.n	8005c26 <_puts_r+0x22>
 8005c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c22:	f000 f99c 	bl	8005f5e <__retarget_lock_acquire_recursive>
 8005c26:	89a3      	ldrh	r3, [r4, #12]
 8005c28:	0719      	lsls	r1, r3, #28
 8005c2a:	d513      	bpl.n	8005c54 <_puts_r+0x50>
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	b18b      	cbz	r3, 8005c54 <_puts_r+0x50>
 8005c30:	3e01      	subs	r6, #1
 8005c32:	68a3      	ldr	r3, [r4, #8]
 8005c34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	60a3      	str	r3, [r4, #8]
 8005c3c:	b9e9      	cbnz	r1, 8005c7a <_puts_r+0x76>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da2e      	bge.n	8005ca0 <_puts_r+0x9c>
 8005c42:	4622      	mov	r2, r4
 8005c44:	210a      	movs	r1, #10
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 f87b 	bl	8005d42 <__swbuf_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d007      	beq.n	8005c60 <_puts_r+0x5c>
 8005c50:	250a      	movs	r5, #10
 8005c52:	e007      	b.n	8005c64 <_puts_r+0x60>
 8005c54:	4621      	mov	r1, r4
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 f8b0 	bl	8005dbc <__swsetup_r>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d0e7      	beq.n	8005c30 <_puts_r+0x2c>
 8005c60:	f04f 35ff 	mov.w	r5, #4294967295
 8005c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c66:	07da      	lsls	r2, r3, #31
 8005c68:	d405      	bmi.n	8005c76 <_puts_r+0x72>
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	059b      	lsls	r3, r3, #22
 8005c6e:	d402      	bmi.n	8005c76 <_puts_r+0x72>
 8005c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c72:	f000 f975 	bl	8005f60 <__retarget_lock_release_recursive>
 8005c76:	4628      	mov	r0, r5
 8005c78:	bd70      	pop	{r4, r5, r6, pc}
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da04      	bge.n	8005c88 <_puts_r+0x84>
 8005c7e:	69a2      	ldr	r2, [r4, #24]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	dc06      	bgt.n	8005c92 <_puts_r+0x8e>
 8005c84:	290a      	cmp	r1, #10
 8005c86:	d004      	beq.n	8005c92 <_puts_r+0x8e>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	6022      	str	r2, [r4, #0]
 8005c8e:	7019      	strb	r1, [r3, #0]
 8005c90:	e7cf      	b.n	8005c32 <_puts_r+0x2e>
 8005c92:	4622      	mov	r2, r4
 8005c94:	4628      	mov	r0, r5
 8005c96:	f000 f854 	bl	8005d42 <__swbuf_r>
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d1c9      	bne.n	8005c32 <_puts_r+0x2e>
 8005c9e:	e7df      	b.n	8005c60 <_puts_r+0x5c>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	250a      	movs	r5, #10
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	6022      	str	r2, [r4, #0]
 8005ca8:	701d      	strb	r5, [r3, #0]
 8005caa:	e7db      	b.n	8005c64 <_puts_r+0x60>

08005cac <puts>:
 8005cac:	4b02      	ldr	r3, [pc, #8]	; (8005cb8 <puts+0xc>)
 8005cae:	4601      	mov	r1, r0
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	f7ff bfa7 	b.w	8005c04 <_puts_r>
 8005cb6:	bf00      	nop
 8005cb8:	20000068 	.word	0x20000068

08005cbc <__sread>:
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc4:	f000 f8fc 	bl	8005ec0 <_read_r>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	bfab      	itete	ge
 8005ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cce:	89a3      	ldrhlt	r3, [r4, #12]
 8005cd0:	181b      	addge	r3, r3, r0
 8005cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cd6:	bfac      	ite	ge
 8005cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cda:	81a3      	strhlt	r3, [r4, #12]
 8005cdc:	bd10      	pop	{r4, pc}

08005cde <__swrite>:
 8005cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce2:	461f      	mov	r7, r3
 8005ce4:	898b      	ldrh	r3, [r1, #12]
 8005ce6:	05db      	lsls	r3, r3, #23
 8005ce8:	4605      	mov	r5, r0
 8005cea:	460c      	mov	r4, r1
 8005cec:	4616      	mov	r6, r2
 8005cee:	d505      	bpl.n	8005cfc <__swrite+0x1e>
 8005cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f000 f8d0 	bl	8005e9c <_lseek_r>
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d06:	81a3      	strh	r3, [r4, #12]
 8005d08:	4632      	mov	r2, r6
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d12:	f000 b8e7 	b.w	8005ee4 <_write_r>

08005d16 <__sseek>:
 8005d16:	b510      	push	{r4, lr}
 8005d18:	460c      	mov	r4, r1
 8005d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d1e:	f000 f8bd 	bl	8005e9c <_lseek_r>
 8005d22:	1c43      	adds	r3, r0, #1
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	bf15      	itete	ne
 8005d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d32:	81a3      	strheq	r3, [r4, #12]
 8005d34:	bf18      	it	ne
 8005d36:	81a3      	strhne	r3, [r4, #12]
 8005d38:	bd10      	pop	{r4, pc}

08005d3a <__sclose>:
 8005d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d3e:	f000 b89d 	b.w	8005e7c <_close_r>

08005d42 <__swbuf_r>:
 8005d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d44:	460e      	mov	r6, r1
 8005d46:	4614      	mov	r4, r2
 8005d48:	4605      	mov	r5, r0
 8005d4a:	b118      	cbz	r0, 8005d54 <__swbuf_r+0x12>
 8005d4c:	6a03      	ldr	r3, [r0, #32]
 8005d4e:	b90b      	cbnz	r3, 8005d54 <__swbuf_r+0x12>
 8005d50:	f7ff ff22 	bl	8005b98 <__sinit>
 8005d54:	69a3      	ldr	r3, [r4, #24]
 8005d56:	60a3      	str	r3, [r4, #8]
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	071a      	lsls	r2, r3, #28
 8005d5c:	d525      	bpl.n	8005daa <__swbuf_r+0x68>
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	b31b      	cbz	r3, 8005daa <__swbuf_r+0x68>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	6922      	ldr	r2, [r4, #16]
 8005d66:	1a98      	subs	r0, r3, r2
 8005d68:	6963      	ldr	r3, [r4, #20]
 8005d6a:	b2f6      	uxtb	r6, r6
 8005d6c:	4283      	cmp	r3, r0
 8005d6e:	4637      	mov	r7, r6
 8005d70:	dc04      	bgt.n	8005d7c <__swbuf_r+0x3a>
 8005d72:	4621      	mov	r1, r4
 8005d74:	4628      	mov	r0, r5
 8005d76:	f000 fa73 	bl	8006260 <_fflush_r>
 8005d7a:	b9e0      	cbnz	r0, 8005db6 <__swbuf_r+0x74>
 8005d7c:	68a3      	ldr	r3, [r4, #8]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	60a3      	str	r3, [r4, #8]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	6022      	str	r2, [r4, #0]
 8005d88:	701e      	strb	r6, [r3, #0]
 8005d8a:	6962      	ldr	r2, [r4, #20]
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d004      	beq.n	8005d9c <__swbuf_r+0x5a>
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	07db      	lsls	r3, r3, #31
 8005d96:	d506      	bpl.n	8005da6 <__swbuf_r+0x64>
 8005d98:	2e0a      	cmp	r6, #10
 8005d9a:	d104      	bne.n	8005da6 <__swbuf_r+0x64>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 fa5e 	bl	8006260 <_fflush_r>
 8005da4:	b938      	cbnz	r0, 8005db6 <__swbuf_r+0x74>
 8005da6:	4638      	mov	r0, r7
 8005da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005daa:	4621      	mov	r1, r4
 8005dac:	4628      	mov	r0, r5
 8005dae:	f000 f805 	bl	8005dbc <__swsetup_r>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	d0d5      	beq.n	8005d62 <__swbuf_r+0x20>
 8005db6:	f04f 37ff 	mov.w	r7, #4294967295
 8005dba:	e7f4      	b.n	8005da6 <__swbuf_r+0x64>

08005dbc <__swsetup_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4b2a      	ldr	r3, [pc, #168]	; (8005e68 <__swsetup_r+0xac>)
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	b118      	cbz	r0, 8005dd0 <__swsetup_r+0x14>
 8005dc8:	6a03      	ldr	r3, [r0, #32]
 8005dca:	b90b      	cbnz	r3, 8005dd0 <__swsetup_r+0x14>
 8005dcc:	f7ff fee4 	bl	8005b98 <__sinit>
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dd6:	0718      	lsls	r0, r3, #28
 8005dd8:	d422      	bmi.n	8005e20 <__swsetup_r+0x64>
 8005dda:	06d9      	lsls	r1, r3, #27
 8005ddc:	d407      	bmi.n	8005dee <__swsetup_r+0x32>
 8005dde:	2309      	movs	r3, #9
 8005de0:	602b      	str	r3, [r5, #0]
 8005de2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dec:	e034      	b.n	8005e58 <__swsetup_r+0x9c>
 8005dee:	0758      	lsls	r0, r3, #29
 8005df0:	d512      	bpl.n	8005e18 <__swsetup_r+0x5c>
 8005df2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005df4:	b141      	cbz	r1, 8005e08 <__swsetup_r+0x4c>
 8005df6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dfa:	4299      	cmp	r1, r3
 8005dfc:	d002      	beq.n	8005e04 <__swsetup_r+0x48>
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 f8b0 	bl	8005f64 <_free_r>
 8005e04:	2300      	movs	r3, #0
 8005e06:	6363      	str	r3, [r4, #52]	; 0x34
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e0e:	81a3      	strh	r3, [r4, #12]
 8005e10:	2300      	movs	r3, #0
 8005e12:	6063      	str	r3, [r4, #4]
 8005e14:	6923      	ldr	r3, [r4, #16]
 8005e16:	6023      	str	r3, [r4, #0]
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	f043 0308 	orr.w	r3, r3, #8
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	6923      	ldr	r3, [r4, #16]
 8005e22:	b94b      	cbnz	r3, 8005e38 <__swsetup_r+0x7c>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2e:	d003      	beq.n	8005e38 <__swsetup_r+0x7c>
 8005e30:	4621      	mov	r1, r4
 8005e32:	4628      	mov	r0, r5
 8005e34:	f000 fa62 	bl	80062fc <__smakebuf_r>
 8005e38:	89a0      	ldrh	r0, [r4, #12]
 8005e3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e3e:	f010 0301 	ands.w	r3, r0, #1
 8005e42:	d00a      	beq.n	8005e5a <__swsetup_r+0x9e>
 8005e44:	2300      	movs	r3, #0
 8005e46:	60a3      	str	r3, [r4, #8]
 8005e48:	6963      	ldr	r3, [r4, #20]
 8005e4a:	425b      	negs	r3, r3
 8005e4c:	61a3      	str	r3, [r4, #24]
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	b943      	cbnz	r3, 8005e64 <__swsetup_r+0xa8>
 8005e52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e56:	d1c4      	bne.n	8005de2 <__swsetup_r+0x26>
 8005e58:	bd38      	pop	{r3, r4, r5, pc}
 8005e5a:	0781      	lsls	r1, r0, #30
 8005e5c:	bf58      	it	pl
 8005e5e:	6963      	ldrpl	r3, [r4, #20]
 8005e60:	60a3      	str	r3, [r4, #8]
 8005e62:	e7f4      	b.n	8005e4e <__swsetup_r+0x92>
 8005e64:	2000      	movs	r0, #0
 8005e66:	e7f7      	b.n	8005e58 <__swsetup_r+0x9c>
 8005e68:	20000068 	.word	0x20000068

08005e6c <memset>:
 8005e6c:	4402      	add	r2, r0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d100      	bne.n	8005e76 <memset+0xa>
 8005e74:	4770      	bx	lr
 8005e76:	f803 1b01 	strb.w	r1, [r3], #1
 8005e7a:	e7f9      	b.n	8005e70 <memset+0x4>

08005e7c <_close_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	4d06      	ldr	r5, [pc, #24]	; (8005e98 <_close_r+0x1c>)
 8005e80:	2300      	movs	r3, #0
 8005e82:	4604      	mov	r4, r0
 8005e84:	4608      	mov	r0, r1
 8005e86:	602b      	str	r3, [r5, #0]
 8005e88:	f7fb fa4f 	bl	800132a <_close>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_close_r+0x1a>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_close_r+0x1a>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	20000a98 	.word	0x20000a98

08005e9c <_lseek_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d07      	ldr	r5, [pc, #28]	; (8005ebc <_lseek_r+0x20>)
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	602a      	str	r2, [r5, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f7fb fa64 	bl	8001378 <_lseek>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_lseek_r+0x1e>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_lseek_r+0x1e>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	20000a98 	.word	0x20000a98

08005ec0 <_read_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4d07      	ldr	r5, [pc, #28]	; (8005ee0 <_read_r+0x20>)
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	4608      	mov	r0, r1
 8005ec8:	4611      	mov	r1, r2
 8005eca:	2200      	movs	r2, #0
 8005ecc:	602a      	str	r2, [r5, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f7fb fa0e 	bl	80012f0 <_read>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_read_r+0x1e>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_read_r+0x1e>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	20000a98 	.word	0x20000a98

08005ee4 <_write_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4d07      	ldr	r5, [pc, #28]	; (8005f04 <_write_r+0x20>)
 8005ee8:	4604      	mov	r4, r0
 8005eea:	4608      	mov	r0, r1
 8005eec:	4611      	mov	r1, r2
 8005eee:	2200      	movs	r2, #0
 8005ef0:	602a      	str	r2, [r5, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f7fa fb45 	bl	8000582 <_write>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d102      	bne.n	8005f02 <_write_r+0x1e>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	b103      	cbz	r3, 8005f02 <_write_r+0x1e>
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
 8005f04:	20000a98 	.word	0x20000a98

08005f08 <__errno>:
 8005f08:	4b01      	ldr	r3, [pc, #4]	; (8005f10 <__errno+0x8>)
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20000068 	.word	0x20000068

08005f14 <__libc_init_array>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	4d0d      	ldr	r5, [pc, #52]	; (8005f4c <__libc_init_array+0x38>)
 8005f18:	4c0d      	ldr	r4, [pc, #52]	; (8005f50 <__libc_init_array+0x3c>)
 8005f1a:	1b64      	subs	r4, r4, r5
 8005f1c:	10a4      	asrs	r4, r4, #2
 8005f1e:	2600      	movs	r6, #0
 8005f20:	42a6      	cmp	r6, r4
 8005f22:	d109      	bne.n	8005f38 <__libc_init_array+0x24>
 8005f24:	4d0b      	ldr	r5, [pc, #44]	; (8005f54 <__libc_init_array+0x40>)
 8005f26:	4c0c      	ldr	r4, [pc, #48]	; (8005f58 <__libc_init_array+0x44>)
 8005f28:	f000 fa56 	bl	80063d8 <_init>
 8005f2c:	1b64      	subs	r4, r4, r5
 8005f2e:	10a4      	asrs	r4, r4, #2
 8005f30:	2600      	movs	r6, #0
 8005f32:	42a6      	cmp	r6, r4
 8005f34:	d105      	bne.n	8005f42 <__libc_init_array+0x2e>
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3c:	4798      	blx	r3
 8005f3e:	3601      	adds	r6, #1
 8005f40:	e7ee      	b.n	8005f20 <__libc_init_array+0xc>
 8005f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f46:	4798      	blx	r3
 8005f48:	3601      	adds	r6, #1
 8005f4a:	e7f2      	b.n	8005f32 <__libc_init_array+0x1e>
 8005f4c:	0800643c 	.word	0x0800643c
 8005f50:	0800643c 	.word	0x0800643c
 8005f54:	0800643c 	.word	0x0800643c
 8005f58:	08006440 	.word	0x08006440

08005f5c <__retarget_lock_init_recursive>:
 8005f5c:	4770      	bx	lr

08005f5e <__retarget_lock_acquire_recursive>:
 8005f5e:	4770      	bx	lr

08005f60 <__retarget_lock_release_recursive>:
 8005f60:	4770      	bx	lr
	...

08005f64 <_free_r>:
 8005f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f66:	2900      	cmp	r1, #0
 8005f68:	d044      	beq.n	8005ff4 <_free_r+0x90>
 8005f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6e:	9001      	str	r0, [sp, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f1a1 0404 	sub.w	r4, r1, #4
 8005f76:	bfb8      	it	lt
 8005f78:	18e4      	addlt	r4, r4, r3
 8005f7a:	f000 f8df 	bl	800613c <__malloc_lock>
 8005f7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ff8 <_free_r+0x94>)
 8005f80:	9801      	ldr	r0, [sp, #4]
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	b933      	cbnz	r3, 8005f94 <_free_r+0x30>
 8005f86:	6063      	str	r3, [r4, #4]
 8005f88:	6014      	str	r4, [r2, #0]
 8005f8a:	b003      	add	sp, #12
 8005f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f90:	f000 b8da 	b.w	8006148 <__malloc_unlock>
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d908      	bls.n	8005faa <_free_r+0x46>
 8005f98:	6825      	ldr	r5, [r4, #0]
 8005f9a:	1961      	adds	r1, r4, r5
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	bf01      	itttt	eq
 8005fa0:	6819      	ldreq	r1, [r3, #0]
 8005fa2:	685b      	ldreq	r3, [r3, #4]
 8005fa4:	1949      	addeq	r1, r1, r5
 8005fa6:	6021      	streq	r1, [r4, #0]
 8005fa8:	e7ed      	b.n	8005f86 <_free_r+0x22>
 8005faa:	461a      	mov	r2, r3
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	b10b      	cbz	r3, 8005fb4 <_free_r+0x50>
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	d9fa      	bls.n	8005faa <_free_r+0x46>
 8005fb4:	6811      	ldr	r1, [r2, #0]
 8005fb6:	1855      	adds	r5, r2, r1
 8005fb8:	42a5      	cmp	r5, r4
 8005fba:	d10b      	bne.n	8005fd4 <_free_r+0x70>
 8005fbc:	6824      	ldr	r4, [r4, #0]
 8005fbe:	4421      	add	r1, r4
 8005fc0:	1854      	adds	r4, r2, r1
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	6011      	str	r1, [r2, #0]
 8005fc6:	d1e0      	bne.n	8005f8a <_free_r+0x26>
 8005fc8:	681c      	ldr	r4, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	6053      	str	r3, [r2, #4]
 8005fce:	440c      	add	r4, r1
 8005fd0:	6014      	str	r4, [r2, #0]
 8005fd2:	e7da      	b.n	8005f8a <_free_r+0x26>
 8005fd4:	d902      	bls.n	8005fdc <_free_r+0x78>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	6003      	str	r3, [r0, #0]
 8005fda:	e7d6      	b.n	8005f8a <_free_r+0x26>
 8005fdc:	6825      	ldr	r5, [r4, #0]
 8005fde:	1961      	adds	r1, r4, r5
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	bf04      	itt	eq
 8005fe4:	6819      	ldreq	r1, [r3, #0]
 8005fe6:	685b      	ldreq	r3, [r3, #4]
 8005fe8:	6063      	str	r3, [r4, #4]
 8005fea:	bf04      	itt	eq
 8005fec:	1949      	addeq	r1, r1, r5
 8005fee:	6021      	streq	r1, [r4, #0]
 8005ff0:	6054      	str	r4, [r2, #4]
 8005ff2:	e7ca      	b.n	8005f8a <_free_r+0x26>
 8005ff4:	b003      	add	sp, #12
 8005ff6:	bd30      	pop	{r4, r5, pc}
 8005ff8:	20000aa0 	.word	0x20000aa0

08005ffc <sbrk_aligned>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4e0e      	ldr	r6, [pc, #56]	; (8006038 <sbrk_aligned+0x3c>)
 8006000:	460c      	mov	r4, r1
 8006002:	6831      	ldr	r1, [r6, #0]
 8006004:	4605      	mov	r5, r0
 8006006:	b911      	cbnz	r1, 800600e <sbrk_aligned+0x12>
 8006008:	f000 f9d6 	bl	80063b8 <_sbrk_r>
 800600c:	6030      	str	r0, [r6, #0]
 800600e:	4621      	mov	r1, r4
 8006010:	4628      	mov	r0, r5
 8006012:	f000 f9d1 	bl	80063b8 <_sbrk_r>
 8006016:	1c43      	adds	r3, r0, #1
 8006018:	d00a      	beq.n	8006030 <sbrk_aligned+0x34>
 800601a:	1cc4      	adds	r4, r0, #3
 800601c:	f024 0403 	bic.w	r4, r4, #3
 8006020:	42a0      	cmp	r0, r4
 8006022:	d007      	beq.n	8006034 <sbrk_aligned+0x38>
 8006024:	1a21      	subs	r1, r4, r0
 8006026:	4628      	mov	r0, r5
 8006028:	f000 f9c6 	bl	80063b8 <_sbrk_r>
 800602c:	3001      	adds	r0, #1
 800602e:	d101      	bne.n	8006034 <sbrk_aligned+0x38>
 8006030:	f04f 34ff 	mov.w	r4, #4294967295
 8006034:	4620      	mov	r0, r4
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	20000aa4 	.word	0x20000aa4

0800603c <_malloc_r>:
 800603c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006040:	1ccd      	adds	r5, r1, #3
 8006042:	f025 0503 	bic.w	r5, r5, #3
 8006046:	3508      	adds	r5, #8
 8006048:	2d0c      	cmp	r5, #12
 800604a:	bf38      	it	cc
 800604c:	250c      	movcc	r5, #12
 800604e:	2d00      	cmp	r5, #0
 8006050:	4607      	mov	r7, r0
 8006052:	db01      	blt.n	8006058 <_malloc_r+0x1c>
 8006054:	42a9      	cmp	r1, r5
 8006056:	d905      	bls.n	8006064 <_malloc_r+0x28>
 8006058:	230c      	movs	r3, #12
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	2600      	movs	r6, #0
 800605e:	4630      	mov	r0, r6
 8006060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006064:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006138 <_malloc_r+0xfc>
 8006068:	f000 f868 	bl	800613c <__malloc_lock>
 800606c:	f8d8 3000 	ldr.w	r3, [r8]
 8006070:	461c      	mov	r4, r3
 8006072:	bb5c      	cbnz	r4, 80060cc <_malloc_r+0x90>
 8006074:	4629      	mov	r1, r5
 8006076:	4638      	mov	r0, r7
 8006078:	f7ff ffc0 	bl	8005ffc <sbrk_aligned>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	4604      	mov	r4, r0
 8006080:	d155      	bne.n	800612e <_malloc_r+0xf2>
 8006082:	f8d8 4000 	ldr.w	r4, [r8]
 8006086:	4626      	mov	r6, r4
 8006088:	2e00      	cmp	r6, #0
 800608a:	d145      	bne.n	8006118 <_malloc_r+0xdc>
 800608c:	2c00      	cmp	r4, #0
 800608e:	d048      	beq.n	8006122 <_malloc_r+0xe6>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	4631      	mov	r1, r6
 8006094:	4638      	mov	r0, r7
 8006096:	eb04 0903 	add.w	r9, r4, r3
 800609a:	f000 f98d 	bl	80063b8 <_sbrk_r>
 800609e:	4581      	cmp	r9, r0
 80060a0:	d13f      	bne.n	8006122 <_malloc_r+0xe6>
 80060a2:	6821      	ldr	r1, [r4, #0]
 80060a4:	1a6d      	subs	r5, r5, r1
 80060a6:	4629      	mov	r1, r5
 80060a8:	4638      	mov	r0, r7
 80060aa:	f7ff ffa7 	bl	8005ffc <sbrk_aligned>
 80060ae:	3001      	adds	r0, #1
 80060b0:	d037      	beq.n	8006122 <_malloc_r+0xe6>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	442b      	add	r3, r5
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	f8d8 3000 	ldr.w	r3, [r8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d038      	beq.n	8006132 <_malloc_r+0xf6>
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	42a2      	cmp	r2, r4
 80060c4:	d12b      	bne.n	800611e <_malloc_r+0xe2>
 80060c6:	2200      	movs	r2, #0
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	e00f      	b.n	80060ec <_malloc_r+0xb0>
 80060cc:	6822      	ldr	r2, [r4, #0]
 80060ce:	1b52      	subs	r2, r2, r5
 80060d0:	d41f      	bmi.n	8006112 <_malloc_r+0xd6>
 80060d2:	2a0b      	cmp	r2, #11
 80060d4:	d917      	bls.n	8006106 <_malloc_r+0xca>
 80060d6:	1961      	adds	r1, r4, r5
 80060d8:	42a3      	cmp	r3, r4
 80060da:	6025      	str	r5, [r4, #0]
 80060dc:	bf18      	it	ne
 80060de:	6059      	strne	r1, [r3, #4]
 80060e0:	6863      	ldr	r3, [r4, #4]
 80060e2:	bf08      	it	eq
 80060e4:	f8c8 1000 	streq.w	r1, [r8]
 80060e8:	5162      	str	r2, [r4, r5]
 80060ea:	604b      	str	r3, [r1, #4]
 80060ec:	4638      	mov	r0, r7
 80060ee:	f104 060b 	add.w	r6, r4, #11
 80060f2:	f000 f829 	bl	8006148 <__malloc_unlock>
 80060f6:	f026 0607 	bic.w	r6, r6, #7
 80060fa:	1d23      	adds	r3, r4, #4
 80060fc:	1af2      	subs	r2, r6, r3
 80060fe:	d0ae      	beq.n	800605e <_malloc_r+0x22>
 8006100:	1b9b      	subs	r3, r3, r6
 8006102:	50a3      	str	r3, [r4, r2]
 8006104:	e7ab      	b.n	800605e <_malloc_r+0x22>
 8006106:	42a3      	cmp	r3, r4
 8006108:	6862      	ldr	r2, [r4, #4]
 800610a:	d1dd      	bne.n	80060c8 <_malloc_r+0x8c>
 800610c:	f8c8 2000 	str.w	r2, [r8]
 8006110:	e7ec      	b.n	80060ec <_malloc_r+0xb0>
 8006112:	4623      	mov	r3, r4
 8006114:	6864      	ldr	r4, [r4, #4]
 8006116:	e7ac      	b.n	8006072 <_malloc_r+0x36>
 8006118:	4634      	mov	r4, r6
 800611a:	6876      	ldr	r6, [r6, #4]
 800611c:	e7b4      	b.n	8006088 <_malloc_r+0x4c>
 800611e:	4613      	mov	r3, r2
 8006120:	e7cc      	b.n	80060bc <_malloc_r+0x80>
 8006122:	230c      	movs	r3, #12
 8006124:	603b      	str	r3, [r7, #0]
 8006126:	4638      	mov	r0, r7
 8006128:	f000 f80e 	bl	8006148 <__malloc_unlock>
 800612c:	e797      	b.n	800605e <_malloc_r+0x22>
 800612e:	6025      	str	r5, [r4, #0]
 8006130:	e7dc      	b.n	80060ec <_malloc_r+0xb0>
 8006132:	605b      	str	r3, [r3, #4]
 8006134:	deff      	udf	#255	; 0xff
 8006136:	bf00      	nop
 8006138:	20000aa0 	.word	0x20000aa0

0800613c <__malloc_lock>:
 800613c:	4801      	ldr	r0, [pc, #4]	; (8006144 <__malloc_lock+0x8>)
 800613e:	f7ff bf0e 	b.w	8005f5e <__retarget_lock_acquire_recursive>
 8006142:	bf00      	nop
 8006144:	20000a9c 	.word	0x20000a9c

08006148 <__malloc_unlock>:
 8006148:	4801      	ldr	r0, [pc, #4]	; (8006150 <__malloc_unlock+0x8>)
 800614a:	f7ff bf09 	b.w	8005f60 <__retarget_lock_release_recursive>
 800614e:	bf00      	nop
 8006150:	20000a9c 	.word	0x20000a9c

08006154 <__sflush_r>:
 8006154:	898a      	ldrh	r2, [r1, #12]
 8006156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800615a:	4605      	mov	r5, r0
 800615c:	0710      	lsls	r0, r2, #28
 800615e:	460c      	mov	r4, r1
 8006160:	d458      	bmi.n	8006214 <__sflush_r+0xc0>
 8006162:	684b      	ldr	r3, [r1, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	dc05      	bgt.n	8006174 <__sflush_r+0x20>
 8006168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	dc02      	bgt.n	8006174 <__sflush_r+0x20>
 800616e:	2000      	movs	r0, #0
 8006170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006176:	2e00      	cmp	r6, #0
 8006178:	d0f9      	beq.n	800616e <__sflush_r+0x1a>
 800617a:	2300      	movs	r3, #0
 800617c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006180:	682f      	ldr	r7, [r5, #0]
 8006182:	6a21      	ldr	r1, [r4, #32]
 8006184:	602b      	str	r3, [r5, #0]
 8006186:	d032      	beq.n	80061ee <__sflush_r+0x9a>
 8006188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	075a      	lsls	r2, r3, #29
 800618e:	d505      	bpl.n	800619c <__sflush_r+0x48>
 8006190:	6863      	ldr	r3, [r4, #4]
 8006192:	1ac0      	subs	r0, r0, r3
 8006194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006196:	b10b      	cbz	r3, 800619c <__sflush_r+0x48>
 8006198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800619a:	1ac0      	subs	r0, r0, r3
 800619c:	2300      	movs	r3, #0
 800619e:	4602      	mov	r2, r0
 80061a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061a2:	6a21      	ldr	r1, [r4, #32]
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b0      	blx	r6
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	d106      	bne.n	80061bc <__sflush_r+0x68>
 80061ae:	6829      	ldr	r1, [r5, #0]
 80061b0:	291d      	cmp	r1, #29
 80061b2:	d82b      	bhi.n	800620c <__sflush_r+0xb8>
 80061b4:	4a29      	ldr	r2, [pc, #164]	; (800625c <__sflush_r+0x108>)
 80061b6:	410a      	asrs	r2, r1
 80061b8:	07d6      	lsls	r6, r2, #31
 80061ba:	d427      	bmi.n	800620c <__sflush_r+0xb8>
 80061bc:	2200      	movs	r2, #0
 80061be:	6062      	str	r2, [r4, #4]
 80061c0:	04d9      	lsls	r1, r3, #19
 80061c2:	6922      	ldr	r2, [r4, #16]
 80061c4:	6022      	str	r2, [r4, #0]
 80061c6:	d504      	bpl.n	80061d2 <__sflush_r+0x7e>
 80061c8:	1c42      	adds	r2, r0, #1
 80061ca:	d101      	bne.n	80061d0 <__sflush_r+0x7c>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b903      	cbnz	r3, 80061d2 <__sflush_r+0x7e>
 80061d0:	6560      	str	r0, [r4, #84]	; 0x54
 80061d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061d4:	602f      	str	r7, [r5, #0]
 80061d6:	2900      	cmp	r1, #0
 80061d8:	d0c9      	beq.n	800616e <__sflush_r+0x1a>
 80061da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061de:	4299      	cmp	r1, r3
 80061e0:	d002      	beq.n	80061e8 <__sflush_r+0x94>
 80061e2:	4628      	mov	r0, r5
 80061e4:	f7ff febe 	bl	8005f64 <_free_r>
 80061e8:	2000      	movs	r0, #0
 80061ea:	6360      	str	r0, [r4, #52]	; 0x34
 80061ec:	e7c0      	b.n	8006170 <__sflush_r+0x1c>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4628      	mov	r0, r5
 80061f2:	47b0      	blx	r6
 80061f4:	1c41      	adds	r1, r0, #1
 80061f6:	d1c8      	bne.n	800618a <__sflush_r+0x36>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0c5      	beq.n	800618a <__sflush_r+0x36>
 80061fe:	2b1d      	cmp	r3, #29
 8006200:	d001      	beq.n	8006206 <__sflush_r+0xb2>
 8006202:	2b16      	cmp	r3, #22
 8006204:	d101      	bne.n	800620a <__sflush_r+0xb6>
 8006206:	602f      	str	r7, [r5, #0]
 8006208:	e7b1      	b.n	800616e <__sflush_r+0x1a>
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006210:	81a3      	strh	r3, [r4, #12]
 8006212:	e7ad      	b.n	8006170 <__sflush_r+0x1c>
 8006214:	690f      	ldr	r7, [r1, #16]
 8006216:	2f00      	cmp	r7, #0
 8006218:	d0a9      	beq.n	800616e <__sflush_r+0x1a>
 800621a:	0793      	lsls	r3, r2, #30
 800621c:	680e      	ldr	r6, [r1, #0]
 800621e:	bf08      	it	eq
 8006220:	694b      	ldreq	r3, [r1, #20]
 8006222:	600f      	str	r7, [r1, #0]
 8006224:	bf18      	it	ne
 8006226:	2300      	movne	r3, #0
 8006228:	eba6 0807 	sub.w	r8, r6, r7
 800622c:	608b      	str	r3, [r1, #8]
 800622e:	f1b8 0f00 	cmp.w	r8, #0
 8006232:	dd9c      	ble.n	800616e <__sflush_r+0x1a>
 8006234:	6a21      	ldr	r1, [r4, #32]
 8006236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006238:	4643      	mov	r3, r8
 800623a:	463a      	mov	r2, r7
 800623c:	4628      	mov	r0, r5
 800623e:	47b0      	blx	r6
 8006240:	2800      	cmp	r0, #0
 8006242:	dc06      	bgt.n	8006252 <__sflush_r+0xfe>
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800624a:	81a3      	strh	r3, [r4, #12]
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	e78e      	b.n	8006170 <__sflush_r+0x1c>
 8006252:	4407      	add	r7, r0
 8006254:	eba8 0800 	sub.w	r8, r8, r0
 8006258:	e7e9      	b.n	800622e <__sflush_r+0xda>
 800625a:	bf00      	nop
 800625c:	dfbffffe 	.word	0xdfbffffe

08006260 <_fflush_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	690b      	ldr	r3, [r1, #16]
 8006264:	4605      	mov	r5, r0
 8006266:	460c      	mov	r4, r1
 8006268:	b913      	cbnz	r3, 8006270 <_fflush_r+0x10>
 800626a:	2500      	movs	r5, #0
 800626c:	4628      	mov	r0, r5
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	b118      	cbz	r0, 800627a <_fflush_r+0x1a>
 8006272:	6a03      	ldr	r3, [r0, #32]
 8006274:	b90b      	cbnz	r3, 800627a <_fflush_r+0x1a>
 8006276:	f7ff fc8f 	bl	8005b98 <__sinit>
 800627a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0f3      	beq.n	800626a <_fflush_r+0xa>
 8006282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006284:	07d0      	lsls	r0, r2, #31
 8006286:	d404      	bmi.n	8006292 <_fflush_r+0x32>
 8006288:	0599      	lsls	r1, r3, #22
 800628a:	d402      	bmi.n	8006292 <_fflush_r+0x32>
 800628c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800628e:	f7ff fe66 	bl	8005f5e <__retarget_lock_acquire_recursive>
 8006292:	4628      	mov	r0, r5
 8006294:	4621      	mov	r1, r4
 8006296:	f7ff ff5d 	bl	8006154 <__sflush_r>
 800629a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800629c:	07da      	lsls	r2, r3, #31
 800629e:	4605      	mov	r5, r0
 80062a0:	d4e4      	bmi.n	800626c <_fflush_r+0xc>
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	059b      	lsls	r3, r3, #22
 80062a6:	d4e1      	bmi.n	800626c <_fflush_r+0xc>
 80062a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062aa:	f7ff fe59 	bl	8005f60 <__retarget_lock_release_recursive>
 80062ae:	e7dd      	b.n	800626c <_fflush_r+0xc>

080062b0 <__swhatbuf_r>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	460c      	mov	r4, r1
 80062b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b8:	2900      	cmp	r1, #0
 80062ba:	b096      	sub	sp, #88	; 0x58
 80062bc:	4615      	mov	r5, r2
 80062be:	461e      	mov	r6, r3
 80062c0:	da0d      	bge.n	80062de <__swhatbuf_r+0x2e>
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062c8:	f04f 0100 	mov.w	r1, #0
 80062cc:	bf0c      	ite	eq
 80062ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80062d2:	2340      	movne	r3, #64	; 0x40
 80062d4:	2000      	movs	r0, #0
 80062d6:	6031      	str	r1, [r6, #0]
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	b016      	add	sp, #88	; 0x58
 80062dc:	bd70      	pop	{r4, r5, r6, pc}
 80062de:	466a      	mov	r2, sp
 80062e0:	f000 f848 	bl	8006374 <_fstat_r>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	dbec      	blt.n	80062c2 <__swhatbuf_r+0x12>
 80062e8:	9901      	ldr	r1, [sp, #4]
 80062ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80062ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80062f2:	4259      	negs	r1, r3
 80062f4:	4159      	adcs	r1, r3
 80062f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062fa:	e7eb      	b.n	80062d4 <__swhatbuf_r+0x24>

080062fc <__smakebuf_r>:
 80062fc:	898b      	ldrh	r3, [r1, #12]
 80062fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006300:	079d      	lsls	r5, r3, #30
 8006302:	4606      	mov	r6, r0
 8006304:	460c      	mov	r4, r1
 8006306:	d507      	bpl.n	8006318 <__smakebuf_r+0x1c>
 8006308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	6123      	str	r3, [r4, #16]
 8006310:	2301      	movs	r3, #1
 8006312:	6163      	str	r3, [r4, #20]
 8006314:	b002      	add	sp, #8
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	ab01      	add	r3, sp, #4
 800631a:	466a      	mov	r2, sp
 800631c:	f7ff ffc8 	bl	80062b0 <__swhatbuf_r>
 8006320:	9900      	ldr	r1, [sp, #0]
 8006322:	4605      	mov	r5, r0
 8006324:	4630      	mov	r0, r6
 8006326:	f7ff fe89 	bl	800603c <_malloc_r>
 800632a:	b948      	cbnz	r0, 8006340 <__smakebuf_r+0x44>
 800632c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006330:	059a      	lsls	r2, r3, #22
 8006332:	d4ef      	bmi.n	8006314 <__smakebuf_r+0x18>
 8006334:	f023 0303 	bic.w	r3, r3, #3
 8006338:	f043 0302 	orr.w	r3, r3, #2
 800633c:	81a3      	strh	r3, [r4, #12]
 800633e:	e7e3      	b.n	8006308 <__smakebuf_r+0xc>
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	6020      	str	r0, [r4, #0]
 8006344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006348:	81a3      	strh	r3, [r4, #12]
 800634a:	9b00      	ldr	r3, [sp, #0]
 800634c:	6163      	str	r3, [r4, #20]
 800634e:	9b01      	ldr	r3, [sp, #4]
 8006350:	6120      	str	r0, [r4, #16]
 8006352:	b15b      	cbz	r3, 800636c <__smakebuf_r+0x70>
 8006354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006358:	4630      	mov	r0, r6
 800635a:	f000 f81d 	bl	8006398 <_isatty_r>
 800635e:	b128      	cbz	r0, 800636c <__smakebuf_r+0x70>
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	f023 0303 	bic.w	r3, r3, #3
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	81a3      	strh	r3, [r4, #12]
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	431d      	orrs	r5, r3
 8006370:	81a5      	strh	r5, [r4, #12]
 8006372:	e7cf      	b.n	8006314 <__smakebuf_r+0x18>

08006374 <_fstat_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d07      	ldr	r5, [pc, #28]	; (8006394 <_fstat_r+0x20>)
 8006378:	2300      	movs	r3, #0
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	4611      	mov	r1, r2
 8006380:	602b      	str	r3, [r5, #0]
 8006382:	f7fa ffde 	bl	8001342 <_fstat>
 8006386:	1c43      	adds	r3, r0, #1
 8006388:	d102      	bne.n	8006390 <_fstat_r+0x1c>
 800638a:	682b      	ldr	r3, [r5, #0]
 800638c:	b103      	cbz	r3, 8006390 <_fstat_r+0x1c>
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	bd38      	pop	{r3, r4, r5, pc}
 8006392:	bf00      	nop
 8006394:	20000a98 	.word	0x20000a98

08006398 <_isatty_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4d06      	ldr	r5, [pc, #24]	; (80063b4 <_isatty_r+0x1c>)
 800639c:	2300      	movs	r3, #0
 800639e:	4604      	mov	r4, r0
 80063a0:	4608      	mov	r0, r1
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	f7fa ffdd 	bl	8001362 <_isatty>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_isatty_r+0x1a>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_isatty_r+0x1a>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	20000a98 	.word	0x20000a98

080063b8 <_sbrk_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d06      	ldr	r5, [pc, #24]	; (80063d4 <_sbrk_r+0x1c>)
 80063bc:	2300      	movs	r3, #0
 80063be:	4604      	mov	r4, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	602b      	str	r3, [r5, #0]
 80063c4:	f7fa ffe6 	bl	8001394 <_sbrk>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_sbrk_r+0x1a>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_sbrk_r+0x1a>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	20000a98 	.word	0x20000a98

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
