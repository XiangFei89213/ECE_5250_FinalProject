
EB_final_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006048  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006248  08006248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062d8  080062d8  000201ac  2**0
                  CONTENTS
  4 .ARM          00000008  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062e0  080062e0  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080062e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  08006354  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  080063f4  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008b0  200001ac  08006494  000201ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a5c  08006494  00020a5c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201da  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001420e  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002c8f  00000000  00000000  0003442b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000f90  00000000  00000000  000370c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000bf2  00000000  00000000  00038050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a350  00000000  00000000  00038c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00013617  00000000  00000000  00062f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00101687  00000000  00000000  000765a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000485c  00000000  00000000  00177c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  0017c48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ac 	.word	0x200001ac
 800021c:	00000000 	.word	0x00000000
 8000220:	08006230 	.word	0x08006230

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b0 	.word	0x200001b0
 800023c:	08006230 	.word	0x08006230

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <_write>:

// This character buffer array will
// store the result after conversion complete
//char dma_result_buffer[100];

int _write(int file, char *ptr, int len){
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
	int i=0;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e009      	b.n	8000654 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60ba      	str	r2, [r7, #8]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffc7 	bl	80005dc <ITM_SendChar>
	for(i=0;i<len;i++){
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf1      	blt.n	8000640 <_write+0x16>
	}
	return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <HAL_ADC_ConvCpltCallback>:

int flag_forward, flag_backwoard, flag_left, flag_right;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

     	  // HAL_Delay(5000);
     	  if (adc_dma_result[0] >= 3800){
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <HAL_ADC_ConvCpltCallback+0x98>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	f640 62d7 	movw	r2, #3799	; 0xed7
 800067a:	4293      	cmp	r3, r2
 800067c:	d906      	bls.n	800068c <HAL_ADC_ConvCpltCallback+0x24>
     		  //forward
     		  printf("forward\n");
 800067e:	4821      	ldr	r0, [pc, #132]	; (8000704 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000680:	f004 ff6c 	bl	800555c <puts>
     		  flag_forward = 1;
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000686:	2201      	movs	r2, #1
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	e002      	b.n	8000692 <HAL_ADC_ConvCpltCallback+0x2a>
     	  }else{
     		flag_forward = 0;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <HAL_ADC_ConvCpltCallback+0xa0>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
     	  }
     	  if (adc_dma_result[1] >= 3800){
 8000692:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <HAL_ADC_ConvCpltCallback+0x98>)
 8000694:	885b      	ldrh	r3, [r3, #2]
 8000696:	b29b      	uxth	r3, r3
 8000698:	f640 62d7 	movw	r2, #3799	; 0xed7
 800069c:	4293      	cmp	r3, r2
 800069e:	d906      	bls.n	80006ae <HAL_ADC_ConvCpltCallback+0x46>
     		  //backward
     		printf("backward\n");
 80006a0:	481a      	ldr	r0, [pc, #104]	; (800070c <HAL_ADC_ConvCpltCallback+0xa4>)
 80006a2:	f004 ff5b 	bl	800555c <puts>
     		flag_backwoard =1;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <HAL_ADC_ConvCpltCallback+0xa8>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	e002      	b.n	80006b4 <HAL_ADC_ConvCpltCallback+0x4c>
     	  }else{
     		flag_backwoard = 0;
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <HAL_ADC_ConvCpltCallback+0xa8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
     	  }
     	  if (adc_dma_result[2] >= 3800){
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_ADC_ConvCpltCallback+0x98>)
 80006b6:	889b      	ldrh	r3, [r3, #4]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	f640 62d7 	movw	r2, #3799	; 0xed7
 80006be:	4293      	cmp	r3, r2
 80006c0:	d906      	bls.n	80006d0 <HAL_ADC_ConvCpltCallback+0x68>
     		  //left
     		printf("left\n");
 80006c2:	4814      	ldr	r0, [pc, #80]	; (8000714 <HAL_ADC_ConvCpltCallback+0xac>)
 80006c4:	f004 ff4a 	bl	800555c <puts>
     		flag_left = 1;
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <HAL_ADC_ConvCpltCallback+0xb0>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e002      	b.n	80006d6 <HAL_ADC_ConvCpltCallback+0x6e>

     	  }else{
     		flag_left = 0;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <HAL_ADC_ConvCpltCallback+0xb0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
     	  }
     	  if (adc_dma_result[3] >= 3800){
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_ADC_ConvCpltCallback+0x98>)
 80006d8:	88db      	ldrh	r3, [r3, #6]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	f640 62d7 	movw	r2, #3799	; 0xed7
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d906      	bls.n	80006f2 <HAL_ADC_ConvCpltCallback+0x8a>
     		  //right
     		printf("right\n");
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <HAL_ADC_ConvCpltCallback+0xb4>)
 80006e6:	f004 ff39 	bl	800555c <puts>
     		flag_right =1;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <HAL_ADC_ConvCpltCallback+0xb8>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
     	  }else{
     		flag_right =0;
     	  }
}
 80006f0:	e002      	b.n	80006f8 <HAL_ADC_ConvCpltCallback+0x90>
     		flag_right =0;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <HAL_ADC_ConvCpltCallback+0xb8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200008e8 	.word	0x200008e8
 8000704:	08006248 	.word	0x08006248
 8000708:	200008f0 	.word	0x200008f0
 800070c:	08006250 	.word	0x08006250
 8000710:	200008f4 	.word	0x200008f4
 8000714:	0800625c 	.word	0x0800625c
 8000718:	200008f8 	.word	0x200008f8
 800071c:	08006264 	.word	0x08006264
 8000720:	200008fc 	.word	0x200008fc

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	flag_forward = 0;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <main+0x84>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
	flag_backwoard = 0;
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <main+0x88>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
	flag_left = 0;
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <main+0x8c>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
	flag_right = 0;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <main+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 fdc9 	bl	80012d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f846 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 f9fc 	bl	8000b44 <MX_GPIO_Init>
  MX_DMA_Init();
 800074c:	f000 f9dc 	bl	8000b08 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000750:	f000 f97c 	bl	8000a4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000754:	f000 f9aa 	bl	8000aac <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000758:	f000 f8ae 	bl	80008b8 <MX_ADC1_Init>
  MX_ETH_Init();
 800075c:	f000 f928 	bl	80009b0 <MX_ETH_Init>

  /* USER CODE BEGIN 2 */
  // Initialize the DMA conversion
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_dma_result , adc_channel_count);
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <main+0x94>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4915      	ldr	r1, [pc, #84]	; (80007bc <main+0x98>)
 8000768:	4815      	ldr	r0, [pc, #84]	; (80007c0 <main+0x9c>)
 800076a:	f000 fe79 	bl	8001460 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_backwoard == 1){
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <main+0x88>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d102      	bne.n	800077c <main+0x58>
		  printf("yes");
 8000776:	4813      	ldr	r0, [pc, #76]	; (80007c4 <main+0xa0>)
 8000778:	f004 fe8a 	bl	8005490 <iprintf>
	  }
	  if(flag_forward ==1 ){
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <main+0x84>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d102      	bne.n	800078a <main+0x66>
		  printf("good");
 8000784:	4810      	ldr	r0, [pc, #64]	; (80007c8 <main+0xa4>)
 8000786:	f004 fe83 	bl	8005490 <iprintf>
	  }
	  if(flag_left ==1 ){
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <main+0x8c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d102      	bne.n	8000798 <main+0x74>
		  printf("job");
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <main+0xa8>)
 8000794:	f004 fe7c 	bl	8005490 <iprintf>
	  }
	  if(flag_right == 1){
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <main+0x90>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d1e6      	bne.n	800076e <main+0x4a>
		  printf("hahah");
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <main+0xac>)
 80007a2:	f004 fe75 	bl	8005490 <iprintf>
	  if(flag_backwoard == 1){
 80007a6:	e7e2      	b.n	800076e <main+0x4a>
 80007a8:	200008f0 	.word	0x200008f0
 80007ac:	200008f4 	.word	0x200008f4
 80007b0:	200008f8 	.word	0x200008f8
 80007b4:	200008fc 	.word	0x200008fc
 80007b8:	20000000 	.word	0x20000000
 80007bc:	200008e8 	.word	0x200008e8
 80007c0:	20000200 	.word	0x20000200
 80007c4:	0800626c 	.word	0x0800626c
 80007c8:	08006270 	.word	0x08006270
 80007cc:	08006278 	.word	0x08006278
 80007d0:	0800627c 	.word	0x0800627c

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2234      	movs	r2, #52	; 0x34
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 ff9a 	bl	800571c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f8:	f002 fcd0 	bl	800319c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <SystemClock_Config+0xdc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <SystemClock_Config+0xdc>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <SystemClock_Config+0xdc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <SystemClock_Config+0xe0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800081c:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <SystemClock_Config+0xe0>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <SystemClock_Config+0xe0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000834:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000838:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000848:	2360      	movs	r3, #96	; 0x60
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4618      	mov	r0, r3
 800085e:	f002 fcfd 	bl	800325c <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000868:	f000 fa0e 	bl	8000c88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800086c:	f002 fca6 	bl	80031bc <HAL_PWREx_EnableOverDrive>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000876:	f000 fa07 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2302      	movs	r3, #2
 8000880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	2103      	movs	r1, #3
 8000896:	4618      	mov	r0, r3
 8000898:	f002 ff8e 	bl	80037b8 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008a2:	f000 f9f1 	bl	8000c88 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3750      	adds	r7, #80	; 0x50
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40007000 	.word	0x40007000

080008b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008ca:	4b36      	ldr	r3, [pc, #216]	; (80009a4 <MX_ADC1_Init+0xec>)
 80008cc:	4a36      	ldr	r2, [pc, #216]	; (80009a8 <MX_ADC1_Init+0xf0>)
 80008ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008d0:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <MX_ADC1_Init+0xec>)
 80008d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <MX_ADC1_Init+0xec>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008de:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <MX_ADC1_Init+0xec>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008e4:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <MX_ADC1_Init+0xec>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ea:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <MX_ADC1_Init+0xec>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f2:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <MX_ADC1_Init+0xec>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f8:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <MX_ADC1_Init+0xec>)
 80008fa:	4a2c      	ldr	r2, [pc, #176]	; (80009ac <MX_ADC1_Init+0xf4>)
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <MX_ADC1_Init+0xec>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <MX_ADC1_Init+0xec>)
 8000906:	2204      	movs	r2, #4
 8000908:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800090a:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <MX_ADC1_Init+0xec>)
 800090c:	2201      	movs	r2, #1
 800090e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000912:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <MX_ADC1_Init+0xec>)
 8000914:	2201      	movs	r2, #1
 8000916:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000918:	4822      	ldr	r0, [pc, #136]	; (80009a4 <MX_ADC1_Init+0xec>)
 800091a:	f000 fd5d 	bl	80013d8 <HAL_ADC_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000924:	f000 f9b0 	bl	8000c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000928:	2303      	movs	r3, #3
 800092a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092c:	2301      	movs	r3, #1
 800092e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	481a      	ldr	r0, [pc, #104]	; (80009a4 <MX_ADC1_Init+0xec>)
 800093a:	f000 fe9f 	bl	800167c <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000944:	f000 f9a0 	bl	8000c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000948:	2304      	movs	r3, #4
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800094c:	2302      	movs	r3, #2
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MX_ADC1_Init+0xec>)
 8000956:	f000 fe91 	bl	800167c <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000960:	f000 f992 	bl	8000c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000964:	2305      	movs	r3, #5
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000968:	2303      	movs	r3, #3
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <MX_ADC1_Init+0xec>)
 8000972:	f000 fe83 	bl	800167c <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800097c:	f000 f984 	bl	8000c88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000980:	2306      	movs	r3, #6
 8000982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000984:	2304      	movs	r3, #4
 8000986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_ADC1_Init+0xec>)
 800098e:	f000 fe75 	bl	800167c <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000998:	f000 f976 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000200 	.word	0x20000200
 80009a8:	40012000 	.word	0x40012000
 80009ac:	0f000001 	.word	0x0f000001

080009b0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_ETH_Init+0x84>)
 80009b6:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <MX_ETH_Init+0x88>)
 80009b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009c8:	22e1      	movs	r2, #225	; 0xe1
 80009ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_ETH_Init+0x84>)
 80009e0:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <MX_ETH_Init+0x8c>)
 80009e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_ETH_Init+0x84>)
 80009e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009ea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_ETH_Init+0x84>)
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <MX_ETH_Init+0x90>)
 80009f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_ETH_Init+0x84>)
 80009f4:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <MX_ETH_Init+0x94>)
 80009f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_ETH_Init+0x84>)
 80009fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009fe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_ETH_Init+0x84>)
 8000a02:	f001 fd97 	bl	8002534 <HAL_ETH_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a0c:	f000 f93c 	bl	8000c88 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a10:	2238      	movs	r2, #56	; 0x38
 8000a12:	2100      	movs	r1, #0
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a16:	f004 fe81 	bl	800571c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a1c:	2221      	movs	r2, #33	; 0x21
 8000a1e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a22:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a26:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_ETH_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200002a8 	.word	0x200002a8
 8000a38:	40028000 	.word	0x40028000
 8000a3c:	20000900 	.word	0x20000900
 8000a40:	2000010c 	.word	0x2000010c
 8000a44:	2000006c 	.word	0x2000006c
 8000a48:	200001c8 	.word	0x200001c8

08000a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a52:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <MX_USART3_UART_Init+0x5c>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_USART3_UART_Init+0x58>)
 8000a90:	f003 fce0 	bl	8004454 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a9a:	f000 f8f5 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000358 	.word	0x20000358
 8000aa8:	40004800 	.word	0x40004800

08000aac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aba:	2206      	movs	r2, #6
 8000abc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000acc:	2202      	movs	r2, #2
 8000ace:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af0:	f002 fa0b 	bl	8002f0a <HAL_PCD_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 f8c5 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200003e0 	.word	0x200003e0

08000b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_DMA_Init+0x38>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <MX_DMA_Init+0x38>)
 8000b14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_DMA_Init+0x38>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2038      	movs	r0, #56	; 0x38
 8000b2c:	f001 f953 	bl	8001dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b30:	2038      	movs	r0, #56	; 0x38
 8000b32:	f001 f96c 	bl	8001e0e <HAL_NVIC_EnableIRQ>

}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	4b47      	ldr	r3, [pc, #284]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a46      	ldr	r2, [pc, #280]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b44      	ldr	r3, [pc, #272]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	4b41      	ldr	r3, [pc, #260]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a40      	ldr	r2, [pc, #256]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b3e      	ldr	r3, [pc, #248]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b3b      	ldr	r3, [pc, #236]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a3a      	ldr	r2, [pc, #232]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a34      	ldr	r2, [pc, #208]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a2e      	ldr	r2, [pc, #184]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a28      	ldr	r2, [pc, #160]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bf0:	4822      	ldr	r0, [pc, #136]	; (8000c7c <MX_GPIO_Init+0x138>)
 8000bf2:	f002 f971 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2140      	movs	r1, #64	; 0x40
 8000bfa:	4821      	ldr	r0, [pc, #132]	; (8000c80 <MX_GPIO_Init+0x13c>)
 8000bfc:	f002 f96c 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	481b      	ldr	r0, [pc, #108]	; (8000c84 <MX_GPIO_Init+0x140>)
 8000c18:	f001 ffb2 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c1c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <MX_GPIO_Init+0x138>)
 8000c36:	f001 ffa3 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c3a:	2340      	movs	r3, #64	; 0x40
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480b      	ldr	r0, [pc, #44]	; (8000c80 <MX_GPIO_Init+0x13c>)
 8000c52:	f001 ff95 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_GPIO_Init+0x13c>)
 8000c6a:	f001 ff89 	bl	8002b80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6e:	bf00      	nop
 8000c70:	3730      	adds	r7, #48	; 0x30
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40021800 	.word	0x40021800
 8000c84:	40020800 	.word	0x40020800

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_MspInit+0x44>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_MspInit+0x44>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_MspInit+0x44>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a2d      	ldr	r2, [pc, #180]	; (8000db0 <HAL_ADC_MspInit+0xd4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d153      	bne.n	8000da6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <HAL_ADC_MspInit+0xd8>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a2c      	ldr	r2, [pc, #176]	; (8000db4 <HAL_ADC_MspInit+0xd8>)
 8000d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_ADC_MspInit+0xd8>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <HAL_ADC_MspInit+0xd8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <HAL_ADC_MspInit+0xd8>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_ADC_MspInit+0xd8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d2e:	2378      	movs	r3, #120	; 0x78
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d32:	2303      	movs	r3, #3
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481d      	ldr	r0, [pc, #116]	; (8000db8 <HAL_ADC_MspInit+0xdc>)
 8000d42:	f001 ff1d 	bl	8002b80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d48:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d64:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d6c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d8c:	f001 f85a 	bl	8001e44 <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000d96:	f7ff ff77 	bl	8000c88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40012000 	.word	0x40012000
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	20000248 	.word	0x20000248
 8000dc0:	40026410 	.word	0x40026410

08000dc4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	; 0x38
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a4e      	ldr	r2, [pc, #312]	; (8000f1c <HAL_ETH_MspInit+0x158>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	f040 8096 	bne.w	8000f14 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000de8:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4a4c      	ldr	r2, [pc, #304]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000dee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
 8000df4:	4b4a      	ldr	r3, [pc, #296]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dfc:	623b      	str	r3, [r7, #32]
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a46      	ldr	r2, [pc, #280]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0c:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	4b41      	ldr	r3, [pc, #260]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4a40      	ldr	r2, [pc, #256]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e22:	6313      	str	r3, [r2, #48]	; 0x30
 8000e24:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4a3a      	ldr	r2, [pc, #232]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3c:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4a34      	ldr	r2, [pc, #208]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6313      	str	r3, [r2, #48]	; 0x30
 8000e54:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e60:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	4a2e      	ldr	r2, [pc, #184]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	4a28      	ldr	r2, [pc, #160]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e82:	6313      	str	r3, [r2, #48]	; 0x30
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <HAL_ETH_MspInit+0x15c>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e90:	2332      	movs	r3, #50	; 0x32
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea0:	230b      	movs	r3, #11
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	481e      	ldr	r0, [pc, #120]	; (8000f24 <HAL_ETH_MspInit+0x160>)
 8000eac:	f001 fe68 	bl	8002b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eb0:	2386      	movs	r3, #134	; 0x86
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec0:	230b      	movs	r3, #11
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4817      	ldr	r0, [pc, #92]	; (8000f28 <HAL_ETH_MspInit+0x164>)
 8000ecc:	f001 fe58 	bl	8002b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee2:	230b      	movs	r3, #11
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <HAL_ETH_MspInit+0x168>)
 8000eee:	f001 fe47 	bl	8002b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ef2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f04:	230b      	movs	r3, #11
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4808      	ldr	r0, [pc, #32]	; (8000f30 <HAL_ETH_MspInit+0x16c>)
 8000f10:	f001 fe36 	bl	8002b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	3738      	adds	r7, #56	; 0x38
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40028000 	.word	0x40028000
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020800 	.word	0x40020800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40021800 	.word	0x40021800

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0ae      	sub	sp, #184	; 0xb8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2290      	movs	r2, #144	; 0x90
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 fbe1 	bl	800571c <memset>
  if(huart->Instance==USART3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <HAL_UART_MspInit+0xb4>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d13c      	bne.n	8000fde <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f68:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fe46 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f7e:	f7ff fe83 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a13      	ldr	r2, [pc, #76]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0xb8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0xbc>)
 8000fda:	f001 fdd1 	bl	8002b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	37b8      	adds	r7, #184	; 0xb8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0ae      	sub	sp, #184	; 0xb8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2290      	movs	r2, #144	; 0x90
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f004 fb81 	bl	800571c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001022:	d159      	bne.n	80010d8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001028:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fde5 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001040:	f7ff fe22 	bl	8000c88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_PCD_MspInit+0xec>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a25      	ldr	r2, [pc, #148]	; (80010e0 <HAL_PCD_MspInit+0xec>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <HAL_PCD_MspInit+0xec>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800105c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001076:	230a      	movs	r3, #10
 8001078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001080:	4619      	mov	r1, r3
 8001082:	4818      	ldr	r0, [pc, #96]	; (80010e4 <HAL_PCD_MspInit+0xf0>)
 8001084:	f001 fd7c 	bl	8002b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800108c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010a0:	4619      	mov	r1, r3
 80010a2:	4810      	ldr	r0, [pc, #64]	; (80010e4 <HAL_PCD_MspInit+0xf0>)
 80010a4:	f001 fd6c 	bl	8002b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_PCD_MspInit+0xec>)
 80010aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <HAL_PCD_MspInit+0xec>)
 80010ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b2:	6353      	str	r3, [r2, #52]	; 0x34
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_PCD_MspInit+0xec>)
 80010b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <HAL_PCD_MspInit+0xec>)
 80010c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <HAL_PCD_MspInit+0xec>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6453      	str	r3, [r2, #68]	; 0x44
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <HAL_PCD_MspInit+0xec>)
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	37b8      	adds	r7, #184	; 0xb8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001134:	f000 f90c 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <DMA2_Stream0_IRQHandler+0x10>)
 8001142:	f000 ff8d 	bl	8002060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000248 	.word	0x20000248

08001150 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e00a      	b.n	8001178 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001162:	f3af 8000 	nop.w
 8001166:	4601      	mov	r1, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	60ba      	str	r2, [r7, #8]
 800116e:	b2ca      	uxtb	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbf0      	blt.n	8001162 <_read+0x12>
  }

  return len;
 8001180:	687b      	ldr	r3, [r7, #4]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_close>:
  }
  return len;
}

int _close(int file)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b2:	605a      	str	r2, [r3, #4]
  return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_isatty>:

int _isatty(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <_sbrk+0x5c>)
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <_sbrk+0x60>)
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <_sbrk+0x64>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <_sbrk+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	429a      	cmp	r2, r3
 8001222:	d207      	bcs.n	8001234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001224:	f004 fac8 	bl	80057b8 <__errno>
 8001228:	4603      	mov	r3, r0
 800122a:	220c      	movs	r2, #12
 800122c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	e009      	b.n	8001248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <_sbrk+0x64>)
 8001244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20080000 	.word	0x20080000
 8001254:	00000400 	.word	0x00000400
 8001258:	20000908 	.word	0x20000908
 800125c:	20000a60 	.word	0x20000a60

08001260 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800128a:	490e      	ldr	r1, [pc, #56]	; (80012c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800128c:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a0:	4c0b      	ldr	r4, [pc, #44]	; (80012d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ae:	f7ff ffd7 	bl	8001260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b2:	f004 fa87 	bl	80057c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b6:	f7ff fa35 	bl	8000724 <main>
  bx  lr    
 80012ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012bc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012c8:	080062e8 	.word	0x080062e8
  ldr r2, =_sbss
 80012cc:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 80012d0:	20000a5c 	.word	0x20000a5c

080012d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC_IRQHandler>

080012d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012da:	2003      	movs	r0, #3
 80012dc:	f000 fd70 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f000 f805 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e6:	f7ff fcd5 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fd8b 	bl	8001e2a <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 fd53 	bl	8001dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000004 	.word	0x20000004
 8001348:	2000000c 	.word	0x2000000c
 800134c:	20000008 	.word	0x20000008

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	2000000c 	.word	0x2000000c
 8001374:	2000090c 	.word	0x2000090c

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	2000090c 	.word	0x2000090c

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_Delay+0x44>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffde 	bl	8001378 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000000c 	.word	0x2000000c

080013d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e031      	b.n	8001452 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fc70 	bl	8000cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	2b00      	cmp	r3, #0
 8001414:	d116      	bne.n	8001444 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_ADC_Init+0x84>)
 800141c:	4013      	ands	r3, r2
 800141e:	f043 0202 	orr.w	r2, r3, #2
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fa7e 	bl	8001928 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f023 0303 	bic.w	r3, r3, #3
 800143a:	f043 0201 	orr.w	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
 8001442:	e001      	b.n	8001448 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	ffffeefd 	.word	0xffffeefd

08001460 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_ADC_Start_DMA+0x1e>
 800147a:	2302      	movs	r3, #2
 800147c:	e0d4      	b.n	8001628 <HAL_ADC_Start_DMA+0x1c8>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b01      	cmp	r3, #1
 8001492:	d018      	beq.n	80014c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80014a4:	4b62      	ldr	r3, [pc, #392]	; (8001630 <HAL_ADC_Start_DMA+0x1d0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a62      	ldr	r2, [pc, #392]	; (8001634 <HAL_ADC_Start_DMA+0x1d4>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0c9a      	lsrs	r2, r3, #18
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80014b8:	e002      	b.n	80014c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3b01      	subs	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f9      	bne.n	80014ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	f040 809c 	bne.w	800160e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014da:	4b57      	ldr	r3, [pc, #348]	; (8001638 <HAL_ADC_Start_DMA+0x1d8>)
 80014dc:	4013      	ands	r3, r2
 80014de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001510:	d106      	bne.n	8001520 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f023 0206 	bic.w	r2, r3, #6
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
 800151e:	e002      	b.n	8001526 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	4a42      	ldr	r2, [pc, #264]	; (800163c <HAL_ADC_Start_DMA+0x1dc>)
 8001534:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153a:	4a41      	ldr	r2, [pc, #260]	; (8001640 <HAL_ADC_Start_DMA+0x1e0>)
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001542:	4a40      	ldr	r2, [pc, #256]	; (8001644 <HAL_ADC_Start_DMA+0x1e4>)
 8001544:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800154e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800155e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800156e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	334c      	adds	r3, #76	; 0x4c
 800157a:	4619      	mov	r1, r3
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f000 fd0e 	bl	8001fa0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <HAL_ADC_Start_DMA+0x1e8>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10f      	bne.n	80015b0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d143      	bne.n	8001626 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	e03a      	b.n	8001626 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a25      	ldr	r2, [pc, #148]	; (800164c <HAL_ADC_Start_DMA+0x1ec>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d10e      	bne.n	80015d8 <HAL_ADC_Start_DMA+0x178>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d107      	bne.n	80015d8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015d6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_ADC_Start_DMA+0x1e8>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d120      	bne.n	8001626 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_ADC_Start_DMA+0x1f0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d11b      	bne.n	8001626 <HAL_ADC_Start_DMA+0x1c6>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d114      	bne.n	8001626 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	e00b      	b.n	8001626 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f043 0210 	orr.w	r2, r3, #16
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f043 0201 	orr.w	r2, r3, #1
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000004 	.word	0x20000004
 8001634:	431bde83 	.word	0x431bde83
 8001638:	fffff8fe 	.word	0xfffff8fe
 800163c:	08001b1d 	.word	0x08001b1d
 8001640:	08001bd7 	.word	0x08001bd7
 8001644:	08001bf3 	.word	0x08001bf3
 8001648:	40012300 	.word	0x40012300
 800164c:	40012000 	.word	0x40012000
 8001650:	40012200 	.word	0x40012200

08001654 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x1c>
 8001694:	2302      	movs	r3, #2
 8001696:	e136      	b.n	8001906 <HAL_ADC_ConfigChannel+0x28a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b09      	cmp	r3, #9
 80016a6:	d93a      	bls.n	800171e <HAL_ADC_ConfigChannel+0xa2>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016b0:	d035      	beq.n	800171e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68d9      	ldr	r1, [r3, #12]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	3b1e      	subs	r3, #30
 80016c8:	2207      	movs	r2, #7
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	400a      	ands	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a8d      	ldr	r2, [pc, #564]	; (8001914 <HAL_ADC_ConfigChannel+0x298>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10a      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68d9      	ldr	r1, [r3, #12]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	061a      	lsls	r2, r3, #24
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f6:	e035      	b.n	8001764 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68d9      	ldr	r1, [r3, #12]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	4603      	mov	r3, r0
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4403      	add	r3, r0
 8001710:	3b1e      	subs	r3, #30
 8001712:	409a      	lsls	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800171c:	e022      	b.n	8001764 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6919      	ldr	r1, [r3, #16]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	2207      	movs	r2, #7
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43da      	mvns	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	400a      	ands	r2, r1
 8001740:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6919      	ldr	r1, [r3, #16]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	4603      	mov	r3, r0
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4403      	add	r3, r0
 800175a:	409a      	lsls	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b06      	cmp	r3, #6
 800176a:	d824      	bhi.n	80017b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3b05      	subs	r3, #5
 800177e:	221f      	movs	r2, #31
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43da      	mvns	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	400a      	ands	r2, r1
 800178c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b05      	subs	r3, #5
 80017a8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
 80017b4:	e04c      	b.n	8001850 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d824      	bhi.n	8001808 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	3b23      	subs	r3, #35	; 0x23
 80017d0:	221f      	movs	r2, #31
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	400a      	ands	r2, r1
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	3b23      	subs	r3, #35	; 0x23
 80017fa:	fa00 f203 	lsl.w	r2, r0, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	631a      	str	r2, [r3, #48]	; 0x30
 8001806:	e023      	b.n	8001850 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b41      	subs	r3, #65	; 0x41
 800181a:	221f      	movs	r2, #31
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43da      	mvns	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	400a      	ands	r2, r1
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b41      	subs	r3, #65	; 0x41
 8001844:	fa00 f203 	lsl.w	r2, r0, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a30      	ldr	r2, [pc, #192]	; (8001918 <HAL_ADC_ConfigChannel+0x29c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10a      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x1f4>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001862:	d105      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_ADC_ConfigChannel+0x2a0>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4a2c      	ldr	r2, [pc, #176]	; (800191c <HAL_ADC_ConfigChannel+0x2a0>)
 800186a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800186e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a28      	ldr	r2, [pc, #160]	; (8001918 <HAL_ADC_ConfigChannel+0x29c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10f      	bne.n	800189a <HAL_ADC_ConfigChannel+0x21e>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b12      	cmp	r3, #18
 8001880:	d10b      	bne.n	800189a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_ADC_ConfigChannel+0x2a0>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4a25      	ldr	r2, [pc, #148]	; (800191c <HAL_ADC_ConfigChannel+0x2a0>)
 8001888:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800188c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_ADC_ConfigChannel+0x2a0>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4a22      	ldr	r2, [pc, #136]	; (800191c <HAL_ADC_ConfigChannel+0x2a0>)
 8001894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001898:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <HAL_ADC_ConfigChannel+0x29c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d12b      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x280>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <HAL_ADC_ConfigChannel+0x298>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d003      	beq.n	80018b6 <HAL_ADC_ConfigChannel+0x23a>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b11      	cmp	r3, #17
 80018b4:	d122      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_ADC_ConfigChannel+0x2a0>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4a18      	ldr	r2, [pc, #96]	; (800191c <HAL_ADC_ConfigChannel+0x2a0>)
 80018bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018c0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_ADC_ConfigChannel+0x2a0>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4a15      	ldr	r2, [pc, #84]	; (800191c <HAL_ADC_ConfigChannel+0x2a0>)
 80018c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018cc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_ADC_ConfigChannel+0x298>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d111      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_ADC_ConfigChannel+0x2a4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a11      	ldr	r2, [pc, #68]	; (8001924 <HAL_ADC_ConfigChannel+0x2a8>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	0c9a      	lsrs	r2, r3, #18
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018ee:	e002      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f9      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	10000012 	.word	0x10000012
 8001918:	40012000 	.word	0x40012000
 800191c:	40012300 	.word	0x40012300
 8001920:	20000004 	.word	0x20000004
 8001924:	431bde83 	.word	0x431bde83

08001928 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001930:	4b78      	ldr	r3, [pc, #480]	; (8001b14 <ADC_Init+0x1ec>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a77      	ldr	r2, [pc, #476]	; (8001b14 <ADC_Init+0x1ec>)
 8001936:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800193a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800193c:	4b75      	ldr	r3, [pc, #468]	; (8001b14 <ADC_Init+0x1ec>)
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4973      	ldr	r1, [pc, #460]	; (8001b14 <ADC_Init+0x1ec>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	021a      	lsls	r2, r3, #8
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800197c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6899      	ldr	r1, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	4a58      	ldr	r2, [pc, #352]	; (8001b18 <ADC_Init+0x1f0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d022      	beq.n	8001a02 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6899      	ldr	r1, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6899      	ldr	r1, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	e00f      	b.n	8001a22 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0202 	bic.w	r2, r2, #2
 8001a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6899      	ldr	r1, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	005a      	lsls	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01b      	beq.n	8001a88 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6859      	ldr	r1, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	035a      	lsls	r2, r3, #13
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	e007      	b.n	8001a98 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	051a      	lsls	r2, r3, #20
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6899      	ldr	r1, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ada:	025a      	lsls	r2, r3, #9
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6899      	ldr	r1, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	029a      	lsls	r2, r3, #10
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	609a      	str	r2, [r3, #8]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40012300 	.word	0x40012300
 8001b18:	0f000001 	.word	0x0f000001

08001b1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d13c      	bne.n	8001bb0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d12b      	bne.n	8001ba8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d127      	bne.n	8001ba8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d119      	bne.n	8001ba8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0220 	bic.w	r2, r2, #32
 8001b82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7fe fd5d 	bl	8000668 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bae:	e00e      	b.n	8001bce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f7ff fd53 	bl	8001668 <HAL_ADC_ErrorCallback>
}
 8001bc2:	e004      	b.n	8001bce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	4798      	blx	r3
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7ff fd35 	bl	8001654 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2240      	movs	r2, #64	; 0x40
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f043 0204 	orr.w	r2, r3, #4
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7ff fd28 	bl	8001668 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <__NVIC_SetPriorityGrouping+0x40>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <__NVIC_SetPriorityGrouping+0x40>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00
 8001c64:	05fa0000 	.word	0x05fa0000

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	; (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	; (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	; (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <SysTick_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001da0:	f7ff ff8e 	bl	8001cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SysTick_Config+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <SysTick_Config+0x40>)
 8001dac:	2207      	movs	r2, #7
 8001dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff29 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff3e 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff8e 	bl	8001d14 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5d 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff31 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffa2 	bl	8001d7c <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff fa92 	bl	8001378 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e099      	b.n	8001f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e80:	e00f      	b.n	8001ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e82:	f7ff fa79 	bl	8001378 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d908      	bls.n	8001ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2220      	movs	r2, #32
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2203      	movs	r2, #3
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e078      	b.n	8001f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1e8      	bne.n	8001e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <HAL_DMA_Init+0x158>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d107      	bne.n	8001f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	4313      	orrs	r3, r2
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f023 0307 	bic.w	r3, r3, #7
 8001f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d117      	bne.n	8001f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00e      	beq.n	8001f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fa77 	bl	800243c <DMA_CheckFifoParam>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2240      	movs	r2, #64	; 0x40
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f62:	2301      	movs	r3, #1
 8001f64:	e016      	b.n	8001f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fa2e 	bl	80023d0 <DMA_CalcBaseAndBitshift>
 8001f74:	4603      	mov	r3, r0
 8001f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7c:	223f      	movs	r2, #63	; 0x3f
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	e010803f 	.word	0xe010803f

08001fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_DMA_Start_IT+0x26>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e048      	b.n	8002058 <HAL_DMA_Start_IT+0xb8>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d137      	bne.n	800204a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f9c0 	bl	8002374 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	223f      	movs	r2, #63	; 0x3f
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0216 	orr.w	r2, r2, #22
 800200e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800201e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0208 	orr.w	r2, r2, #8
 8002036:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e005      	b.n	8002056 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002052:	2302      	movs	r3, #2
 8002054:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002056:	7dfb      	ldrb	r3, [r7, #23]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800206c:	4b8e      	ldr	r3, [pc, #568]	; (80022a8 <HAL_DMA_IRQHandler+0x248>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a8e      	ldr	r2, [pc, #568]	; (80022ac <HAL_DMA_IRQHandler+0x24c>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	0a9b      	lsrs	r3, r3, #10
 8002078:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	2208      	movs	r2, #8
 800208c:	409a      	lsls	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01a      	beq.n	80020cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0204 	bic.w	r2, r2, #4
 80020b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2208      	movs	r2, #8
 80020ba:	409a      	lsls	r2, r3
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	2201      	movs	r2, #1
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d012      	beq.n	8002102 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2201      	movs	r2, #1
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f043 0202 	orr.w	r2, r3, #2
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2204      	movs	r2, #4
 8002108:	409a      	lsls	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d012      	beq.n	8002138 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2204      	movs	r2, #4
 8002126:	409a      	lsls	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	f043 0204 	orr.w	r2, r3, #4
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	2210      	movs	r2, #16
 800213e:	409a      	lsls	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d043      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03c      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	2210      	movs	r2, #16
 800215c:	409a      	lsls	r2, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d018      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d108      	bne.n	8002190 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d024      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
 800218e:	e01f      	b.n	80021d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01b      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
 80021a0:	e016      	b.n	80021d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0208 	bic.w	r2, r2, #8
 80021be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	2220      	movs	r2, #32
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 808f 	beq.w	8002300 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8087 	beq.w	8002300 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	2220      	movs	r2, #32
 80021f8:	409a      	lsls	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b05      	cmp	r3, #5
 8002208:	d136      	bne.n	8002278 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0216 	bic.w	r2, r2, #22
 8002218:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002228:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d103      	bne.n	800223a <HAL_DMA_IRQHandler+0x1da>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0208 	bic.w	r2, r2, #8
 8002248:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	223f      	movs	r2, #63	; 0x3f
 8002250:	409a      	lsls	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226a:	2b00      	cmp	r3, #0
 800226c:	d07e      	beq.n	800236c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
        }
        return;
 8002276:	e079      	b.n	800236c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01d      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10d      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	2b00      	cmp	r3, #0
 800229a:	d031      	beq.n	8002300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e02c      	b.n	8002300 <HAL_DMA_IRQHandler+0x2a0>
 80022a6:	bf00      	nop
 80022a8:	20000004 	.word	0x20000004
 80022ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d023      	beq.n	8002300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
 80022c0:	e01e      	b.n	8002300 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10f      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0210 	bic.w	r2, r2, #16
 80022de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	2b00      	cmp	r3, #0
 8002306:	d032      	beq.n	800236e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d022      	beq.n	800235a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2205      	movs	r2, #5
 8002318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	3301      	adds	r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	d307      	bcc.n	8002348 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f2      	bne.n	800232c <HAL_DMA_IRQHandler+0x2cc>
 8002346:	e000      	b.n	800234a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002348:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
 800236a:	e000      	b.n	800236e <HAL_DMA_IRQHandler+0x30e>
        return;
 800236c:	bf00      	nop
    }
  }
}
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002390:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b40      	cmp	r3, #64	; 0x40
 80023a0:	d108      	bne.n	80023b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023b2:	e007      	b.n	80023c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3b10      	subs	r3, #16
 80023e0:	4a13      	ldr	r2, [pc, #76]	; (8002430 <DMA_CalcBaseAndBitshift+0x60>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <DMA_CalcBaseAndBitshift+0x64>)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d908      	bls.n	8002410 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <DMA_CalcBaseAndBitshift+0x68>)
 8002406:	4013      	ands	r3, r2
 8002408:	1d1a      	adds	r2, r3, #4
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	659a      	str	r2, [r3, #88]	; 0x58
 800240e:	e006      	b.n	800241e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <DMA_CalcBaseAndBitshift+0x68>)
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	aaaaaaab 	.word	0xaaaaaaab
 8002434:	0800629c 	.word	0x0800629c
 8002438:	fffffc00 	.word	0xfffffc00

0800243c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11f      	bne.n	8002496 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d856      	bhi.n	800250a <DMA_CheckFifoParam+0xce>
 800245c:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <DMA_CheckFifoParam+0x28>)
 800245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002462:	bf00      	nop
 8002464:	08002475 	.word	0x08002475
 8002468:	08002487 	.word	0x08002487
 800246c:	08002475 	.word	0x08002475
 8002470:	0800250b 	.word	0x0800250b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d046      	beq.n	800250e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002484:	e043      	b.n	800250e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800248e:	d140      	bne.n	8002512 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e03d      	b.n	8002512 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249e:	d121      	bne.n	80024e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d837      	bhi.n	8002516 <DMA_CheckFifoParam+0xda>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <DMA_CheckFifoParam+0x70>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	080024c3 	.word	0x080024c3
 80024b4:	080024bd 	.word	0x080024bd
 80024b8:	080024d5 	.word	0x080024d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      break;
 80024c0:	e030      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d025      	beq.n	800251a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d2:	e022      	b.n	800251a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024dc:	d11f      	bne.n	800251e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024e2:	e01c      	b.n	800251e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d903      	bls.n	80024f2 <DMA_CheckFifoParam+0xb6>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d003      	beq.n	80024f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024f0:	e018      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
      break;
 80024f6:	e015      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00e      	beq.n	8002522 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      break;
 8002508:	e00b      	b.n	8002522 <DMA_CheckFifoParam+0xe6>
      break;
 800250a:	bf00      	nop
 800250c:	e00a      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
 8002510:	e008      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002512:	bf00      	nop
 8002514:	e006      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002516:	bf00      	nop
 8002518:	e004      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 800251a:	bf00      	nop
 800251c:	e002      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;   
 800251e:	bf00      	nop
 8002520:	e000      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002522:	bf00      	nop
    }
  } 
  
  return status; 
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop

08002534 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06a      	b.n	800261c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254c:	2b00      	cmp	r3, #0
 800254e:	d106      	bne.n	800255e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2223      	movs	r2, #35	; 0x23
 8002554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe fc33 	bl	8000dc4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_ETH_Init+0xf0>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	4a30      	ldr	r2, [pc, #192]	; (8002624 <HAL_ETH_Init+0xf0>)
 8002564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002568:	6453      	str	r3, [r2, #68]	; 0x44
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_ETH_Init+0xf0>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002576:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <HAL_ETH_Init+0xf4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a2b      	ldr	r2, [pc, #172]	; (8002628 <HAL_ETH_Init+0xf4>)
 800257c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002580:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002582:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HAL_ETH_Init+0xf4>)
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	4927      	ldr	r1, [pc, #156]	; (8002628 <HAL_ETH_Init+0xf4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_ETH_Init+0xf4>)
 8002592:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ac:	f7fe fee4 	bl	8001378 <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025b2:	e011      	b.n	80025d8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025b4:	f7fe fee0 	bl	8001378 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025c2:	d909      	bls.n	80025d8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2204      	movs	r2, #4
 80025c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	22e0      	movs	r2, #224	; 0xe0
 80025d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e021      	b.n	800261c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1e4      	bne.n	80025b4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f958 	bl	80028a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f9ff 	bl	80029f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fa55 	bl	8002aa6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	461a      	mov	r2, r3
 8002602:	2100      	movs	r1, #0
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f9bd 	bl	8002984 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2210      	movs	r2, #16
 8002616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	40013800 	.word	0x40013800

0800262c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4b51      	ldr	r3, [pc, #324]	; (8002788 <ETH_SetMACConfig+0x15c>)
 8002642:	4013      	ands	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	7c1b      	ldrb	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d102      	bne.n	8002654 <ETH_SetMACConfig+0x28>
 800264e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002652:	e000      	b.n	8002656 <ETH_SetMACConfig+0x2a>
 8002654:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	7c5b      	ldrb	r3, [r3, #17]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <ETH_SetMACConfig+0x38>
 800265e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002662:	e000      	b.n	8002666 <ETH_SetMACConfig+0x3a>
 8002664:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002666:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800266c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	7fdb      	ldrb	r3, [r3, #31]
 8002672:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002674:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800267a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	7f92      	ldrb	r2, [r2, #30]
 8002680:	2a00      	cmp	r2, #0
 8002682:	d102      	bne.n	800268a <ETH_SetMACConfig+0x5e>
 8002684:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002688:	e000      	b.n	800268c <ETH_SetMACConfig+0x60>
 800268a:	2200      	movs	r2, #0
                        macconf->Speed |
 800268c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	7f1b      	ldrb	r3, [r3, #28]
 8002692:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002694:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800269a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	791b      	ldrb	r3, [r3, #4]
 80026a0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	d102      	bne.n	80026b4 <ETH_SetMACConfig+0x88>
 80026ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b2:	e000      	b.n	80026b6 <ETH_SetMACConfig+0x8a>
 80026b4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	7bdb      	ldrb	r3, [r3, #15]
 80026bc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026be:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026cc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026ce:	4313      	orrs	r3, r2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7fe fe52 	bl	8001390 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002702:	4013      	ands	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002712:	2a00      	cmp	r2, #0
 8002714:	d101      	bne.n	800271a <ETH_SetMACConfig+0xee>
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	e000      	b.n	800271c <ETH_SetMACConfig+0xf0>
 800271a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800271c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002722:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800272a:	2a01      	cmp	r2, #1
 800272c:	d101      	bne.n	8002732 <ETH_SetMACConfig+0x106>
 800272e:	2208      	movs	r2, #8
 8002730:	e000      	b.n	8002734 <ETH_SetMACConfig+0x108>
 8002732:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002734:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800273c:	2a01      	cmp	r2, #1
 800273e:	d101      	bne.n	8002744 <ETH_SetMACConfig+0x118>
 8002740:	2204      	movs	r2, #4
 8002742:	e000      	b.n	8002746 <ETH_SetMACConfig+0x11a>
 8002744:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002746:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800274e:	2a01      	cmp	r2, #1
 8002750:	d101      	bne.n	8002756 <ETH_SetMACConfig+0x12a>
 8002752:	2202      	movs	r2, #2
 8002754:	e000      	b.n	8002758 <ETH_SetMACConfig+0x12c>
 8002756:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002758:	4313      	orrs	r3, r2
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002770:	2001      	movs	r0, #1
 8002772:	f7fe fe0d 	bl	8001390 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	ff20810f 	.word	0xff20810f

0800278c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4b3d      	ldr	r3, [pc, #244]	; (800289c <ETH_SetDMAConfig+0x110>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	7b1b      	ldrb	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <ETH_SetDMAConfig+0x2c>
 80027b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027b6:	e000      	b.n	80027ba <ETH_SetDMAConfig+0x2e>
 80027b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	7b5b      	ldrb	r3, [r3, #13]
 80027be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	7f52      	ldrb	r2, [r2, #29]
 80027c6:	2a00      	cmp	r2, #0
 80027c8:	d102      	bne.n	80027d0 <ETH_SetDMAConfig+0x44>
 80027ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027ce:	e000      	b.n	80027d2 <ETH_SetDMAConfig+0x46>
 80027d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	7b9b      	ldrb	r3, [r3, #14]
 80027d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	7f1b      	ldrb	r3, [r3, #28]
 80027e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	7f9b      	ldrb	r3, [r3, #30]
 80027ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002800:	4313      	orrs	r3, r2
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002810:	461a      	mov	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002822:	2001      	movs	r0, #1
 8002824:	f7fe fdb4 	bl	8001390 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002830:	461a      	mov	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	791b      	ldrb	r3, [r3, #4]
 800283a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002840:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002846:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800284c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002854:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002856:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800285e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002864:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800286e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002872:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002880:	2001      	movs	r0, #1
 8002882:	f7fe fd85 	bl	8001390 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	f8de3f23 	.word	0xf8de3f23

080028a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b0a6      	sub	sp, #152	; 0x98
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028b4:	2300      	movs	r3, #0
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028dc:	2300      	movs	r3, #0
 80028de:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002902:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002906:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800290c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002914:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff fe86 	bl	800262c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002920:	2301      	movs	r3, #1
 8002922:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002924:	2301      	movs	r3, #1
 8002926:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800292e:	2301      	movs	r3, #1
 8002930:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002942:	2300      	movs	r3, #0
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800294c:	2301      	movs	r3, #1
 800294e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002954:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002956:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800295a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800295c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002960:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002962:	2301      	movs	r3, #1
 8002964:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002968:	2300      	movs	r3, #0
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002970:	f107 0308 	add.w	r3, r7, #8
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ff08 	bl	800278c <ETH_SetDMAConfig>
}
 800297c:	bf00      	nop
 800297e:	3798      	adds	r7, #152	; 0x98
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3305      	adds	r3, #5
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	3204      	adds	r2, #4
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <ETH_MACAddressConfig+0x68>)
 80029a6:	4413      	add	r3, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3303      	adds	r3, #3
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	061a      	lsls	r2, r3, #24
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3302      	adds	r3, #2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3301      	adds	r3, #1
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	4313      	orrs	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <ETH_MACAddressConfig+0x6c>)
 80029d6:	4413      	add	r3, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	6013      	str	r3, [r2, #0]
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40028040 	.word	0x40028040
 80029f0:	40028044 	.word	0x40028044

080029f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e03e      	b.n	8002a80 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68d9      	ldr	r1, [r3, #12]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	3206      	adds	r2, #6
 8002a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d80c      	bhi.n	8002a64 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68d9      	ldr	r1, [r3, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	e004      	b.n	8002a6e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d9bd      	bls.n	8002a02 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a98:	611a      	str	r2, [r3, #16]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e046      	b.n	8002b42 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6919      	ldr	r1, [r3, #16]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002af0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002af8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	3212      	adds	r2, #18
 8002b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d80c      	bhi.n	8002b32 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6919      	ldr	r1, [r3, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
 8002b30:	e004      	b.n	8002b3c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d9b5      	bls.n	8002ab4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b72:	60da      	str	r2, [r3, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	e175      	b.n	8002e8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	f040 8164 	bne.w	8002e86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d005      	beq.n	8002bd6 <HAL_GPIO_Init+0x56>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d130      	bne.n	8002c38 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2203      	movs	r2, #3
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 0201 	and.w	r2, r3, #1
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d017      	beq.n	8002c74 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d123      	bne.n	8002cc8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	08da      	lsrs	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3208      	adds	r2, #8
 8002c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	220f      	movs	r2, #15
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	08da      	lsrs	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3208      	adds	r2, #8
 8002cc2:	69b9      	ldr	r1, [r7, #24]
 8002cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0203 	and.w	r2, r3, #3
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80be 	beq.w	8002e86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0a:	4b66      	ldr	r3, [pc, #408]	; (8002ea4 <HAL_GPIO_Init+0x324>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a65      	ldr	r2, [pc, #404]	; (8002ea4 <HAL_GPIO_Init+0x324>)
 8002d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_GPIO_Init+0x324>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d22:	4a61      	ldr	r2, [pc, #388]	; (8002ea8 <HAL_GPIO_Init+0x328>)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	220f      	movs	r2, #15
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a58      	ldr	r2, [pc, #352]	; (8002eac <HAL_GPIO_Init+0x32c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d037      	beq.n	8002dbe <HAL_GPIO_Init+0x23e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a57      	ldr	r2, [pc, #348]	; (8002eb0 <HAL_GPIO_Init+0x330>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d031      	beq.n	8002dba <HAL_GPIO_Init+0x23a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a56      	ldr	r2, [pc, #344]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d02b      	beq.n	8002db6 <HAL_GPIO_Init+0x236>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a55      	ldr	r2, [pc, #340]	; (8002eb8 <HAL_GPIO_Init+0x338>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d025      	beq.n	8002db2 <HAL_GPIO_Init+0x232>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a54      	ldr	r2, [pc, #336]	; (8002ebc <HAL_GPIO_Init+0x33c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01f      	beq.n	8002dae <HAL_GPIO_Init+0x22e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a53      	ldr	r2, [pc, #332]	; (8002ec0 <HAL_GPIO_Init+0x340>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d019      	beq.n	8002daa <HAL_GPIO_Init+0x22a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a52      	ldr	r2, [pc, #328]	; (8002ec4 <HAL_GPIO_Init+0x344>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_GPIO_Init+0x226>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a51      	ldr	r2, [pc, #324]	; (8002ec8 <HAL_GPIO_Init+0x348>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00d      	beq.n	8002da2 <HAL_GPIO_Init+0x222>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a50      	ldr	r2, [pc, #320]	; (8002ecc <HAL_GPIO_Init+0x34c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <HAL_GPIO_Init+0x21e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4f      	ldr	r2, [pc, #316]	; (8002ed0 <HAL_GPIO_Init+0x350>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_GPIO_Init+0x21a>
 8002d96:	2309      	movs	r3, #9
 8002d98:	e012      	b.n	8002dc0 <HAL_GPIO_Init+0x240>
 8002d9a:	230a      	movs	r3, #10
 8002d9c:	e010      	b.n	8002dc0 <HAL_GPIO_Init+0x240>
 8002d9e:	2308      	movs	r3, #8
 8002da0:	e00e      	b.n	8002dc0 <HAL_GPIO_Init+0x240>
 8002da2:	2307      	movs	r3, #7
 8002da4:	e00c      	b.n	8002dc0 <HAL_GPIO_Init+0x240>
 8002da6:	2306      	movs	r3, #6
 8002da8:	e00a      	b.n	8002dc0 <HAL_GPIO_Init+0x240>
 8002daa:	2305      	movs	r3, #5
 8002dac:	e008      	b.n	8002dc0 <HAL_GPIO_Init+0x240>
 8002dae:	2304      	movs	r3, #4
 8002db0:	e006      	b.n	8002dc0 <HAL_GPIO_Init+0x240>
 8002db2:	2303      	movs	r3, #3
 8002db4:	e004      	b.n	8002dc0 <HAL_GPIO_Init+0x240>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e002      	b.n	8002dc0 <HAL_GPIO_Init+0x240>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_GPIO_Init+0x240>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	f002 0203 	and.w	r2, r2, #3
 8002dc6:	0092      	lsls	r2, r2, #2
 8002dc8:	4093      	lsls	r3, r2
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dd0:	4935      	ldr	r1, [pc, #212]	; (8002ea8 <HAL_GPIO_Init+0x328>)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_GPIO_Init+0x354>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e02:	4a34      	ldr	r2, [pc, #208]	; (8002ed4 <HAL_GPIO_Init+0x354>)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e08:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <HAL_GPIO_Init+0x354>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e2c:	4a29      	ldr	r2, [pc, #164]	; (8002ed4 <HAL_GPIO_Init+0x354>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e32:	4b28      	ldr	r3, [pc, #160]	; (8002ed4 <HAL_GPIO_Init+0x354>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e56:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <HAL_GPIO_Init+0x354>)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HAL_GPIO_Init+0x354>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e80:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <HAL_GPIO_Init+0x354>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b0f      	cmp	r3, #15
 8002e90:	f67f ae86 	bls.w	8002ba0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3724      	adds	r7, #36	; 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	40020000 	.word	0x40020000
 8002eb0:	40020400 	.word	0x40020400
 8002eb4:	40020800 	.word	0x40020800
 8002eb8:	40020c00 	.word	0x40020c00
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40021400 	.word	0x40021400
 8002ec4:	40021800 	.word	0x40021800
 8002ec8:	40021c00 	.word	0x40021c00
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	40022400 	.word	0x40022400
 8002ed4:	40013c00 	.word	0x40013c00

08002ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee8:	787b      	ldrb	r3, [r7, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ef4:	e003      	b.n	8002efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ef6:	887b      	ldrh	r3, [r7, #2]
 8002ef8:	041a      	lsls	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	619a      	str	r2, [r3, #24]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0c:	b08f      	sub	sp, #60	; 0x3c
 8002f0e:	af0a      	add	r7, sp, #40	; 0x28
 8002f10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e116      	b.n	800314a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe f85c 	bl	8000ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2203      	movs	r2, #3
 8002f40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 ff3a 	bl	8004dd4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	687e      	ldr	r6, [r7, #4]
 8002f68:	466d      	mov	r5, sp
 8002f6a:	f106 0410 	add.w	r4, r6, #16
 8002f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f7e:	1d33      	adds	r3, r6, #4
 8002f80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f82:	6838      	ldr	r0, [r7, #0]
 8002f84:	f001 fece 	bl	8004d24 <USB_CoreInit>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0d7      	b.n	800314a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 ff28 	bl	8004df6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]
 8002faa:	e04a      	b.n	8003042 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	333d      	adds	r3, #61	; 0x3d
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fc0:	7bfa      	ldrb	r2, [r7, #15]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	333c      	adds	r3, #60	; 0x3c
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	b298      	uxth	r0, r3
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3344      	adds	r3, #68	; 0x44
 8002fe8:	4602      	mov	r2, r0
 8002fea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3340      	adds	r3, #64	; 0x40
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	3348      	adds	r3, #72	; 0x48
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	334c      	adds	r3, #76	; 0x4c
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	3354      	adds	r3, #84	; 0x54
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	3301      	adds	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	d3af      	bcc.n	8002fac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800304c:	2300      	movs	r3, #0
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e044      	b.n	80030dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	3301      	adds	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d3b5      	bcc.n	8003052 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	687e      	ldr	r6, [r7, #4]
 80030ee:	466d      	mov	r5, sp
 80030f0:	f106 0410 	add.w	r4, r6, #16
 80030f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003100:	e885 0003 	stmia.w	r5, {r0, r1}
 8003104:	1d33      	adds	r3, r6, #4
 8003106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003108:	6838      	ldr	r0, [r7, #0]
 800310a:	f001 fec1 	bl	8004e90 <USB_DevInit>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e014      	b.n	800314a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f80b 	bl	8003154 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f002 f87f 	bl	8005246 <USB_DevDisconnect>

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003154 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_PCDEx_ActivateLPM+0x44>)
 8003184:	4313      	orrs	r3, r2
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	10000003 	.word	0x10000003

0800319c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031aa:	6013      	str	r3, [r2, #0]
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40007000 	.word	0x40007000

080031bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_PWREx_EnableOverDrive+0x98>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a22      	ldr	r2, [pc, #136]	; (8003254 <HAL_PWREx_EnableOverDrive+0x98>)
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_PWREx_EnableOverDrive+0x98>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ea:	f7fe f8c5 	bl	8001378 <HAL_GetTick>
 80031ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031f0:	e009      	b.n	8003206 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031f2:	f7fe f8c1 	bl	8001378 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003200:	d901      	bls.n	8003206 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e022      	b.n	800324c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003212:	d1ee      	bne.n	80031f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003214:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 800321a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003220:	f7fe f8aa 	bl	8001378 <HAL_GetTick>
 8003224:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003226:	e009      	b.n	800323c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003228:	f7fe f8a6 	bl	8001378 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003236:	d901      	bls.n	800323c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e007      	b.n	800324c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_PWREx_EnableOverDrive+0x9c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003248:	d1ee      	bne.n	8003228 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40023800 	.word	0x40023800
 8003258:	40007000 	.word	0x40007000

0800325c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e29b      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8087 	beq.w	800338e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003280:	4b96      	ldr	r3, [pc, #600]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	2b04      	cmp	r3, #4
 800328a:	d00c      	beq.n	80032a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328c:	4b93      	ldr	r3, [pc, #588]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b08      	cmp	r3, #8
 8003296:	d112      	bne.n	80032be <HAL_RCC_OscConfig+0x62>
 8003298:	4b90      	ldr	r3, [pc, #576]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a4:	d10b      	bne.n	80032be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a6:	4b8d      	ldr	r3, [pc, #564]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d06c      	beq.n	800338c <HAL_RCC_OscConfig+0x130>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d168      	bne.n	800338c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e275      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x7a>
 80032c8:	4b84      	ldr	r3, [pc, #528]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a83      	ldr	r2, [pc, #524]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	e02e      	b.n	8003334 <HAL_RCC_OscConfig+0xd8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x9c>
 80032de:	4b7f      	ldr	r3, [pc, #508]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7e      	ldr	r2, [pc, #504]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b7c      	ldr	r3, [pc, #496]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7b      	ldr	r2, [pc, #492]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80032f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e01d      	b.n	8003334 <HAL_RCC_OscConfig+0xd8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0xc0>
 8003302:	4b76      	ldr	r3, [pc, #472]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a75      	ldr	r2, [pc, #468]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b73      	ldr	r3, [pc, #460]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a72      	ldr	r2, [pc, #456]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0xd8>
 800331c:	4b6f      	ldr	r3, [pc, #444]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6e      	ldr	r2, [pc, #440]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b6c      	ldr	r3, [pc, #432]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6b      	ldr	r2, [pc, #428]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe f81c 	bl	8001378 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7fe f818 	bl	8001378 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e229      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b61      	ldr	r3, [pc, #388]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0xe8>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe f808 	bl	8001378 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe f804 	bl	8001378 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e215      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x110>
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d069      	beq.n	800346e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800339a:	4b50      	ldr	r3, [pc, #320]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a6:	4b4d      	ldr	r3, [pc, #308]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d11c      	bne.n	80033ec <HAL_RCC_OscConfig+0x190>
 80033b2:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d116      	bne.n	80033ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_RCC_OscConfig+0x17a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e1e9      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	4b41      	ldr	r3, [pc, #260]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	493d      	ldr	r1, [pc, #244]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ea:	e040      	b.n	800346e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d023      	beq.n	800343c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f4:	4b39      	ldr	r3, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a38      	ldr	r2, [pc, #224]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fd ffba 	bl	8001378 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003408:	f7fd ffb6 	bl	8001378 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1c7      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341a:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4929      	ldr	r1, [pc, #164]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
 800343a:	e018      	b.n	800346e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343c:	4b27      	ldr	r3, [pc, #156]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a26      	ldr	r2, [pc, #152]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fd ff96 	bl	8001378 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003450:	f7fd ff92 	bl	8001378 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1a3      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d038      	beq.n	80034ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d019      	beq.n	80034b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003482:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003486:	4a15      	ldr	r2, [pc, #84]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fd ff73 	bl	8001378 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003496:	f7fd ff6f 	bl	8001378 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e180      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80034aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x23a>
 80034b4:	e01a      	b.n	80034ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80034b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ba:	4a08      	ldr	r2, [pc, #32]	; (80034dc <HAL_RCC_OscConfig+0x280>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fd ff59 	bl	8001378 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fd ff55 	bl	8001378 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d903      	bls.n	80034e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e166      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
 80034dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	4b92      	ldr	r3, [pc, #584]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80034e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ee      	bne.n	80034ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a4 	beq.w	8003642 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fa:	4b8c      	ldr	r3, [pc, #560]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	4b89      	ldr	r3, [pc, #548]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a88      	ldr	r2, [pc, #544]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b86      	ldr	r3, [pc, #536]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003522:	4b83      	ldr	r3, [pc, #524]	; (8003730 <HAL_RCC_OscConfig+0x4d4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800352e:	4b80      	ldr	r3, [pc, #512]	; (8003730 <HAL_RCC_OscConfig+0x4d4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7f      	ldr	r2, [pc, #508]	; (8003730 <HAL_RCC_OscConfig+0x4d4>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7fd ff1d 	bl	8001378 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7fd ff19 	bl	8001378 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b64      	cmp	r3, #100	; 0x64
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e12a      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003554:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCC_OscConfig+0x4d4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x31a>
 8003568:	4b70      	ldr	r3, [pc, #448]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a6f      	ldr	r2, [pc, #444]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
 8003574:	e02d      	b.n	80035d2 <HAL_RCC_OscConfig+0x376>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x33c>
 800357e:	4b6b      	ldr	r3, [pc, #428]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	4a6a      	ldr	r2, [pc, #424]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	6713      	str	r3, [r2, #112]	; 0x70
 800358a:	4b68      	ldr	r3, [pc, #416]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	4a67      	ldr	r2, [pc, #412]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003590:	f023 0304 	bic.w	r3, r3, #4
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
 8003596:	e01c      	b.n	80035d2 <HAL_RCC_OscConfig+0x376>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b05      	cmp	r3, #5
 800359e:	d10c      	bne.n	80035ba <HAL_RCC_OscConfig+0x35e>
 80035a0:	4b62      	ldr	r3, [pc, #392]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a61      	ldr	r2, [pc, #388]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035a6:	f043 0304 	orr.w	r3, r3, #4
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a5e      	ldr	r2, [pc, #376]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	e00b      	b.n	80035d2 <HAL_RCC_OscConfig+0x376>
 80035ba:	4b5c      	ldr	r3, [pc, #368]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a5b      	ldr	r2, [pc, #364]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
 80035c6:	4b59      	ldr	r3, [pc, #356]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	4a58      	ldr	r2, [pc, #352]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d015      	beq.n	8003606 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fd fecd 	bl	8001378 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e2:	f7fd fec9 	bl	8001378 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0d8      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	4b4c      	ldr	r3, [pc, #304]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ee      	beq.n	80035e2 <HAL_RCC_OscConfig+0x386>
 8003604:	e014      	b.n	8003630 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003606:	f7fd feb7 	bl	8001378 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360c:	e00a      	b.n	8003624 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fd feb3 	bl	8001378 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	; 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0c2      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	4b41      	ldr	r3, [pc, #260]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ee      	bne.n	800360e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d105      	bne.n	8003642 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003636:	4b3d      	ldr	r3, [pc, #244]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a3c      	ldr	r2, [pc, #240]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800363c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80ae 	beq.w	80037a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364c:	4b37      	ldr	r3, [pc, #220]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b08      	cmp	r3, #8
 8003656:	d06d      	beq.n	8003734 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d14b      	bne.n	80036f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003660:	4b32      	ldr	r3, [pc, #200]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a31      	ldr	r2, [pc, #196]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800366a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fd fe84 	bl	8001378 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fd fe80 	bl	8001378 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e091      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	4b29      	ldr	r3, [pc, #164]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	019b      	lsls	r3, r3, #6
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	3b01      	subs	r3, #1
 80036ac:	041b      	lsls	r3, r3, #16
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	071b      	lsls	r3, r3, #28
 80036be:	491b      	ldr	r1, [pc, #108]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fd fe52 	bl	8001378 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fd fe4e 	bl	8001378 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e05f      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x47c>
 80036f6:	e057      	b.n	80037a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0b      	ldr	r2, [pc, #44]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fd fe38 	bl	8001378 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370c:	f7fd fe34 	bl	8001378 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e045      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_RCC_OscConfig+0x4d0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x4b0>
 800372a:	e03d      	b.n	80037a8 <HAL_RCC_OscConfig+0x54c>
 800372c:	40023800 	.word	0x40023800
 8003730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003734:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <HAL_RCC_OscConfig+0x558>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d030      	beq.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374c:	429a      	cmp	r2, r3
 800374e:	d129      	bne.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d122      	bne.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003764:	4013      	ands	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800376a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800376c:	4293      	cmp	r3, r2
 800376e:	d119      	bne.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	3b01      	subs	r3, #1
 800377e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d10f      	bne.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800

080037b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0d0      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b6a      	ldr	r3, [pc, #424]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d910      	bls.n	8003800 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b67      	ldr	r3, [pc, #412]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 020f 	bic.w	r2, r3, #15
 80037e6:	4965      	ldr	r1, [pc, #404]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b63      	ldr	r3, [pc, #396]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0b8      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d020      	beq.n	800384e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003818:	4b59      	ldr	r3, [pc, #356]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a58      	ldr	r2, [pc, #352]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800381e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003822:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003830:	4b53      	ldr	r3, [pc, #332]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4a52      	ldr	r2, [pc, #328]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800383a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	4b50      	ldr	r3, [pc, #320]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	494d      	ldr	r1, [pc, #308]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d040      	beq.n	80038dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b47      	ldr	r3, [pc, #284]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d115      	bne.n	800389a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e07f      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387a:	4b41      	ldr	r3, [pc, #260]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e073      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06b      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389a:	4b39      	ldr	r3, [pc, #228]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4936      	ldr	r1, [pc, #216]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ac:	f7fd fd64 	bl	8001378 <HAL_GetTick>
 80038b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b4:	f7fd fd60 	bl	8001378 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e053      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 020c 	and.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1eb      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b27      	ldr	r3, [pc, #156]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d210      	bcs.n	800390c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 020f 	bic.w	r2, r3, #15
 80038f2:	4922      	ldr	r1, [pc, #136]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e032      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4916      	ldr	r1, [pc, #88]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	490e      	ldr	r1, [pc, #56]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800394a:	f000 f821 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800394e:	4602      	mov	r2, r0
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	490a      	ldr	r1, [pc, #40]	; (8003984 <HAL_RCC_ClockConfig+0x1cc>)
 800395c:	5ccb      	ldrb	r3, [r1, r3]
 800395e:	fa22 f303 	lsr.w	r3, r2, r3
 8003962:	4a09      	ldr	r2, [pc, #36]	; (8003988 <HAL_RCC_ClockConfig+0x1d0>)
 8003964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1d4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd fcc0 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023c00 	.word	0x40023c00
 8003980:	40023800 	.word	0x40023800
 8003984:	08006284 	.word	0x08006284
 8003988:	20000004 	.word	0x20000004
 800398c:	20000008 	.word	0x20000008

08003990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003994:	b094      	sub	sp, #80	; 0x50
 8003996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	647b      	str	r3, [r7, #68]	; 0x44
 800399c:	2300      	movs	r3, #0
 800399e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a0:	2300      	movs	r3, #0
 80039a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a8:	4b79      	ldr	r3, [pc, #484]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d00d      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x40>
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	f200 80e1 	bhi.w	8003b7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x34>
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d003      	beq.n	80039ca <HAL_RCC_GetSysClockFreq+0x3a>
 80039c2:	e0db      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c4:	4b73      	ldr	r3, [pc, #460]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x204>)
 80039c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039c8:	e0db      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ca:	4b73      	ldr	r3, [pc, #460]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x208>)
 80039cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ce:	e0d8      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d0:	4b6f      	ldr	r3, [pc, #444]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039da:	4b6d      	ldr	r3, [pc, #436]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d063      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e6:	4b6a      	ldr	r3, [pc, #424]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	099b      	lsrs	r3, r3, #6
 80039ec:	2200      	movs	r2, #0
 80039ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80039f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
 80039fa:	2300      	movs	r3, #0
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
 80039fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a02:	4622      	mov	r2, r4
 8003a04:	462b      	mov	r3, r5
 8003a06:	f04f 0000 	mov.w	r0, #0
 8003a0a:	f04f 0100 	mov.w	r1, #0
 8003a0e:	0159      	lsls	r1, r3, #5
 8003a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a14:	0150      	lsls	r0, r2, #5
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	1a51      	subs	r1, r2, r1
 8003a1e:	6139      	str	r1, [r7, #16]
 8003a20:	4629      	mov	r1, r5
 8003a22:	eb63 0301 	sbc.w	r3, r3, r1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a34:	4659      	mov	r1, fp
 8003a36:	018b      	lsls	r3, r1, #6
 8003a38:	4651      	mov	r1, sl
 8003a3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a3e:	4651      	mov	r1, sl
 8003a40:	018a      	lsls	r2, r1, #6
 8003a42:	4651      	mov	r1, sl
 8003a44:	ebb2 0801 	subs.w	r8, r2, r1
 8003a48:	4659      	mov	r1, fp
 8003a4a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a62:	4690      	mov	r8, r2
 8003a64:	4699      	mov	r9, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	eb18 0303 	adds.w	r3, r8, r3
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	462b      	mov	r3, r5
 8003a70:	eb49 0303 	adc.w	r3, r9, r3
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a82:	4629      	mov	r1, r5
 8003a84:	024b      	lsls	r3, r1, #9
 8003a86:	4621      	mov	r1, r4
 8003a88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	024a      	lsls	r2, r1, #9
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a96:	2200      	movs	r2, #0
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aa0:	f7fc fc1e 	bl	80002e0 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aac:	e058      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aae:	4b38      	ldr	r3, [pc, #224]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	099b      	lsrs	r3, r3, #6
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	4611      	mov	r1, r2
 8003aba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ac8:	4642      	mov	r2, r8
 8003aca:	464b      	mov	r3, r9
 8003acc:	f04f 0000 	mov.w	r0, #0
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	0159      	lsls	r1, r3, #5
 8003ad6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ada:	0150      	lsls	r0, r2, #5
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003af8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003afc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b00:	ebb2 040a 	subs.w	r4, r2, sl
 8003b04:	eb63 050b 	sbc.w	r5, r3, fp
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	00eb      	lsls	r3, r5, #3
 8003b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b16:	00e2      	lsls	r2, r4, #3
 8003b18:	4614      	mov	r4, r2
 8003b1a:	461d      	mov	r5, r3
 8003b1c:	4643      	mov	r3, r8
 8003b1e:	18e3      	adds	r3, r4, r3
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	464b      	mov	r3, r9
 8003b24:	eb45 0303 	adc.w	r3, r5, r3
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b36:	4629      	mov	r1, r5
 8003b38:	028b      	lsls	r3, r1, #10
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b40:	4621      	mov	r1, r4
 8003b42:	028a      	lsls	r2, r1, #10
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	61fa      	str	r2, [r7, #28]
 8003b50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b54:	f7fc fbc4 	bl	80002e0 <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b7a:	e002      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3750      	adds	r7, #80	; 0x50
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	00f42400 	.word	0x00f42400
 8003b98:	007a1200 	.word	0x007a1200

08003b9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000004 	.word	0x20000004

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bb8:	f7ff fff0 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0a9b      	lsrs	r3, r3, #10
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	08006294 	.word	0x08006294

08003bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be0:	f7ff ffdc 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0b5b      	lsrs	r3, r3, #13
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	08006294 	.word	0x08006294

08003c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d012      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c2c:	4b69      	ldr	r3, [pc, #420]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a68      	ldr	r2, [pc, #416]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c36:	6093      	str	r3, [r2, #8]
 8003c38:	4b66      	ldr	r3, [pc, #408]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	4964      	ldr	r1, [pc, #400]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d017      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c5e:	4b5d      	ldr	r3, [pc, #372]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	4959      	ldr	r1, [pc, #356]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d017      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c9a:	4b4e      	ldr	r3, [pc, #312]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	494a      	ldr	r1, [pc, #296]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 808b 	beq.w	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ce8:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	4a39      	ldr	r2, [pc, #228]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf4:	4b37      	ldr	r3, [pc, #220]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d00:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a34      	ldr	r2, [pc, #208]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fb34 	bl	8001378 <HAL_GetTick>
 8003d10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d14:	f7fd fb30 	bl	8001378 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e38f      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d26:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d32:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d035      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d02e      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d50:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d72:	4a18      	ldr	r2, [pc, #96]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d78:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d114      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fd faf8 	bl	8001378 <HAL_GetTick>
 8003d88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fd faf4 	bl	8001378 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e351      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da2:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0ee      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dba:	d111      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dca:	400b      	ands	r3, r1
 8003dcc:	4901      	ldr	r1, [pc, #4]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
 8003dd2:	e00b      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40007000 	.word	0x40007000
 8003ddc:	0ffffcff 	.word	0x0ffffcff
 8003de0:	4bac      	ldr	r3, [pc, #688]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4aab      	ldr	r2, [pc, #684]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dea:	6093      	str	r3, [r2, #8]
 8003dec:	4ba9      	ldr	r3, [pc, #676]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df8:	49a6      	ldr	r1, [pc, #664]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d010      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e0a:	4ba2      	ldr	r3, [pc, #648]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e10:	4aa0      	ldr	r2, [pc, #640]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e1a:	4b9e      	ldr	r3, [pc, #632]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	499b      	ldr	r1, [pc, #620]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e38:	4b96      	ldr	r3, [pc, #600]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e46:	4993      	ldr	r1, [pc, #588]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e5a:	4b8e      	ldr	r3, [pc, #568]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e68:	498a      	ldr	r1, [pc, #552]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e7c:	4b85      	ldr	r3, [pc, #532]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8a:	4982      	ldr	r1, [pc, #520]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e9e:	4b7d      	ldr	r3, [pc, #500]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4979      	ldr	r1, [pc, #484]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ec0:	4b74      	ldr	r3, [pc, #464]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	4971      	ldr	r1, [pc, #452]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee2:	4b6c      	ldr	r3, [pc, #432]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	f023 020c 	bic.w	r2, r3, #12
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef0:	4968      	ldr	r1, [pc, #416]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f04:	4b63      	ldr	r3, [pc, #396]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f12:	4960      	ldr	r1, [pc, #384]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f26:	4b5b      	ldr	r3, [pc, #364]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f34:	4957      	ldr	r1, [pc, #348]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f48:	4b52      	ldr	r3, [pc, #328]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	494f      	ldr	r1, [pc, #316]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	4946      	ldr	r1, [pc, #280]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f8c:	4b41      	ldr	r3, [pc, #260]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	493e      	ldr	r1, [pc, #248]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fae:	4b39      	ldr	r3, [pc, #228]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbc:	4935      	ldr	r1, [pc, #212]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fd0:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fde:	492d      	ldr	r1, [pc, #180]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d011      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ff2:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004000:	4924      	ldr	r1, [pc, #144]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004010:	d101      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004012:	2301      	movs	r3, #1
 8004014:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004022:	2301      	movs	r3, #1
 8004024:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004032:	4b18      	ldr	r3, [pc, #96]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004040:	4914      	ldr	r1, [pc, #80]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004064:	490b      	ldr	r1, [pc, #44]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00f      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004088:	4902      	ldr	r1, [pc, #8]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004090:	e002      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004092:	bf00      	nop
 8004094:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040a4:	4b8a      	ldr	r3, [pc, #552]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	4986      	ldr	r1, [pc, #536]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00b      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040c8:	4b81      	ldr	r3, [pc, #516]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d8:	497d      	ldr	r1, [pc, #500]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d006      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80d6 	beq.w	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040f4:	4b76      	ldr	r3, [pc, #472]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a75      	ldr	r2, [pc, #468]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004100:	f7fd f93a 	bl	8001378 <HAL_GetTick>
 8004104:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004108:	f7fd f936 	bl	8001378 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e195      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800411a:	4b6d      	ldr	r3, [pc, #436]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d021      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11d      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800413a:	4b65      	ldr	r3, [pc, #404]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004148:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414e:	0e1b      	lsrs	r3, r3, #24
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	019a      	lsls	r2, r3, #6
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	041b      	lsls	r3, r3, #16
 8004160:	431a      	orrs	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	071b      	lsls	r3, r3, #28
 800416e:	4958      	ldr	r1, [pc, #352]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d004      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02e      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a0:	d129      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041a2:	4b4b      	ldr	r3, [pc, #300]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a8:	0c1b      	lsrs	r3, r3, #16
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041b0:	4b47      	ldr	r3, [pc, #284]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b6:	0f1b      	lsrs	r3, r3, #28
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	019a      	lsls	r2, r3, #6
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	041b      	lsls	r3, r3, #16
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	061b      	lsls	r3, r3, #24
 80041d0:	431a      	orrs	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	071b      	lsls	r3, r3, #28
 80041d6:	493e      	ldr	r1, [pc, #248]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041de:	4b3c      	ldr	r3, [pc, #240]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e4:	f023 021f 	bic.w	r2, r3, #31
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	3b01      	subs	r3, #1
 80041ee:	4938      	ldr	r1, [pc, #224]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01d      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004202:	4b33      	ldr	r3, [pc, #204]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004208:	0e1b      	lsrs	r3, r3, #24
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004210:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004216:	0f1b      	lsrs	r3, r3, #28
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	019a      	lsls	r2, r3, #6
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	431a      	orrs	r2, r3
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	061b      	lsls	r3, r3, #24
 8004230:	431a      	orrs	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	071b      	lsls	r3, r3, #28
 8004236:	4926      	ldr	r1, [pc, #152]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d011      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	019a      	lsls	r2, r3, #6
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	491a      	ldr	r1, [pc, #104]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800426e:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a17      	ldr	r2, [pc, #92]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004274:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427a:	f7fd f87d 	bl	8001378 <HAL_GetTick>
 800427e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004280:	e008      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004282:	f7fd f879 	bl	8001378 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b64      	cmp	r3, #100	; 0x64
 800428e:	d901      	bls.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e0d8      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004294:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	f040 80ce 	bne.w	8004444 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b4:	f7fd f860 	bl	8001378 <HAL_GetTick>
 80042b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042ba:	e00b      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042bc:	f7fd f85c 	bl	8001378 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d904      	bls.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e0bb      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042d4:	4b5e      	ldr	r3, [pc, #376]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e0:	d0ec      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d02e      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d12a      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800430a:	4b51      	ldr	r3, [pc, #324]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004318:	4b4d      	ldr	r3, [pc, #308]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	0f1b      	lsrs	r3, r3, #28
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	019a      	lsls	r2, r3, #6
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	041b      	lsls	r3, r3, #16
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	061b      	lsls	r3, r3, #24
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	071b      	lsls	r3, r3, #28
 800433e:	4944      	ldr	r1, [pc, #272]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004346:	4b42      	ldr	r3, [pc, #264]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	3b01      	subs	r3, #1
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	493d      	ldr	r1, [pc, #244]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d022      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004374:	d11d      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004376:	4b36      	ldr	r3, [pc, #216]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	0e1b      	lsrs	r3, r3, #24
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004384:	4b32      	ldr	r3, [pc, #200]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	0f1b      	lsrs	r3, r3, #28
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	019a      	lsls	r2, r3, #6
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	041b      	lsls	r3, r3, #16
 800439e:	431a      	orrs	r2, r3
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	061b      	lsls	r3, r3, #24
 80043a4:	431a      	orrs	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	071b      	lsls	r3, r3, #28
 80043aa:	4929      	ldr	r1, [pc, #164]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d028      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043be:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	0e1b      	lsrs	r3, r3, #24
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043cc:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	019a      	lsls	r2, r3, #6
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	431a      	orrs	r2, r3
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	061b      	lsls	r3, r3, #24
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	071b      	lsls	r3, r3, #28
 80043f2:	4917      	ldr	r1, [pc, #92]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	4911      	ldr	r1, [pc, #68]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a0e      	ldr	r2, [pc, #56]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441c:	f7fc ffac 	bl	8001378 <HAL_GetTick>
 8004420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004424:	f7fc ffa8 	bl	8001378 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e007      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800443e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004442:	d1ef      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800

08004454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e040      	b.n	80044e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fc fd5c 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2224      	movs	r2, #36	; 0x24
 8004480:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f82c 	bl	80044f0 <UART_SetConfig>
 8004498:	4603      	mov	r3, r0
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e022      	b.n	80044e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa84 	bl	80049b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fb0b 	bl	8004afc <UART_CheckIdleState>
 80044e6:	4603      	mov	r3, r0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4ba6      	ldr	r3, [pc, #664]	; (80047b4 <UART_SetConfig+0x2c4>)
 800451c:	4013      	ands	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	430b      	orrs	r3, r1
 8004526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	430a      	orrs	r2, r1
 8004560:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a94      	ldr	r2, [pc, #592]	; (80047b8 <UART_SetConfig+0x2c8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d120      	bne.n	80045ae <UART_SetConfig+0xbe>
 800456c:	4b93      	ldr	r3, [pc, #588]	; (80047bc <UART_SetConfig+0x2cc>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b03      	cmp	r3, #3
 8004578:	d816      	bhi.n	80045a8 <UART_SetConfig+0xb8>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <UART_SetConfig+0x90>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	08004591 	.word	0x08004591
 8004584:	0800459d 	.word	0x0800459d
 8004588:	08004597 	.word	0x08004597
 800458c:	080045a3 	.word	0x080045a3
 8004590:	2301      	movs	r3, #1
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e150      	b.n	8004838 <UART_SetConfig+0x348>
 8004596:	2302      	movs	r3, #2
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e14d      	b.n	8004838 <UART_SetConfig+0x348>
 800459c:	2304      	movs	r3, #4
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e14a      	b.n	8004838 <UART_SetConfig+0x348>
 80045a2:	2308      	movs	r3, #8
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e147      	b.n	8004838 <UART_SetConfig+0x348>
 80045a8:	2310      	movs	r3, #16
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e144      	b.n	8004838 <UART_SetConfig+0x348>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a83      	ldr	r2, [pc, #524]	; (80047c0 <UART_SetConfig+0x2d0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d132      	bne.n	800461e <UART_SetConfig+0x12e>
 80045b8:	4b80      	ldr	r3, [pc, #512]	; (80047bc <UART_SetConfig+0x2cc>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b0c      	cmp	r3, #12
 80045c4:	d828      	bhi.n	8004618 <UART_SetConfig+0x128>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0xdc>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	08004601 	.word	0x08004601
 80045d0:	08004619 	.word	0x08004619
 80045d4:	08004619 	.word	0x08004619
 80045d8:	08004619 	.word	0x08004619
 80045dc:	0800460d 	.word	0x0800460d
 80045e0:	08004619 	.word	0x08004619
 80045e4:	08004619 	.word	0x08004619
 80045e8:	08004619 	.word	0x08004619
 80045ec:	08004607 	.word	0x08004607
 80045f0:	08004619 	.word	0x08004619
 80045f4:	08004619 	.word	0x08004619
 80045f8:	08004619 	.word	0x08004619
 80045fc:	08004613 	.word	0x08004613
 8004600:	2300      	movs	r3, #0
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e118      	b.n	8004838 <UART_SetConfig+0x348>
 8004606:	2302      	movs	r3, #2
 8004608:	77fb      	strb	r3, [r7, #31]
 800460a:	e115      	b.n	8004838 <UART_SetConfig+0x348>
 800460c:	2304      	movs	r3, #4
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e112      	b.n	8004838 <UART_SetConfig+0x348>
 8004612:	2308      	movs	r3, #8
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e10f      	b.n	8004838 <UART_SetConfig+0x348>
 8004618:	2310      	movs	r3, #16
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e10c      	b.n	8004838 <UART_SetConfig+0x348>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a68      	ldr	r2, [pc, #416]	; (80047c4 <UART_SetConfig+0x2d4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d120      	bne.n	800466a <UART_SetConfig+0x17a>
 8004628:	4b64      	ldr	r3, [pc, #400]	; (80047bc <UART_SetConfig+0x2cc>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004632:	2b30      	cmp	r3, #48	; 0x30
 8004634:	d013      	beq.n	800465e <UART_SetConfig+0x16e>
 8004636:	2b30      	cmp	r3, #48	; 0x30
 8004638:	d814      	bhi.n	8004664 <UART_SetConfig+0x174>
 800463a:	2b20      	cmp	r3, #32
 800463c:	d009      	beq.n	8004652 <UART_SetConfig+0x162>
 800463e:	2b20      	cmp	r3, #32
 8004640:	d810      	bhi.n	8004664 <UART_SetConfig+0x174>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <UART_SetConfig+0x15c>
 8004646:	2b10      	cmp	r3, #16
 8004648:	d006      	beq.n	8004658 <UART_SetConfig+0x168>
 800464a:	e00b      	b.n	8004664 <UART_SetConfig+0x174>
 800464c:	2300      	movs	r3, #0
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e0f2      	b.n	8004838 <UART_SetConfig+0x348>
 8004652:	2302      	movs	r3, #2
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e0ef      	b.n	8004838 <UART_SetConfig+0x348>
 8004658:	2304      	movs	r3, #4
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e0ec      	b.n	8004838 <UART_SetConfig+0x348>
 800465e:	2308      	movs	r3, #8
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e0e9      	b.n	8004838 <UART_SetConfig+0x348>
 8004664:	2310      	movs	r3, #16
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e0e6      	b.n	8004838 <UART_SetConfig+0x348>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a56      	ldr	r2, [pc, #344]	; (80047c8 <UART_SetConfig+0x2d8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d120      	bne.n	80046b6 <UART_SetConfig+0x1c6>
 8004674:	4b51      	ldr	r3, [pc, #324]	; (80047bc <UART_SetConfig+0x2cc>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800467e:	2bc0      	cmp	r3, #192	; 0xc0
 8004680:	d013      	beq.n	80046aa <UART_SetConfig+0x1ba>
 8004682:	2bc0      	cmp	r3, #192	; 0xc0
 8004684:	d814      	bhi.n	80046b0 <UART_SetConfig+0x1c0>
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	d009      	beq.n	800469e <UART_SetConfig+0x1ae>
 800468a:	2b80      	cmp	r3, #128	; 0x80
 800468c:	d810      	bhi.n	80046b0 <UART_SetConfig+0x1c0>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <UART_SetConfig+0x1a8>
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d006      	beq.n	80046a4 <UART_SetConfig+0x1b4>
 8004696:	e00b      	b.n	80046b0 <UART_SetConfig+0x1c0>
 8004698:	2300      	movs	r3, #0
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e0cc      	b.n	8004838 <UART_SetConfig+0x348>
 800469e:	2302      	movs	r3, #2
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e0c9      	b.n	8004838 <UART_SetConfig+0x348>
 80046a4:	2304      	movs	r3, #4
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e0c6      	b.n	8004838 <UART_SetConfig+0x348>
 80046aa:	2308      	movs	r3, #8
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	e0c3      	b.n	8004838 <UART_SetConfig+0x348>
 80046b0:	2310      	movs	r3, #16
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e0c0      	b.n	8004838 <UART_SetConfig+0x348>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a44      	ldr	r2, [pc, #272]	; (80047cc <UART_SetConfig+0x2dc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d125      	bne.n	800470c <UART_SetConfig+0x21c>
 80046c0:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <UART_SetConfig+0x2cc>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ce:	d017      	beq.n	8004700 <UART_SetConfig+0x210>
 80046d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d4:	d817      	bhi.n	8004706 <UART_SetConfig+0x216>
 80046d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046da:	d00b      	beq.n	80046f4 <UART_SetConfig+0x204>
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e0:	d811      	bhi.n	8004706 <UART_SetConfig+0x216>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <UART_SetConfig+0x1fe>
 80046e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ea:	d006      	beq.n	80046fa <UART_SetConfig+0x20a>
 80046ec:	e00b      	b.n	8004706 <UART_SetConfig+0x216>
 80046ee:	2300      	movs	r3, #0
 80046f0:	77fb      	strb	r3, [r7, #31]
 80046f2:	e0a1      	b.n	8004838 <UART_SetConfig+0x348>
 80046f4:	2302      	movs	r3, #2
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e09e      	b.n	8004838 <UART_SetConfig+0x348>
 80046fa:	2304      	movs	r3, #4
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e09b      	b.n	8004838 <UART_SetConfig+0x348>
 8004700:	2308      	movs	r3, #8
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e098      	b.n	8004838 <UART_SetConfig+0x348>
 8004706:	2310      	movs	r3, #16
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e095      	b.n	8004838 <UART_SetConfig+0x348>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2f      	ldr	r2, [pc, #188]	; (80047d0 <UART_SetConfig+0x2e0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d125      	bne.n	8004762 <UART_SetConfig+0x272>
 8004716:	4b29      	ldr	r3, [pc, #164]	; (80047bc <UART_SetConfig+0x2cc>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004724:	d017      	beq.n	8004756 <UART_SetConfig+0x266>
 8004726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800472a:	d817      	bhi.n	800475c <UART_SetConfig+0x26c>
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004730:	d00b      	beq.n	800474a <UART_SetConfig+0x25a>
 8004732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004736:	d811      	bhi.n	800475c <UART_SetConfig+0x26c>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <UART_SetConfig+0x254>
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004740:	d006      	beq.n	8004750 <UART_SetConfig+0x260>
 8004742:	e00b      	b.n	800475c <UART_SetConfig+0x26c>
 8004744:	2301      	movs	r3, #1
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e076      	b.n	8004838 <UART_SetConfig+0x348>
 800474a:	2302      	movs	r3, #2
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e073      	b.n	8004838 <UART_SetConfig+0x348>
 8004750:	2304      	movs	r3, #4
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e070      	b.n	8004838 <UART_SetConfig+0x348>
 8004756:	2308      	movs	r3, #8
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e06d      	b.n	8004838 <UART_SetConfig+0x348>
 800475c:	2310      	movs	r3, #16
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e06a      	b.n	8004838 <UART_SetConfig+0x348>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <UART_SetConfig+0x2e4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d138      	bne.n	80047de <UART_SetConfig+0x2ee>
 800476c:	4b13      	ldr	r3, [pc, #76]	; (80047bc <UART_SetConfig+0x2cc>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004776:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800477a:	d017      	beq.n	80047ac <UART_SetConfig+0x2bc>
 800477c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004780:	d82a      	bhi.n	80047d8 <UART_SetConfig+0x2e8>
 8004782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004786:	d00b      	beq.n	80047a0 <UART_SetConfig+0x2b0>
 8004788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478c:	d824      	bhi.n	80047d8 <UART_SetConfig+0x2e8>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <UART_SetConfig+0x2aa>
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004796:	d006      	beq.n	80047a6 <UART_SetConfig+0x2b6>
 8004798:	e01e      	b.n	80047d8 <UART_SetConfig+0x2e8>
 800479a:	2300      	movs	r3, #0
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e04b      	b.n	8004838 <UART_SetConfig+0x348>
 80047a0:	2302      	movs	r3, #2
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e048      	b.n	8004838 <UART_SetConfig+0x348>
 80047a6:	2304      	movs	r3, #4
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e045      	b.n	8004838 <UART_SetConfig+0x348>
 80047ac:	2308      	movs	r3, #8
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e042      	b.n	8004838 <UART_SetConfig+0x348>
 80047b2:	bf00      	nop
 80047b4:	efff69f3 	.word	0xefff69f3
 80047b8:	40011000 	.word	0x40011000
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40004400 	.word	0x40004400
 80047c4:	40004800 	.word	0x40004800
 80047c8:	40004c00 	.word	0x40004c00
 80047cc:	40005000 	.word	0x40005000
 80047d0:	40011400 	.word	0x40011400
 80047d4:	40007800 	.word	0x40007800
 80047d8:	2310      	movs	r3, #16
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e02c      	b.n	8004838 <UART_SetConfig+0x348>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a72      	ldr	r2, [pc, #456]	; (80049ac <UART_SetConfig+0x4bc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d125      	bne.n	8004834 <UART_SetConfig+0x344>
 80047e8:	4b71      	ldr	r3, [pc, #452]	; (80049b0 <UART_SetConfig+0x4c0>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047f6:	d017      	beq.n	8004828 <UART_SetConfig+0x338>
 80047f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047fc:	d817      	bhi.n	800482e <UART_SetConfig+0x33e>
 80047fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004802:	d00b      	beq.n	800481c <UART_SetConfig+0x32c>
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004808:	d811      	bhi.n	800482e <UART_SetConfig+0x33e>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <UART_SetConfig+0x326>
 800480e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004812:	d006      	beq.n	8004822 <UART_SetConfig+0x332>
 8004814:	e00b      	b.n	800482e <UART_SetConfig+0x33e>
 8004816:	2300      	movs	r3, #0
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e00d      	b.n	8004838 <UART_SetConfig+0x348>
 800481c:	2302      	movs	r3, #2
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e00a      	b.n	8004838 <UART_SetConfig+0x348>
 8004822:	2304      	movs	r3, #4
 8004824:	77fb      	strb	r3, [r7, #31]
 8004826:	e007      	b.n	8004838 <UART_SetConfig+0x348>
 8004828:	2308      	movs	r3, #8
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e004      	b.n	8004838 <UART_SetConfig+0x348>
 800482e:	2310      	movs	r3, #16
 8004830:	77fb      	strb	r3, [r7, #31]
 8004832:	e001      	b.n	8004838 <UART_SetConfig+0x348>
 8004834:	2310      	movs	r3, #16
 8004836:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004840:	d15b      	bne.n	80048fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004842:	7ffb      	ldrb	r3, [r7, #31]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d828      	bhi.n	800489a <UART_SetConfig+0x3aa>
 8004848:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <UART_SetConfig+0x360>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004875 	.word	0x08004875
 8004854:	0800487d 	.word	0x0800487d
 8004858:	08004885 	.word	0x08004885
 800485c:	0800489b 	.word	0x0800489b
 8004860:	0800488b 	.word	0x0800488b
 8004864:	0800489b 	.word	0x0800489b
 8004868:	0800489b 	.word	0x0800489b
 800486c:	0800489b 	.word	0x0800489b
 8004870:	08004893 	.word	0x08004893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004874:	f7ff f99e 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8004878:	61b8      	str	r0, [r7, #24]
        break;
 800487a:	e013      	b.n	80048a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800487c:	f7ff f9ae 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8004880:	61b8      	str	r0, [r7, #24]
        break;
 8004882:	e00f      	b.n	80048a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004884:	4b4b      	ldr	r3, [pc, #300]	; (80049b4 <UART_SetConfig+0x4c4>)
 8004886:	61bb      	str	r3, [r7, #24]
        break;
 8004888:	e00c      	b.n	80048a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488a:	f7ff f881 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800488e:	61b8      	str	r0, [r7, #24]
        break;
 8004890:	e008      	b.n	80048a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004896:	61bb      	str	r3, [r7, #24]
        break;
 8004898:	e004      	b.n	80048a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	77bb      	strb	r3, [r7, #30]
        break;
 80048a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d074      	beq.n	8004994 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	005a      	lsls	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80048be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b0f      	cmp	r3, #15
 80048c4:	d916      	bls.n	80048f4 <UART_SetConfig+0x404>
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d212      	bcs.n	80048f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f023 030f 	bic.w	r3, r3, #15
 80048d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	89fb      	ldrh	r3, [r7, #14]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	89fa      	ldrh	r2, [r7, #14]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	e04f      	b.n	8004994 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	77bb      	strb	r3, [r7, #30]
 80048f8:	e04c      	b.n	8004994 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048fa:	7ffb      	ldrb	r3, [r7, #31]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d828      	bhi.n	8004952 <UART_SetConfig+0x462>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0x418>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	0800492d 	.word	0x0800492d
 800490c:	08004935 	.word	0x08004935
 8004910:	0800493d 	.word	0x0800493d
 8004914:	08004953 	.word	0x08004953
 8004918:	08004943 	.word	0x08004943
 800491c:	08004953 	.word	0x08004953
 8004920:	08004953 	.word	0x08004953
 8004924:	08004953 	.word	0x08004953
 8004928:	0800494b 	.word	0x0800494b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800492c:	f7ff f942 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8004930:	61b8      	str	r0, [r7, #24]
        break;
 8004932:	e013      	b.n	800495c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004934:	f7ff f952 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8004938:	61b8      	str	r0, [r7, #24]
        break;
 800493a:	e00f      	b.n	800495c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800493c:	4b1d      	ldr	r3, [pc, #116]	; (80049b4 <UART_SetConfig+0x4c4>)
 800493e:	61bb      	str	r3, [r7, #24]
        break;
 8004940:	e00c      	b.n	800495c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004942:	f7ff f825 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8004946:	61b8      	str	r0, [r7, #24]
        break;
 8004948:	e008      	b.n	800495c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494e:	61bb      	str	r3, [r7, #24]
        break;
 8004950:	e004      	b.n	800495c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	77bb      	strb	r3, [r7, #30]
        break;
 800495a:	bf00      	nop
    }

    if (pclk != 0U)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d018      	beq.n	8004994 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	085a      	lsrs	r2, r3, #1
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	441a      	add	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b0f      	cmp	r3, #15
 800497a:	d909      	bls.n	8004990 <UART_SetConfig+0x4a0>
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004982:	d205      	bcs.n	8004990 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60da      	str	r2, [r3, #12]
 800498e:	e001      	b.n	8004994 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3720      	adds	r7, #32
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40007c00 	.word	0x40007c00
 80049b0:	40023800 	.word	0x40023800
 80049b4:	00f42400 	.word	0x00f42400

080049b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01a      	beq.n	8004ace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab6:	d10a      	bne.n	8004ace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b0c:	f7fc fc34 	bl	8001378 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d10e      	bne.n	8004b3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f831 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e027      	b.n	8004b8e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d10e      	bne.n	8004b6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f81b 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e011      	b.n	8004b8e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b09c      	sub	sp, #112	; 0x70
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba6:	e0a7      	b.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bae:	f000 80a3 	beq.w	8004cf8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb2:	f7fc fbe1 	bl	8001378 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d302      	bcc.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d13f      	bne.n	8004c48 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bdc:	667b      	str	r3, [r7, #100]	; 0x64
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004be8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e6      	bne.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3308      	adds	r3, #8
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	663b      	str	r3, [r7, #96]	; 0x60
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e5      	bne.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e068      	b.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d050      	beq.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c64:	d148      	bne.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c6e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c90:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e6      	bne.n	8004c70 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cc2:	623a      	str	r2, [r7, #32]
 8004cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	69f9      	ldr	r1, [r7, #28]
 8004cc8:	6a3a      	ldr	r2, [r7, #32]
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e5      	bne.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e010      	b.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69da      	ldr	r2, [r3, #28]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4013      	ands	r3, r2
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	f43f af48 	beq.w	8004ba8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3770      	adds	r7, #112	; 0x70
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d24:	b084      	sub	sp, #16
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	f107 001c 	add.w	r0, r7, #28
 8004d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d120      	bne.n	8004d7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <USB_CoreInit+0xac>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d105      	bne.n	8004d72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fa96 	bl	80052a4 <USB_CoreReset>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	73fb      	strb	r3, [r7, #15]
 8004d7c:	e010      	b.n	8004da0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fa8a 	bl	80052a4 <USB_CoreReset>
 8004d90:	4603      	mov	r3, r0
 8004d92:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d10b      	bne.n	8004dbe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f043 0206 	orr.w	r2, r3, #6
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dca:	b004      	add	sp, #16
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	ffbdffbf 	.word	0xffbdffbf

08004dd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f023 0201 	bic.w	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d115      	bne.n	8004e44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e24:	2001      	movs	r0, #1
 8004e26:	f7fc fab3 	bl	8001390 <HAL_Delay>
      ms++;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fa29 	bl	8005288 <USB_GetMode>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d01e      	beq.n	8004e7a <USB_SetCurrentMode+0x84>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b31      	cmp	r3, #49	; 0x31
 8004e40:	d9f0      	bls.n	8004e24 <USB_SetCurrentMode+0x2e>
 8004e42:	e01a      	b.n	8004e7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d115      	bne.n	8004e76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e56:	2001      	movs	r0, #1
 8004e58:	f7fc fa9a 	bl	8001390 <HAL_Delay>
      ms++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa10 	bl	8005288 <USB_GetMode>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <USB_SetCurrentMode+0x84>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b31      	cmp	r3, #49	; 0x31
 8004e72:	d9f0      	bls.n	8004e56 <USB_SetCurrentMode+0x60>
 8004e74:	e001      	b.n	8004e7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e005      	b.n	8004e86 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b32      	cmp	r3, #50	; 0x32
 8004e7e:	d101      	bne.n	8004e84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e90:	b084      	sub	sp, #16
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b086      	sub	sp, #24
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	e009      	b.n	8004ec4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3340      	adds	r3, #64	; 0x40
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	613b      	str	r3, [r7, #16]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	2b0e      	cmp	r3, #14
 8004ec8:	d9f2      	bls.n	8004eb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d11c      	bne.n	8004f0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ede:	f043 0302 	orr.w	r3, r3, #2
 8004ee2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e005      	b.n	8004f16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	2300      	movs	r3, #0
 8004f20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f28:	4619      	mov	r1, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f30:	461a      	mov	r2, r3
 8004f32:	680b      	ldr	r3, [r1, #0]
 8004f34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d10c      	bne.n	8004f56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d104      	bne.n	8004f4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f42:	2100      	movs	r1, #0
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f965 	bl	8005214 <USB_SetDevSpeed>
 8004f4a:	e008      	b.n	8004f5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f960 	bl	8005214 <USB_SetDevSpeed>
 8004f54:	e003      	b.n	8004f5e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f56:	2103      	movs	r1, #3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f95b 	bl	8005214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f5e:	2110      	movs	r1, #16
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f8f3 	bl	800514c <USB_FlushTxFifo>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f91f 	bl	80051b4 <USB_FlushRxFifo>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f86:	461a      	mov	r2, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	461a      	mov	r2, r3
 8004f94:	2300      	movs	r3, #0
 8004f96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	e043      	b.n	8005032 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc0:	d118      	bne.n	8004ff4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	e013      	b.n	8005006 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fea:	461a      	mov	r2, r3
 8004fec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e008      	b.n	8005006 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	461a      	mov	r2, r3
 8005002:	2300      	movs	r3, #0
 8005004:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	461a      	mov	r2, r3
 8005014:	2300      	movs	r3, #0
 8005016:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005024:	461a      	mov	r2, r3
 8005026:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800502a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	3301      	adds	r3, #1
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	429a      	cmp	r2, r3
 8005038:	d3b7      	bcc.n	8004faa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	e043      	b.n	80050c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005056:	d118      	bne.n	800508a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	461a      	mov	r2, r3
 800506c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e013      	b.n	800509c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	461a      	mov	r2, r3
 8005082:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	e008      	b.n	800509c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	461a      	mov	r2, r3
 8005098:	2300      	movs	r3, #0
 800509a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	461a      	mov	r2, r3
 80050aa:	2300      	movs	r3, #0
 80050ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ba:	461a      	mov	r2, r3
 80050bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3301      	adds	r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d3b7      	bcc.n	8005040 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d105      	bne.n	8005104 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	f043 0210 	orr.w	r2, r3, #16
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <USB_DevInit+0x2b4>)
 800510a:	4313      	orrs	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f043 0208 	orr.w	r2, r3, #8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d105      	bne.n	8005134 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699a      	ldr	r2, [r3, #24]
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <USB_DevInit+0x2b8>)
 800512e:	4313      	orrs	r3, r2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005134:	7dfb      	ldrb	r3, [r7, #23]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005140:	b004      	add	sp, #16
 8005142:	4770      	bx	lr
 8005144:	803c3800 	.word	0x803c3800
 8005148:	40000004 	.word	0x40000004

0800514c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3301      	adds	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <USB_FlushTxFifo+0x64>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d901      	bls.n	800516c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e01b      	b.n	80051a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	daf2      	bge.n	800515a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	019b      	lsls	r3, r3, #6
 800517c:	f043 0220 	orr.w	r2, r3, #32
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <USB_FlushTxFifo+0x64>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e006      	b.n	80051a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b20      	cmp	r3, #32
 80051a0:	d0f0      	beq.n	8005184 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	00030d40 	.word	0x00030d40

080051b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3301      	adds	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a11      	ldr	r2, [pc, #68]	; (8005210 <USB_FlushRxFifo+0x5c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e018      	b.n	8005204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	daf2      	bge.n	80051c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2210      	movs	r2, #16
 80051e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4a08      	ldr	r2, [pc, #32]	; (8005210 <USB_FlushRxFifo+0x5c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e006      	b.n	8005204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b10      	cmp	r3, #16
 8005200:	d0f0      	beq.n	80051e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	00030d40 	.word	0x00030d40

08005214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005234:	4313      	orrs	r3, r2
 8005236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005260:	f023 0303 	bic.w	r3, r3, #3
 8005264:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005274:	f043 0302 	orr.w	r3, r3, #2
 8005278:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	f003 0301 	and.w	r3, r3, #1
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a13      	ldr	r2, [pc, #76]	; (8005308 <USB_CoreReset+0x64>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e01b      	b.n	80052fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	daf2      	bge.n	80052b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f043 0201 	orr.w	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3301      	adds	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a09      	ldr	r2, [pc, #36]	; (8005308 <USB_CoreReset+0x64>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d901      	bls.n	80052ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e006      	b.n	80052fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d0f0      	beq.n	80052da <USB_CoreReset+0x36>

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	00030d40 	.word	0x00030d40

0800530c <std>:
 800530c:	2300      	movs	r3, #0
 800530e:	b510      	push	{r4, lr}
 8005310:	4604      	mov	r4, r0
 8005312:	e9c0 3300 	strd	r3, r3, [r0]
 8005316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800531a:	6083      	str	r3, [r0, #8]
 800531c:	8181      	strh	r1, [r0, #12]
 800531e:	6643      	str	r3, [r0, #100]	; 0x64
 8005320:	81c2      	strh	r2, [r0, #14]
 8005322:	6183      	str	r3, [r0, #24]
 8005324:	4619      	mov	r1, r3
 8005326:	2208      	movs	r2, #8
 8005328:	305c      	adds	r0, #92	; 0x5c
 800532a:	f000 f9f7 	bl	800571c <memset>
 800532e:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <std+0x58>)
 8005330:	6263      	str	r3, [r4, #36]	; 0x24
 8005332:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <std+0x5c>)
 8005334:	62a3      	str	r3, [r4, #40]	; 0x28
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <std+0x60>)
 8005338:	62e3      	str	r3, [r4, #44]	; 0x2c
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <std+0x64>)
 800533c:	6323      	str	r3, [r4, #48]	; 0x30
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <std+0x68>)
 8005340:	6224      	str	r4, [r4, #32]
 8005342:	429c      	cmp	r4, r3
 8005344:	d006      	beq.n	8005354 <std+0x48>
 8005346:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800534a:	4294      	cmp	r4, r2
 800534c:	d002      	beq.n	8005354 <std+0x48>
 800534e:	33d0      	adds	r3, #208	; 0xd0
 8005350:	429c      	cmp	r4, r3
 8005352:	d105      	bne.n	8005360 <std+0x54>
 8005354:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800535c:	f000 ba56 	b.w	800580c <__retarget_lock_init_recursive>
 8005360:	bd10      	pop	{r4, pc}
 8005362:	bf00      	nop
 8005364:	0800556d 	.word	0x0800556d
 8005368:	0800558f 	.word	0x0800558f
 800536c:	080055c7 	.word	0x080055c7
 8005370:	080055eb 	.word	0x080055eb
 8005374:	20000910 	.word	0x20000910

08005378 <stdio_exit_handler>:
 8005378:	4a02      	ldr	r2, [pc, #8]	; (8005384 <stdio_exit_handler+0xc>)
 800537a:	4903      	ldr	r1, [pc, #12]	; (8005388 <stdio_exit_handler+0x10>)
 800537c:	4803      	ldr	r0, [pc, #12]	; (800538c <stdio_exit_handler+0x14>)
 800537e:	f000 b869 	b.w	8005454 <_fwalk_sglue>
 8005382:	bf00      	nop
 8005384:	20000010 	.word	0x20000010
 8005388:	080060b9 	.word	0x080060b9
 800538c:	2000001c 	.word	0x2000001c

08005390 <cleanup_stdio>:
 8005390:	6841      	ldr	r1, [r0, #4]
 8005392:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <cleanup_stdio+0x34>)
 8005394:	4299      	cmp	r1, r3
 8005396:	b510      	push	{r4, lr}
 8005398:	4604      	mov	r4, r0
 800539a:	d001      	beq.n	80053a0 <cleanup_stdio+0x10>
 800539c:	f000 fe8c 	bl	80060b8 <_fflush_r>
 80053a0:	68a1      	ldr	r1, [r4, #8]
 80053a2:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <cleanup_stdio+0x38>)
 80053a4:	4299      	cmp	r1, r3
 80053a6:	d002      	beq.n	80053ae <cleanup_stdio+0x1e>
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fe85 	bl	80060b8 <_fflush_r>
 80053ae:	68e1      	ldr	r1, [r4, #12]
 80053b0:	4b06      	ldr	r3, [pc, #24]	; (80053cc <cleanup_stdio+0x3c>)
 80053b2:	4299      	cmp	r1, r3
 80053b4:	d004      	beq.n	80053c0 <cleanup_stdio+0x30>
 80053b6:	4620      	mov	r0, r4
 80053b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053bc:	f000 be7c 	b.w	80060b8 <_fflush_r>
 80053c0:	bd10      	pop	{r4, pc}
 80053c2:	bf00      	nop
 80053c4:	20000910 	.word	0x20000910
 80053c8:	20000978 	.word	0x20000978
 80053cc:	200009e0 	.word	0x200009e0

080053d0 <global_stdio_init.part.0>:
 80053d0:	b510      	push	{r4, lr}
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <global_stdio_init.part.0+0x30>)
 80053d4:	4c0b      	ldr	r4, [pc, #44]	; (8005404 <global_stdio_init.part.0+0x34>)
 80053d6:	4a0c      	ldr	r2, [pc, #48]	; (8005408 <global_stdio_init.part.0+0x38>)
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	4620      	mov	r0, r4
 80053dc:	2200      	movs	r2, #0
 80053de:	2104      	movs	r1, #4
 80053e0:	f7ff ff94 	bl	800530c <std>
 80053e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80053e8:	2201      	movs	r2, #1
 80053ea:	2109      	movs	r1, #9
 80053ec:	f7ff ff8e 	bl	800530c <std>
 80053f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80053f4:	2202      	movs	r2, #2
 80053f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053fa:	2112      	movs	r1, #18
 80053fc:	f7ff bf86 	b.w	800530c <std>
 8005400:	20000a48 	.word	0x20000a48
 8005404:	20000910 	.word	0x20000910
 8005408:	08005379 	.word	0x08005379

0800540c <__sfp_lock_acquire>:
 800540c:	4801      	ldr	r0, [pc, #4]	; (8005414 <__sfp_lock_acquire+0x8>)
 800540e:	f000 b9fe 	b.w	800580e <__retarget_lock_acquire_recursive>
 8005412:	bf00      	nop
 8005414:	20000a51 	.word	0x20000a51

08005418 <__sfp_lock_release>:
 8005418:	4801      	ldr	r0, [pc, #4]	; (8005420 <__sfp_lock_release+0x8>)
 800541a:	f000 b9f9 	b.w	8005810 <__retarget_lock_release_recursive>
 800541e:	bf00      	nop
 8005420:	20000a51 	.word	0x20000a51

08005424 <__sinit>:
 8005424:	b510      	push	{r4, lr}
 8005426:	4604      	mov	r4, r0
 8005428:	f7ff fff0 	bl	800540c <__sfp_lock_acquire>
 800542c:	6a23      	ldr	r3, [r4, #32]
 800542e:	b11b      	cbz	r3, 8005438 <__sinit+0x14>
 8005430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005434:	f7ff bff0 	b.w	8005418 <__sfp_lock_release>
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <__sinit+0x28>)
 800543a:	6223      	str	r3, [r4, #32]
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <__sinit+0x2c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1f5      	bne.n	8005430 <__sinit+0xc>
 8005444:	f7ff ffc4 	bl	80053d0 <global_stdio_init.part.0>
 8005448:	e7f2      	b.n	8005430 <__sinit+0xc>
 800544a:	bf00      	nop
 800544c:	08005391 	.word	0x08005391
 8005450:	20000a48 	.word	0x20000a48

08005454 <_fwalk_sglue>:
 8005454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005458:	4607      	mov	r7, r0
 800545a:	4688      	mov	r8, r1
 800545c:	4614      	mov	r4, r2
 800545e:	2600      	movs	r6, #0
 8005460:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005464:	f1b9 0901 	subs.w	r9, r9, #1
 8005468:	d505      	bpl.n	8005476 <_fwalk_sglue+0x22>
 800546a:	6824      	ldr	r4, [r4, #0]
 800546c:	2c00      	cmp	r4, #0
 800546e:	d1f7      	bne.n	8005460 <_fwalk_sglue+0xc>
 8005470:	4630      	mov	r0, r6
 8005472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005476:	89ab      	ldrh	r3, [r5, #12]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d907      	bls.n	800548c <_fwalk_sglue+0x38>
 800547c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005480:	3301      	adds	r3, #1
 8005482:	d003      	beq.n	800548c <_fwalk_sglue+0x38>
 8005484:	4629      	mov	r1, r5
 8005486:	4638      	mov	r0, r7
 8005488:	47c0      	blx	r8
 800548a:	4306      	orrs	r6, r0
 800548c:	3568      	adds	r5, #104	; 0x68
 800548e:	e7e9      	b.n	8005464 <_fwalk_sglue+0x10>

08005490 <iprintf>:
 8005490:	b40f      	push	{r0, r1, r2, r3}
 8005492:	b507      	push	{r0, r1, r2, lr}
 8005494:	4906      	ldr	r1, [pc, #24]	; (80054b0 <iprintf+0x20>)
 8005496:	ab04      	add	r3, sp, #16
 8005498:	6808      	ldr	r0, [r1, #0]
 800549a:	f853 2b04 	ldr.w	r2, [r3], #4
 800549e:	6881      	ldr	r1, [r0, #8]
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	f000 fad9 	bl	8005a58 <_vfiprintf_r>
 80054a6:	b003      	add	sp, #12
 80054a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054ac:	b004      	add	sp, #16
 80054ae:	4770      	bx	lr
 80054b0:	20000068 	.word	0x20000068

080054b4 <_puts_r>:
 80054b4:	6a03      	ldr	r3, [r0, #32]
 80054b6:	b570      	push	{r4, r5, r6, lr}
 80054b8:	6884      	ldr	r4, [r0, #8]
 80054ba:	4605      	mov	r5, r0
 80054bc:	460e      	mov	r6, r1
 80054be:	b90b      	cbnz	r3, 80054c4 <_puts_r+0x10>
 80054c0:	f7ff ffb0 	bl	8005424 <__sinit>
 80054c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054c6:	07db      	lsls	r3, r3, #31
 80054c8:	d405      	bmi.n	80054d6 <_puts_r+0x22>
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	0598      	lsls	r0, r3, #22
 80054ce:	d402      	bmi.n	80054d6 <_puts_r+0x22>
 80054d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054d2:	f000 f99c 	bl	800580e <__retarget_lock_acquire_recursive>
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	0719      	lsls	r1, r3, #28
 80054da:	d513      	bpl.n	8005504 <_puts_r+0x50>
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	b18b      	cbz	r3, 8005504 <_puts_r+0x50>
 80054e0:	3e01      	subs	r6, #1
 80054e2:	68a3      	ldr	r3, [r4, #8]
 80054e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054e8:	3b01      	subs	r3, #1
 80054ea:	60a3      	str	r3, [r4, #8]
 80054ec:	b9e9      	cbnz	r1, 800552a <_puts_r+0x76>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da2e      	bge.n	8005550 <_puts_r+0x9c>
 80054f2:	4622      	mov	r2, r4
 80054f4:	210a      	movs	r1, #10
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 f87b 	bl	80055f2 <__swbuf_r>
 80054fc:	3001      	adds	r0, #1
 80054fe:	d007      	beq.n	8005510 <_puts_r+0x5c>
 8005500:	250a      	movs	r5, #10
 8005502:	e007      	b.n	8005514 <_puts_r+0x60>
 8005504:	4621      	mov	r1, r4
 8005506:	4628      	mov	r0, r5
 8005508:	f000 f8b0 	bl	800566c <__swsetup_r>
 800550c:	2800      	cmp	r0, #0
 800550e:	d0e7      	beq.n	80054e0 <_puts_r+0x2c>
 8005510:	f04f 35ff 	mov.w	r5, #4294967295
 8005514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005516:	07da      	lsls	r2, r3, #31
 8005518:	d405      	bmi.n	8005526 <_puts_r+0x72>
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	059b      	lsls	r3, r3, #22
 800551e:	d402      	bmi.n	8005526 <_puts_r+0x72>
 8005520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005522:	f000 f975 	bl	8005810 <__retarget_lock_release_recursive>
 8005526:	4628      	mov	r0, r5
 8005528:	bd70      	pop	{r4, r5, r6, pc}
 800552a:	2b00      	cmp	r3, #0
 800552c:	da04      	bge.n	8005538 <_puts_r+0x84>
 800552e:	69a2      	ldr	r2, [r4, #24]
 8005530:	429a      	cmp	r2, r3
 8005532:	dc06      	bgt.n	8005542 <_puts_r+0x8e>
 8005534:	290a      	cmp	r1, #10
 8005536:	d004      	beq.n	8005542 <_puts_r+0x8e>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	6022      	str	r2, [r4, #0]
 800553e:	7019      	strb	r1, [r3, #0]
 8005540:	e7cf      	b.n	80054e2 <_puts_r+0x2e>
 8005542:	4622      	mov	r2, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 f854 	bl	80055f2 <__swbuf_r>
 800554a:	3001      	adds	r0, #1
 800554c:	d1c9      	bne.n	80054e2 <_puts_r+0x2e>
 800554e:	e7df      	b.n	8005510 <_puts_r+0x5c>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	250a      	movs	r5, #10
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	6022      	str	r2, [r4, #0]
 8005558:	701d      	strb	r5, [r3, #0]
 800555a:	e7db      	b.n	8005514 <_puts_r+0x60>

0800555c <puts>:
 800555c:	4b02      	ldr	r3, [pc, #8]	; (8005568 <puts+0xc>)
 800555e:	4601      	mov	r1, r0
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	f7ff bfa7 	b.w	80054b4 <_puts_r>
 8005566:	bf00      	nop
 8005568:	20000068 	.word	0x20000068

0800556c <__sread>:
 800556c:	b510      	push	{r4, lr}
 800556e:	460c      	mov	r4, r1
 8005570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005574:	f000 f8fc 	bl	8005770 <_read_r>
 8005578:	2800      	cmp	r0, #0
 800557a:	bfab      	itete	ge
 800557c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800557e:	89a3      	ldrhlt	r3, [r4, #12]
 8005580:	181b      	addge	r3, r3, r0
 8005582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005586:	bfac      	ite	ge
 8005588:	6563      	strge	r3, [r4, #84]	; 0x54
 800558a:	81a3      	strhlt	r3, [r4, #12]
 800558c:	bd10      	pop	{r4, pc}

0800558e <__swrite>:
 800558e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005592:	461f      	mov	r7, r3
 8005594:	898b      	ldrh	r3, [r1, #12]
 8005596:	05db      	lsls	r3, r3, #23
 8005598:	4605      	mov	r5, r0
 800559a:	460c      	mov	r4, r1
 800559c:	4616      	mov	r6, r2
 800559e:	d505      	bpl.n	80055ac <__swrite+0x1e>
 80055a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a4:	2302      	movs	r3, #2
 80055a6:	2200      	movs	r2, #0
 80055a8:	f000 f8d0 	bl	800574c <_lseek_r>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	4632      	mov	r2, r6
 80055ba:	463b      	mov	r3, r7
 80055bc:	4628      	mov	r0, r5
 80055be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055c2:	f000 b8e7 	b.w	8005794 <_write_r>

080055c6 <__sseek>:
 80055c6:	b510      	push	{r4, lr}
 80055c8:	460c      	mov	r4, r1
 80055ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ce:	f000 f8bd 	bl	800574c <_lseek_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	bf15      	itete	ne
 80055d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80055da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055e2:	81a3      	strheq	r3, [r4, #12]
 80055e4:	bf18      	it	ne
 80055e6:	81a3      	strhne	r3, [r4, #12]
 80055e8:	bd10      	pop	{r4, pc}

080055ea <__sclose>:
 80055ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ee:	f000 b89d 	b.w	800572c <_close_r>

080055f2 <__swbuf_r>:
 80055f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f4:	460e      	mov	r6, r1
 80055f6:	4614      	mov	r4, r2
 80055f8:	4605      	mov	r5, r0
 80055fa:	b118      	cbz	r0, 8005604 <__swbuf_r+0x12>
 80055fc:	6a03      	ldr	r3, [r0, #32]
 80055fe:	b90b      	cbnz	r3, 8005604 <__swbuf_r+0x12>
 8005600:	f7ff ff10 	bl	8005424 <__sinit>
 8005604:	69a3      	ldr	r3, [r4, #24]
 8005606:	60a3      	str	r3, [r4, #8]
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	071a      	lsls	r2, r3, #28
 800560c:	d525      	bpl.n	800565a <__swbuf_r+0x68>
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	b31b      	cbz	r3, 800565a <__swbuf_r+0x68>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	6922      	ldr	r2, [r4, #16]
 8005616:	1a98      	subs	r0, r3, r2
 8005618:	6963      	ldr	r3, [r4, #20]
 800561a:	b2f6      	uxtb	r6, r6
 800561c:	4283      	cmp	r3, r0
 800561e:	4637      	mov	r7, r6
 8005620:	dc04      	bgt.n	800562c <__swbuf_r+0x3a>
 8005622:	4621      	mov	r1, r4
 8005624:	4628      	mov	r0, r5
 8005626:	f000 fd47 	bl	80060b8 <_fflush_r>
 800562a:	b9e0      	cbnz	r0, 8005666 <__swbuf_r+0x74>
 800562c:	68a3      	ldr	r3, [r4, #8]
 800562e:	3b01      	subs	r3, #1
 8005630:	60a3      	str	r3, [r4, #8]
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	6022      	str	r2, [r4, #0]
 8005638:	701e      	strb	r6, [r3, #0]
 800563a:	6962      	ldr	r2, [r4, #20]
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	429a      	cmp	r2, r3
 8005640:	d004      	beq.n	800564c <__swbuf_r+0x5a>
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	07db      	lsls	r3, r3, #31
 8005646:	d506      	bpl.n	8005656 <__swbuf_r+0x64>
 8005648:	2e0a      	cmp	r6, #10
 800564a:	d104      	bne.n	8005656 <__swbuf_r+0x64>
 800564c:	4621      	mov	r1, r4
 800564e:	4628      	mov	r0, r5
 8005650:	f000 fd32 	bl	80060b8 <_fflush_r>
 8005654:	b938      	cbnz	r0, 8005666 <__swbuf_r+0x74>
 8005656:	4638      	mov	r0, r7
 8005658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800565a:	4621      	mov	r1, r4
 800565c:	4628      	mov	r0, r5
 800565e:	f000 f805 	bl	800566c <__swsetup_r>
 8005662:	2800      	cmp	r0, #0
 8005664:	d0d5      	beq.n	8005612 <__swbuf_r+0x20>
 8005666:	f04f 37ff 	mov.w	r7, #4294967295
 800566a:	e7f4      	b.n	8005656 <__swbuf_r+0x64>

0800566c <__swsetup_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	4b2a      	ldr	r3, [pc, #168]	; (8005718 <__swsetup_r+0xac>)
 8005670:	4605      	mov	r5, r0
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	460c      	mov	r4, r1
 8005676:	b118      	cbz	r0, 8005680 <__swsetup_r+0x14>
 8005678:	6a03      	ldr	r3, [r0, #32]
 800567a:	b90b      	cbnz	r3, 8005680 <__swsetup_r+0x14>
 800567c:	f7ff fed2 	bl	8005424 <__sinit>
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005686:	0718      	lsls	r0, r3, #28
 8005688:	d422      	bmi.n	80056d0 <__swsetup_r+0x64>
 800568a:	06d9      	lsls	r1, r3, #27
 800568c:	d407      	bmi.n	800569e <__swsetup_r+0x32>
 800568e:	2309      	movs	r3, #9
 8005690:	602b      	str	r3, [r5, #0]
 8005692:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005696:	81a3      	strh	r3, [r4, #12]
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	e034      	b.n	8005708 <__swsetup_r+0x9c>
 800569e:	0758      	lsls	r0, r3, #29
 80056a0:	d512      	bpl.n	80056c8 <__swsetup_r+0x5c>
 80056a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056a4:	b141      	cbz	r1, 80056b8 <__swsetup_r+0x4c>
 80056a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056aa:	4299      	cmp	r1, r3
 80056ac:	d002      	beq.n	80056b4 <__swsetup_r+0x48>
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 f8b0 	bl	8005814 <_free_r>
 80056b4:	2300      	movs	r3, #0
 80056b6:	6363      	str	r3, [r4, #52]	; 0x34
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056be:	81a3      	strh	r3, [r4, #12]
 80056c0:	2300      	movs	r3, #0
 80056c2:	6063      	str	r3, [r4, #4]
 80056c4:	6923      	ldr	r3, [r4, #16]
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	f043 0308 	orr.w	r3, r3, #8
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	6923      	ldr	r3, [r4, #16]
 80056d2:	b94b      	cbnz	r3, 80056e8 <__swsetup_r+0x7c>
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056de:	d003      	beq.n	80056e8 <__swsetup_r+0x7c>
 80056e0:	4621      	mov	r1, r4
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 fd36 	bl	8006154 <__smakebuf_r>
 80056e8:	89a0      	ldrh	r0, [r4, #12]
 80056ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056ee:	f010 0301 	ands.w	r3, r0, #1
 80056f2:	d00a      	beq.n	800570a <__swsetup_r+0x9e>
 80056f4:	2300      	movs	r3, #0
 80056f6:	60a3      	str	r3, [r4, #8]
 80056f8:	6963      	ldr	r3, [r4, #20]
 80056fa:	425b      	negs	r3, r3
 80056fc:	61a3      	str	r3, [r4, #24]
 80056fe:	6923      	ldr	r3, [r4, #16]
 8005700:	b943      	cbnz	r3, 8005714 <__swsetup_r+0xa8>
 8005702:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005706:	d1c4      	bne.n	8005692 <__swsetup_r+0x26>
 8005708:	bd38      	pop	{r3, r4, r5, pc}
 800570a:	0781      	lsls	r1, r0, #30
 800570c:	bf58      	it	pl
 800570e:	6963      	ldrpl	r3, [r4, #20]
 8005710:	60a3      	str	r3, [r4, #8]
 8005712:	e7f4      	b.n	80056fe <__swsetup_r+0x92>
 8005714:	2000      	movs	r0, #0
 8005716:	e7f7      	b.n	8005708 <__swsetup_r+0x9c>
 8005718:	20000068 	.word	0x20000068

0800571c <memset>:
 800571c:	4402      	add	r2, r0
 800571e:	4603      	mov	r3, r0
 8005720:	4293      	cmp	r3, r2
 8005722:	d100      	bne.n	8005726 <memset+0xa>
 8005724:	4770      	bx	lr
 8005726:	f803 1b01 	strb.w	r1, [r3], #1
 800572a:	e7f9      	b.n	8005720 <memset+0x4>

0800572c <_close_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d06      	ldr	r5, [pc, #24]	; (8005748 <_close_r+0x1c>)
 8005730:	2300      	movs	r3, #0
 8005732:	4604      	mov	r4, r0
 8005734:	4608      	mov	r0, r1
 8005736:	602b      	str	r3, [r5, #0]
 8005738:	f7fb fd27 	bl	800118a <_close>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_close_r+0x1a>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_close_r+0x1a>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	20000a4c 	.word	0x20000a4c

0800574c <_lseek_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4d07      	ldr	r5, [pc, #28]	; (800576c <_lseek_r+0x20>)
 8005750:	4604      	mov	r4, r0
 8005752:	4608      	mov	r0, r1
 8005754:	4611      	mov	r1, r2
 8005756:	2200      	movs	r2, #0
 8005758:	602a      	str	r2, [r5, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	f7fb fd3c 	bl	80011d8 <_lseek>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d102      	bne.n	800576a <_lseek_r+0x1e>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	b103      	cbz	r3, 800576a <_lseek_r+0x1e>
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	20000a4c 	.word	0x20000a4c

08005770 <_read_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4d07      	ldr	r5, [pc, #28]	; (8005790 <_read_r+0x20>)
 8005774:	4604      	mov	r4, r0
 8005776:	4608      	mov	r0, r1
 8005778:	4611      	mov	r1, r2
 800577a:	2200      	movs	r2, #0
 800577c:	602a      	str	r2, [r5, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	f7fb fce6 	bl	8001150 <_read>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d102      	bne.n	800578e <_read_r+0x1e>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	b103      	cbz	r3, 800578e <_read_r+0x1e>
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	20000a4c 	.word	0x20000a4c

08005794 <_write_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4d07      	ldr	r5, [pc, #28]	; (80057b4 <_write_r+0x20>)
 8005798:	4604      	mov	r4, r0
 800579a:	4608      	mov	r0, r1
 800579c:	4611      	mov	r1, r2
 800579e:	2200      	movs	r2, #0
 80057a0:	602a      	str	r2, [r5, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f7fa ff41 	bl	800062a <_write>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_write_r+0x1e>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_write_r+0x1e>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20000a4c 	.word	0x20000a4c

080057b8 <__errno>:
 80057b8:	4b01      	ldr	r3, [pc, #4]	; (80057c0 <__errno+0x8>)
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	20000068 	.word	0x20000068

080057c4 <__libc_init_array>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	4d0d      	ldr	r5, [pc, #52]	; (80057fc <__libc_init_array+0x38>)
 80057c8:	4c0d      	ldr	r4, [pc, #52]	; (8005800 <__libc_init_array+0x3c>)
 80057ca:	1b64      	subs	r4, r4, r5
 80057cc:	10a4      	asrs	r4, r4, #2
 80057ce:	2600      	movs	r6, #0
 80057d0:	42a6      	cmp	r6, r4
 80057d2:	d109      	bne.n	80057e8 <__libc_init_array+0x24>
 80057d4:	4d0b      	ldr	r5, [pc, #44]	; (8005804 <__libc_init_array+0x40>)
 80057d6:	4c0c      	ldr	r4, [pc, #48]	; (8005808 <__libc_init_array+0x44>)
 80057d8:	f000 fd2a 	bl	8006230 <_init>
 80057dc:	1b64      	subs	r4, r4, r5
 80057de:	10a4      	asrs	r4, r4, #2
 80057e0:	2600      	movs	r6, #0
 80057e2:	42a6      	cmp	r6, r4
 80057e4:	d105      	bne.n	80057f2 <__libc_init_array+0x2e>
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ec:	4798      	blx	r3
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7ee      	b.n	80057d0 <__libc_init_array+0xc>
 80057f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f6:	4798      	blx	r3
 80057f8:	3601      	adds	r6, #1
 80057fa:	e7f2      	b.n	80057e2 <__libc_init_array+0x1e>
 80057fc:	080062e0 	.word	0x080062e0
 8005800:	080062e0 	.word	0x080062e0
 8005804:	080062e0 	.word	0x080062e0
 8005808:	080062e4 	.word	0x080062e4

0800580c <__retarget_lock_init_recursive>:
 800580c:	4770      	bx	lr

0800580e <__retarget_lock_acquire_recursive>:
 800580e:	4770      	bx	lr

08005810 <__retarget_lock_release_recursive>:
 8005810:	4770      	bx	lr
	...

08005814 <_free_r>:
 8005814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005816:	2900      	cmp	r1, #0
 8005818:	d044      	beq.n	80058a4 <_free_r+0x90>
 800581a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800581e:	9001      	str	r0, [sp, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f1a1 0404 	sub.w	r4, r1, #4
 8005826:	bfb8      	it	lt
 8005828:	18e4      	addlt	r4, r4, r3
 800582a:	f000 f8df 	bl	80059ec <__malloc_lock>
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <_free_r+0x94>)
 8005830:	9801      	ldr	r0, [sp, #4]
 8005832:	6813      	ldr	r3, [r2, #0]
 8005834:	b933      	cbnz	r3, 8005844 <_free_r+0x30>
 8005836:	6063      	str	r3, [r4, #4]
 8005838:	6014      	str	r4, [r2, #0]
 800583a:	b003      	add	sp, #12
 800583c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005840:	f000 b8da 	b.w	80059f8 <__malloc_unlock>
 8005844:	42a3      	cmp	r3, r4
 8005846:	d908      	bls.n	800585a <_free_r+0x46>
 8005848:	6825      	ldr	r5, [r4, #0]
 800584a:	1961      	adds	r1, r4, r5
 800584c:	428b      	cmp	r3, r1
 800584e:	bf01      	itttt	eq
 8005850:	6819      	ldreq	r1, [r3, #0]
 8005852:	685b      	ldreq	r3, [r3, #4]
 8005854:	1949      	addeq	r1, r1, r5
 8005856:	6021      	streq	r1, [r4, #0]
 8005858:	e7ed      	b.n	8005836 <_free_r+0x22>
 800585a:	461a      	mov	r2, r3
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	b10b      	cbz	r3, 8005864 <_free_r+0x50>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d9fa      	bls.n	800585a <_free_r+0x46>
 8005864:	6811      	ldr	r1, [r2, #0]
 8005866:	1855      	adds	r5, r2, r1
 8005868:	42a5      	cmp	r5, r4
 800586a:	d10b      	bne.n	8005884 <_free_r+0x70>
 800586c:	6824      	ldr	r4, [r4, #0]
 800586e:	4421      	add	r1, r4
 8005870:	1854      	adds	r4, r2, r1
 8005872:	42a3      	cmp	r3, r4
 8005874:	6011      	str	r1, [r2, #0]
 8005876:	d1e0      	bne.n	800583a <_free_r+0x26>
 8005878:	681c      	ldr	r4, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	6053      	str	r3, [r2, #4]
 800587e:	440c      	add	r4, r1
 8005880:	6014      	str	r4, [r2, #0]
 8005882:	e7da      	b.n	800583a <_free_r+0x26>
 8005884:	d902      	bls.n	800588c <_free_r+0x78>
 8005886:	230c      	movs	r3, #12
 8005888:	6003      	str	r3, [r0, #0]
 800588a:	e7d6      	b.n	800583a <_free_r+0x26>
 800588c:	6825      	ldr	r5, [r4, #0]
 800588e:	1961      	adds	r1, r4, r5
 8005890:	428b      	cmp	r3, r1
 8005892:	bf04      	itt	eq
 8005894:	6819      	ldreq	r1, [r3, #0]
 8005896:	685b      	ldreq	r3, [r3, #4]
 8005898:	6063      	str	r3, [r4, #4]
 800589a:	bf04      	itt	eq
 800589c:	1949      	addeq	r1, r1, r5
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	6054      	str	r4, [r2, #4]
 80058a2:	e7ca      	b.n	800583a <_free_r+0x26>
 80058a4:	b003      	add	sp, #12
 80058a6:	bd30      	pop	{r4, r5, pc}
 80058a8:	20000a54 	.word	0x20000a54

080058ac <sbrk_aligned>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	4e0e      	ldr	r6, [pc, #56]	; (80058e8 <sbrk_aligned+0x3c>)
 80058b0:	460c      	mov	r4, r1
 80058b2:	6831      	ldr	r1, [r6, #0]
 80058b4:	4605      	mov	r5, r0
 80058b6:	b911      	cbnz	r1, 80058be <sbrk_aligned+0x12>
 80058b8:	f000 fcaa 	bl	8006210 <_sbrk_r>
 80058bc:	6030      	str	r0, [r6, #0]
 80058be:	4621      	mov	r1, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 fca5 	bl	8006210 <_sbrk_r>
 80058c6:	1c43      	adds	r3, r0, #1
 80058c8:	d00a      	beq.n	80058e0 <sbrk_aligned+0x34>
 80058ca:	1cc4      	adds	r4, r0, #3
 80058cc:	f024 0403 	bic.w	r4, r4, #3
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	d007      	beq.n	80058e4 <sbrk_aligned+0x38>
 80058d4:	1a21      	subs	r1, r4, r0
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 fc9a 	bl	8006210 <_sbrk_r>
 80058dc:	3001      	adds	r0, #1
 80058de:	d101      	bne.n	80058e4 <sbrk_aligned+0x38>
 80058e0:	f04f 34ff 	mov.w	r4, #4294967295
 80058e4:	4620      	mov	r0, r4
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	20000a58 	.word	0x20000a58

080058ec <_malloc_r>:
 80058ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f0:	1ccd      	adds	r5, r1, #3
 80058f2:	f025 0503 	bic.w	r5, r5, #3
 80058f6:	3508      	adds	r5, #8
 80058f8:	2d0c      	cmp	r5, #12
 80058fa:	bf38      	it	cc
 80058fc:	250c      	movcc	r5, #12
 80058fe:	2d00      	cmp	r5, #0
 8005900:	4607      	mov	r7, r0
 8005902:	db01      	blt.n	8005908 <_malloc_r+0x1c>
 8005904:	42a9      	cmp	r1, r5
 8005906:	d905      	bls.n	8005914 <_malloc_r+0x28>
 8005908:	230c      	movs	r3, #12
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	2600      	movs	r6, #0
 800590e:	4630      	mov	r0, r6
 8005910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059e8 <_malloc_r+0xfc>
 8005918:	f000 f868 	bl	80059ec <__malloc_lock>
 800591c:	f8d8 3000 	ldr.w	r3, [r8]
 8005920:	461c      	mov	r4, r3
 8005922:	bb5c      	cbnz	r4, 800597c <_malloc_r+0x90>
 8005924:	4629      	mov	r1, r5
 8005926:	4638      	mov	r0, r7
 8005928:	f7ff ffc0 	bl	80058ac <sbrk_aligned>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	4604      	mov	r4, r0
 8005930:	d155      	bne.n	80059de <_malloc_r+0xf2>
 8005932:	f8d8 4000 	ldr.w	r4, [r8]
 8005936:	4626      	mov	r6, r4
 8005938:	2e00      	cmp	r6, #0
 800593a:	d145      	bne.n	80059c8 <_malloc_r+0xdc>
 800593c:	2c00      	cmp	r4, #0
 800593e:	d048      	beq.n	80059d2 <_malloc_r+0xe6>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	4631      	mov	r1, r6
 8005944:	4638      	mov	r0, r7
 8005946:	eb04 0903 	add.w	r9, r4, r3
 800594a:	f000 fc61 	bl	8006210 <_sbrk_r>
 800594e:	4581      	cmp	r9, r0
 8005950:	d13f      	bne.n	80059d2 <_malloc_r+0xe6>
 8005952:	6821      	ldr	r1, [r4, #0]
 8005954:	1a6d      	subs	r5, r5, r1
 8005956:	4629      	mov	r1, r5
 8005958:	4638      	mov	r0, r7
 800595a:	f7ff ffa7 	bl	80058ac <sbrk_aligned>
 800595e:	3001      	adds	r0, #1
 8005960:	d037      	beq.n	80059d2 <_malloc_r+0xe6>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	442b      	add	r3, r5
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	f8d8 3000 	ldr.w	r3, [r8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d038      	beq.n	80059e2 <_malloc_r+0xf6>
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	42a2      	cmp	r2, r4
 8005974:	d12b      	bne.n	80059ce <_malloc_r+0xe2>
 8005976:	2200      	movs	r2, #0
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	e00f      	b.n	800599c <_malloc_r+0xb0>
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	1b52      	subs	r2, r2, r5
 8005980:	d41f      	bmi.n	80059c2 <_malloc_r+0xd6>
 8005982:	2a0b      	cmp	r2, #11
 8005984:	d917      	bls.n	80059b6 <_malloc_r+0xca>
 8005986:	1961      	adds	r1, r4, r5
 8005988:	42a3      	cmp	r3, r4
 800598a:	6025      	str	r5, [r4, #0]
 800598c:	bf18      	it	ne
 800598e:	6059      	strne	r1, [r3, #4]
 8005990:	6863      	ldr	r3, [r4, #4]
 8005992:	bf08      	it	eq
 8005994:	f8c8 1000 	streq.w	r1, [r8]
 8005998:	5162      	str	r2, [r4, r5]
 800599a:	604b      	str	r3, [r1, #4]
 800599c:	4638      	mov	r0, r7
 800599e:	f104 060b 	add.w	r6, r4, #11
 80059a2:	f000 f829 	bl	80059f8 <__malloc_unlock>
 80059a6:	f026 0607 	bic.w	r6, r6, #7
 80059aa:	1d23      	adds	r3, r4, #4
 80059ac:	1af2      	subs	r2, r6, r3
 80059ae:	d0ae      	beq.n	800590e <_malloc_r+0x22>
 80059b0:	1b9b      	subs	r3, r3, r6
 80059b2:	50a3      	str	r3, [r4, r2]
 80059b4:	e7ab      	b.n	800590e <_malloc_r+0x22>
 80059b6:	42a3      	cmp	r3, r4
 80059b8:	6862      	ldr	r2, [r4, #4]
 80059ba:	d1dd      	bne.n	8005978 <_malloc_r+0x8c>
 80059bc:	f8c8 2000 	str.w	r2, [r8]
 80059c0:	e7ec      	b.n	800599c <_malloc_r+0xb0>
 80059c2:	4623      	mov	r3, r4
 80059c4:	6864      	ldr	r4, [r4, #4]
 80059c6:	e7ac      	b.n	8005922 <_malloc_r+0x36>
 80059c8:	4634      	mov	r4, r6
 80059ca:	6876      	ldr	r6, [r6, #4]
 80059cc:	e7b4      	b.n	8005938 <_malloc_r+0x4c>
 80059ce:	4613      	mov	r3, r2
 80059d0:	e7cc      	b.n	800596c <_malloc_r+0x80>
 80059d2:	230c      	movs	r3, #12
 80059d4:	603b      	str	r3, [r7, #0]
 80059d6:	4638      	mov	r0, r7
 80059d8:	f000 f80e 	bl	80059f8 <__malloc_unlock>
 80059dc:	e797      	b.n	800590e <_malloc_r+0x22>
 80059de:	6025      	str	r5, [r4, #0]
 80059e0:	e7dc      	b.n	800599c <_malloc_r+0xb0>
 80059e2:	605b      	str	r3, [r3, #4]
 80059e4:	deff      	udf	#255	; 0xff
 80059e6:	bf00      	nop
 80059e8:	20000a54 	.word	0x20000a54

080059ec <__malloc_lock>:
 80059ec:	4801      	ldr	r0, [pc, #4]	; (80059f4 <__malloc_lock+0x8>)
 80059ee:	f7ff bf0e 	b.w	800580e <__retarget_lock_acquire_recursive>
 80059f2:	bf00      	nop
 80059f4:	20000a50 	.word	0x20000a50

080059f8 <__malloc_unlock>:
 80059f8:	4801      	ldr	r0, [pc, #4]	; (8005a00 <__malloc_unlock+0x8>)
 80059fa:	f7ff bf09 	b.w	8005810 <__retarget_lock_release_recursive>
 80059fe:	bf00      	nop
 8005a00:	20000a50 	.word	0x20000a50

08005a04 <__sfputc_r>:
 8005a04:	6893      	ldr	r3, [r2, #8]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	b410      	push	{r4}
 8005a0c:	6093      	str	r3, [r2, #8]
 8005a0e:	da08      	bge.n	8005a22 <__sfputc_r+0x1e>
 8005a10:	6994      	ldr	r4, [r2, #24]
 8005a12:	42a3      	cmp	r3, r4
 8005a14:	db01      	blt.n	8005a1a <__sfputc_r+0x16>
 8005a16:	290a      	cmp	r1, #10
 8005a18:	d103      	bne.n	8005a22 <__sfputc_r+0x1e>
 8005a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a1e:	f7ff bde8 	b.w	80055f2 <__swbuf_r>
 8005a22:	6813      	ldr	r3, [r2, #0]
 8005a24:	1c58      	adds	r0, r3, #1
 8005a26:	6010      	str	r0, [r2, #0]
 8005a28:	7019      	strb	r1, [r3, #0]
 8005a2a:	4608      	mov	r0, r1
 8005a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <__sfputs_r>:
 8005a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a34:	4606      	mov	r6, r0
 8005a36:	460f      	mov	r7, r1
 8005a38:	4614      	mov	r4, r2
 8005a3a:	18d5      	adds	r5, r2, r3
 8005a3c:	42ac      	cmp	r4, r5
 8005a3e:	d101      	bne.n	8005a44 <__sfputs_r+0x12>
 8005a40:	2000      	movs	r0, #0
 8005a42:	e007      	b.n	8005a54 <__sfputs_r+0x22>
 8005a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a48:	463a      	mov	r2, r7
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7ff ffda 	bl	8005a04 <__sfputc_r>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d1f3      	bne.n	8005a3c <__sfputs_r+0xa>
 8005a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a58 <_vfiprintf_r>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	460d      	mov	r5, r1
 8005a5e:	b09d      	sub	sp, #116	; 0x74
 8005a60:	4614      	mov	r4, r2
 8005a62:	4698      	mov	r8, r3
 8005a64:	4606      	mov	r6, r0
 8005a66:	b118      	cbz	r0, 8005a70 <_vfiprintf_r+0x18>
 8005a68:	6a03      	ldr	r3, [r0, #32]
 8005a6a:	b90b      	cbnz	r3, 8005a70 <_vfiprintf_r+0x18>
 8005a6c:	f7ff fcda 	bl	8005424 <__sinit>
 8005a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a72:	07d9      	lsls	r1, r3, #31
 8005a74:	d405      	bmi.n	8005a82 <_vfiprintf_r+0x2a>
 8005a76:	89ab      	ldrh	r3, [r5, #12]
 8005a78:	059a      	lsls	r2, r3, #22
 8005a7a:	d402      	bmi.n	8005a82 <_vfiprintf_r+0x2a>
 8005a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a7e:	f7ff fec6 	bl	800580e <__retarget_lock_acquire_recursive>
 8005a82:	89ab      	ldrh	r3, [r5, #12]
 8005a84:	071b      	lsls	r3, r3, #28
 8005a86:	d501      	bpl.n	8005a8c <_vfiprintf_r+0x34>
 8005a88:	692b      	ldr	r3, [r5, #16]
 8005a8a:	b99b      	cbnz	r3, 8005ab4 <_vfiprintf_r+0x5c>
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f7ff fdec 	bl	800566c <__swsetup_r>
 8005a94:	b170      	cbz	r0, 8005ab4 <_vfiprintf_r+0x5c>
 8005a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a98:	07dc      	lsls	r4, r3, #31
 8005a9a:	d504      	bpl.n	8005aa6 <_vfiprintf_r+0x4e>
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	b01d      	add	sp, #116	; 0x74
 8005aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa6:	89ab      	ldrh	r3, [r5, #12]
 8005aa8:	0598      	lsls	r0, r3, #22
 8005aaa:	d4f7      	bmi.n	8005a9c <_vfiprintf_r+0x44>
 8005aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aae:	f7ff feaf 	bl	8005810 <__retarget_lock_release_recursive>
 8005ab2:	e7f3      	b.n	8005a9c <_vfiprintf_r+0x44>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab8:	2320      	movs	r3, #32
 8005aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ac2:	2330      	movs	r3, #48	; 0x30
 8005ac4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c78 <_vfiprintf_r+0x220>
 8005ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005acc:	f04f 0901 	mov.w	r9, #1
 8005ad0:	4623      	mov	r3, r4
 8005ad2:	469a      	mov	sl, r3
 8005ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad8:	b10a      	cbz	r2, 8005ade <_vfiprintf_r+0x86>
 8005ada:	2a25      	cmp	r2, #37	; 0x25
 8005adc:	d1f9      	bne.n	8005ad2 <_vfiprintf_r+0x7a>
 8005ade:	ebba 0b04 	subs.w	fp, sl, r4
 8005ae2:	d00b      	beq.n	8005afc <_vfiprintf_r+0xa4>
 8005ae4:	465b      	mov	r3, fp
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4630      	mov	r0, r6
 8005aec:	f7ff ffa1 	bl	8005a32 <__sfputs_r>
 8005af0:	3001      	adds	r0, #1
 8005af2:	f000 80a9 	beq.w	8005c48 <_vfiprintf_r+0x1f0>
 8005af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af8:	445a      	add	r2, fp
 8005afa:	9209      	str	r2, [sp, #36]	; 0x24
 8005afc:	f89a 3000 	ldrb.w	r3, [sl]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 80a1 	beq.w	8005c48 <_vfiprintf_r+0x1f0>
 8005b06:	2300      	movs	r3, #0
 8005b08:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b10:	f10a 0a01 	add.w	sl, sl, #1
 8005b14:	9304      	str	r3, [sp, #16]
 8005b16:	9307      	str	r3, [sp, #28]
 8005b18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8005b1e:	4654      	mov	r4, sl
 8005b20:	2205      	movs	r2, #5
 8005b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b26:	4854      	ldr	r0, [pc, #336]	; (8005c78 <_vfiprintf_r+0x220>)
 8005b28:	f7fa fb8a 	bl	8000240 <memchr>
 8005b2c:	9a04      	ldr	r2, [sp, #16]
 8005b2e:	b9d8      	cbnz	r0, 8005b68 <_vfiprintf_r+0x110>
 8005b30:	06d1      	lsls	r1, r2, #27
 8005b32:	bf44      	itt	mi
 8005b34:	2320      	movmi	r3, #32
 8005b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b3a:	0713      	lsls	r3, r2, #28
 8005b3c:	bf44      	itt	mi
 8005b3e:	232b      	movmi	r3, #43	; 0x2b
 8005b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b44:	f89a 3000 	ldrb.w	r3, [sl]
 8005b48:	2b2a      	cmp	r3, #42	; 0x2a
 8005b4a:	d015      	beq.n	8005b78 <_vfiprintf_r+0x120>
 8005b4c:	9a07      	ldr	r2, [sp, #28]
 8005b4e:	4654      	mov	r4, sl
 8005b50:	2000      	movs	r0, #0
 8005b52:	f04f 0c0a 	mov.w	ip, #10
 8005b56:	4621      	mov	r1, r4
 8005b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b5c:	3b30      	subs	r3, #48	; 0x30
 8005b5e:	2b09      	cmp	r3, #9
 8005b60:	d94d      	bls.n	8005bfe <_vfiprintf_r+0x1a6>
 8005b62:	b1b0      	cbz	r0, 8005b92 <_vfiprintf_r+0x13a>
 8005b64:	9207      	str	r2, [sp, #28]
 8005b66:	e014      	b.n	8005b92 <_vfiprintf_r+0x13a>
 8005b68:	eba0 0308 	sub.w	r3, r0, r8
 8005b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b70:	4313      	orrs	r3, r2
 8005b72:	9304      	str	r3, [sp, #16]
 8005b74:	46a2      	mov	sl, r4
 8005b76:	e7d2      	b.n	8005b1e <_vfiprintf_r+0xc6>
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	1d19      	adds	r1, r3, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	9103      	str	r1, [sp, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfbb      	ittet	lt
 8005b84:	425b      	neglt	r3, r3
 8005b86:	f042 0202 	orrlt.w	r2, r2, #2
 8005b8a:	9307      	strge	r3, [sp, #28]
 8005b8c:	9307      	strlt	r3, [sp, #28]
 8005b8e:	bfb8      	it	lt
 8005b90:	9204      	strlt	r2, [sp, #16]
 8005b92:	7823      	ldrb	r3, [r4, #0]
 8005b94:	2b2e      	cmp	r3, #46	; 0x2e
 8005b96:	d10c      	bne.n	8005bb2 <_vfiprintf_r+0x15a>
 8005b98:	7863      	ldrb	r3, [r4, #1]
 8005b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b9c:	d134      	bne.n	8005c08 <_vfiprintf_r+0x1b0>
 8005b9e:	9b03      	ldr	r3, [sp, #12]
 8005ba0:	1d1a      	adds	r2, r3, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	9203      	str	r2, [sp, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bfb8      	it	lt
 8005baa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bae:	3402      	adds	r4, #2
 8005bb0:	9305      	str	r3, [sp, #20]
 8005bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c88 <_vfiprintf_r+0x230>
 8005bb6:	7821      	ldrb	r1, [r4, #0]
 8005bb8:	2203      	movs	r2, #3
 8005bba:	4650      	mov	r0, sl
 8005bbc:	f7fa fb40 	bl	8000240 <memchr>
 8005bc0:	b138      	cbz	r0, 8005bd2 <_vfiprintf_r+0x17a>
 8005bc2:	9b04      	ldr	r3, [sp, #16]
 8005bc4:	eba0 000a 	sub.w	r0, r0, sl
 8005bc8:	2240      	movs	r2, #64	; 0x40
 8005bca:	4082      	lsls	r2, r0
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	3401      	adds	r4, #1
 8005bd0:	9304      	str	r3, [sp, #16]
 8005bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd6:	4829      	ldr	r0, [pc, #164]	; (8005c7c <_vfiprintf_r+0x224>)
 8005bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bdc:	2206      	movs	r2, #6
 8005bde:	f7fa fb2f 	bl	8000240 <memchr>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d03f      	beq.n	8005c66 <_vfiprintf_r+0x20e>
 8005be6:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <_vfiprintf_r+0x228>)
 8005be8:	bb1b      	cbnz	r3, 8005c32 <_vfiprintf_r+0x1da>
 8005bea:	9b03      	ldr	r3, [sp, #12]
 8005bec:	3307      	adds	r3, #7
 8005bee:	f023 0307 	bic.w	r3, r3, #7
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	9303      	str	r3, [sp, #12]
 8005bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf8:	443b      	add	r3, r7
 8005bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfc:	e768      	b.n	8005ad0 <_vfiprintf_r+0x78>
 8005bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c02:	460c      	mov	r4, r1
 8005c04:	2001      	movs	r0, #1
 8005c06:	e7a6      	b.n	8005b56 <_vfiprintf_r+0xfe>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	3401      	adds	r4, #1
 8005c0c:	9305      	str	r3, [sp, #20]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	f04f 0c0a 	mov.w	ip, #10
 8005c14:	4620      	mov	r0, r4
 8005c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c1a:	3a30      	subs	r2, #48	; 0x30
 8005c1c:	2a09      	cmp	r2, #9
 8005c1e:	d903      	bls.n	8005c28 <_vfiprintf_r+0x1d0>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0c6      	beq.n	8005bb2 <_vfiprintf_r+0x15a>
 8005c24:	9105      	str	r1, [sp, #20]
 8005c26:	e7c4      	b.n	8005bb2 <_vfiprintf_r+0x15a>
 8005c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e7f0      	b.n	8005c14 <_vfiprintf_r+0x1bc>
 8005c32:	ab03      	add	r3, sp, #12
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	462a      	mov	r2, r5
 8005c38:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <_vfiprintf_r+0x22c>)
 8005c3a:	a904      	add	r1, sp, #16
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f3af 8000 	nop.w
 8005c42:	4607      	mov	r7, r0
 8005c44:	1c78      	adds	r0, r7, #1
 8005c46:	d1d6      	bne.n	8005bf6 <_vfiprintf_r+0x19e>
 8005c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c4a:	07d9      	lsls	r1, r3, #31
 8005c4c:	d405      	bmi.n	8005c5a <_vfiprintf_r+0x202>
 8005c4e:	89ab      	ldrh	r3, [r5, #12]
 8005c50:	059a      	lsls	r2, r3, #22
 8005c52:	d402      	bmi.n	8005c5a <_vfiprintf_r+0x202>
 8005c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c56:	f7ff fddb 	bl	8005810 <__retarget_lock_release_recursive>
 8005c5a:	89ab      	ldrh	r3, [r5, #12]
 8005c5c:	065b      	lsls	r3, r3, #25
 8005c5e:	f53f af1d 	bmi.w	8005a9c <_vfiprintf_r+0x44>
 8005c62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c64:	e71c      	b.n	8005aa0 <_vfiprintf_r+0x48>
 8005c66:	ab03      	add	r3, sp, #12
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <_vfiprintf_r+0x22c>)
 8005c6e:	a904      	add	r1, sp, #16
 8005c70:	4630      	mov	r0, r6
 8005c72:	f000 f879 	bl	8005d68 <_printf_i>
 8005c76:	e7e4      	b.n	8005c42 <_vfiprintf_r+0x1ea>
 8005c78:	080062a4 	.word	0x080062a4
 8005c7c:	080062ae 	.word	0x080062ae
 8005c80:	00000000 	.word	0x00000000
 8005c84:	08005a33 	.word	0x08005a33
 8005c88:	080062aa 	.word	0x080062aa

08005c8c <_printf_common>:
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	4616      	mov	r6, r2
 8005c92:	4699      	mov	r9, r3
 8005c94:	688a      	ldr	r2, [r1, #8]
 8005c96:	690b      	ldr	r3, [r1, #16]
 8005c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	bfb8      	it	lt
 8005ca0:	4613      	movlt	r3, r2
 8005ca2:	6033      	str	r3, [r6, #0]
 8005ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ca8:	4607      	mov	r7, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	b10a      	cbz	r2, 8005cb2 <_printf_common+0x26>
 8005cae:	3301      	adds	r3, #1
 8005cb0:	6033      	str	r3, [r6, #0]
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	0699      	lsls	r1, r3, #26
 8005cb6:	bf42      	ittt	mi
 8005cb8:	6833      	ldrmi	r3, [r6, #0]
 8005cba:	3302      	addmi	r3, #2
 8005cbc:	6033      	strmi	r3, [r6, #0]
 8005cbe:	6825      	ldr	r5, [r4, #0]
 8005cc0:	f015 0506 	ands.w	r5, r5, #6
 8005cc4:	d106      	bne.n	8005cd4 <_printf_common+0x48>
 8005cc6:	f104 0a19 	add.w	sl, r4, #25
 8005cca:	68e3      	ldr	r3, [r4, #12]
 8005ccc:	6832      	ldr	r2, [r6, #0]
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	42ab      	cmp	r3, r5
 8005cd2:	dc26      	bgt.n	8005d22 <_printf_common+0x96>
 8005cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cd8:	1e13      	subs	r3, r2, #0
 8005cda:	6822      	ldr	r2, [r4, #0]
 8005cdc:	bf18      	it	ne
 8005cde:	2301      	movne	r3, #1
 8005ce0:	0692      	lsls	r2, r2, #26
 8005ce2:	d42b      	bmi.n	8005d3c <_printf_common+0xb0>
 8005ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ce8:	4649      	mov	r1, r9
 8005cea:	4638      	mov	r0, r7
 8005cec:	47c0      	blx	r8
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d01e      	beq.n	8005d30 <_printf_common+0xa4>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	6922      	ldr	r2, [r4, #16]
 8005cf6:	f003 0306 	and.w	r3, r3, #6
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	bf02      	ittt	eq
 8005cfe:	68e5      	ldreq	r5, [r4, #12]
 8005d00:	6833      	ldreq	r3, [r6, #0]
 8005d02:	1aed      	subeq	r5, r5, r3
 8005d04:	68a3      	ldr	r3, [r4, #8]
 8005d06:	bf0c      	ite	eq
 8005d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d0c:	2500      	movne	r5, #0
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	bfc4      	itt	gt
 8005d12:	1a9b      	subgt	r3, r3, r2
 8005d14:	18ed      	addgt	r5, r5, r3
 8005d16:	2600      	movs	r6, #0
 8005d18:	341a      	adds	r4, #26
 8005d1a:	42b5      	cmp	r5, r6
 8005d1c:	d11a      	bne.n	8005d54 <_printf_common+0xc8>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e008      	b.n	8005d34 <_printf_common+0xa8>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4652      	mov	r2, sl
 8005d26:	4649      	mov	r1, r9
 8005d28:	4638      	mov	r0, r7
 8005d2a:	47c0      	blx	r8
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d103      	bne.n	8005d38 <_printf_common+0xac>
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d38:	3501      	adds	r5, #1
 8005d3a:	e7c6      	b.n	8005cca <_printf_common+0x3e>
 8005d3c:	18e1      	adds	r1, r4, r3
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	2030      	movs	r0, #48	; 0x30
 8005d42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d46:	4422      	add	r2, r4
 8005d48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d50:	3302      	adds	r3, #2
 8005d52:	e7c7      	b.n	8005ce4 <_printf_common+0x58>
 8005d54:	2301      	movs	r3, #1
 8005d56:	4622      	mov	r2, r4
 8005d58:	4649      	mov	r1, r9
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	47c0      	blx	r8
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d0e6      	beq.n	8005d30 <_printf_common+0xa4>
 8005d62:	3601      	adds	r6, #1
 8005d64:	e7d9      	b.n	8005d1a <_printf_common+0x8e>
	...

08005d68 <_printf_i>:
 8005d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	7e0f      	ldrb	r7, [r1, #24]
 8005d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d70:	2f78      	cmp	r7, #120	; 0x78
 8005d72:	4691      	mov	r9, r2
 8005d74:	4680      	mov	r8, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	469a      	mov	sl, r3
 8005d7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d7e:	d807      	bhi.n	8005d90 <_printf_i+0x28>
 8005d80:	2f62      	cmp	r7, #98	; 0x62
 8005d82:	d80a      	bhi.n	8005d9a <_printf_i+0x32>
 8005d84:	2f00      	cmp	r7, #0
 8005d86:	f000 80d4 	beq.w	8005f32 <_printf_i+0x1ca>
 8005d8a:	2f58      	cmp	r7, #88	; 0x58
 8005d8c:	f000 80c0 	beq.w	8005f10 <_printf_i+0x1a8>
 8005d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d98:	e03a      	b.n	8005e10 <_printf_i+0xa8>
 8005d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d9e:	2b15      	cmp	r3, #21
 8005da0:	d8f6      	bhi.n	8005d90 <_printf_i+0x28>
 8005da2:	a101      	add	r1, pc, #4	; (adr r1, 8005da8 <_printf_i+0x40>)
 8005da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005da8:	08005e01 	.word	0x08005e01
 8005dac:	08005e15 	.word	0x08005e15
 8005db0:	08005d91 	.word	0x08005d91
 8005db4:	08005d91 	.word	0x08005d91
 8005db8:	08005d91 	.word	0x08005d91
 8005dbc:	08005d91 	.word	0x08005d91
 8005dc0:	08005e15 	.word	0x08005e15
 8005dc4:	08005d91 	.word	0x08005d91
 8005dc8:	08005d91 	.word	0x08005d91
 8005dcc:	08005d91 	.word	0x08005d91
 8005dd0:	08005d91 	.word	0x08005d91
 8005dd4:	08005f19 	.word	0x08005f19
 8005dd8:	08005e41 	.word	0x08005e41
 8005ddc:	08005ed3 	.word	0x08005ed3
 8005de0:	08005d91 	.word	0x08005d91
 8005de4:	08005d91 	.word	0x08005d91
 8005de8:	08005f3b 	.word	0x08005f3b
 8005dec:	08005d91 	.word	0x08005d91
 8005df0:	08005e41 	.word	0x08005e41
 8005df4:	08005d91 	.word	0x08005d91
 8005df8:	08005d91 	.word	0x08005d91
 8005dfc:	08005edb 	.word	0x08005edb
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	1d1a      	adds	r2, r3, #4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	602a      	str	r2, [r5, #0]
 8005e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e10:	2301      	movs	r3, #1
 8005e12:	e09f      	b.n	8005f54 <_printf_i+0x1ec>
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	0607      	lsls	r7, r0, #24
 8005e1a:	f103 0104 	add.w	r1, r3, #4
 8005e1e:	6029      	str	r1, [r5, #0]
 8005e20:	d501      	bpl.n	8005e26 <_printf_i+0xbe>
 8005e22:	681e      	ldr	r6, [r3, #0]
 8005e24:	e003      	b.n	8005e2e <_printf_i+0xc6>
 8005e26:	0646      	lsls	r6, r0, #25
 8005e28:	d5fb      	bpl.n	8005e22 <_printf_i+0xba>
 8005e2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e2e:	2e00      	cmp	r6, #0
 8005e30:	da03      	bge.n	8005e3a <_printf_i+0xd2>
 8005e32:	232d      	movs	r3, #45	; 0x2d
 8005e34:	4276      	negs	r6, r6
 8005e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3a:	485a      	ldr	r0, [pc, #360]	; (8005fa4 <_printf_i+0x23c>)
 8005e3c:	230a      	movs	r3, #10
 8005e3e:	e012      	b.n	8005e66 <_printf_i+0xfe>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	6820      	ldr	r0, [r4, #0]
 8005e44:	1d19      	adds	r1, r3, #4
 8005e46:	6029      	str	r1, [r5, #0]
 8005e48:	0605      	lsls	r5, r0, #24
 8005e4a:	d501      	bpl.n	8005e50 <_printf_i+0xe8>
 8005e4c:	681e      	ldr	r6, [r3, #0]
 8005e4e:	e002      	b.n	8005e56 <_printf_i+0xee>
 8005e50:	0641      	lsls	r1, r0, #25
 8005e52:	d5fb      	bpl.n	8005e4c <_printf_i+0xe4>
 8005e54:	881e      	ldrh	r6, [r3, #0]
 8005e56:	4853      	ldr	r0, [pc, #332]	; (8005fa4 <_printf_i+0x23c>)
 8005e58:	2f6f      	cmp	r7, #111	; 0x6f
 8005e5a:	bf0c      	ite	eq
 8005e5c:	2308      	moveq	r3, #8
 8005e5e:	230a      	movne	r3, #10
 8005e60:	2100      	movs	r1, #0
 8005e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e66:	6865      	ldr	r5, [r4, #4]
 8005e68:	60a5      	str	r5, [r4, #8]
 8005e6a:	2d00      	cmp	r5, #0
 8005e6c:	bfa2      	ittt	ge
 8005e6e:	6821      	ldrge	r1, [r4, #0]
 8005e70:	f021 0104 	bicge.w	r1, r1, #4
 8005e74:	6021      	strge	r1, [r4, #0]
 8005e76:	b90e      	cbnz	r6, 8005e7c <_printf_i+0x114>
 8005e78:	2d00      	cmp	r5, #0
 8005e7a:	d04b      	beq.n	8005f14 <_printf_i+0x1ac>
 8005e7c:	4615      	mov	r5, r2
 8005e7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e82:	fb03 6711 	mls	r7, r3, r1, r6
 8005e86:	5dc7      	ldrb	r7, [r0, r7]
 8005e88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e8c:	4637      	mov	r7, r6
 8005e8e:	42bb      	cmp	r3, r7
 8005e90:	460e      	mov	r6, r1
 8005e92:	d9f4      	bls.n	8005e7e <_printf_i+0x116>
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d10b      	bne.n	8005eb0 <_printf_i+0x148>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	07de      	lsls	r6, r3, #31
 8005e9c:	d508      	bpl.n	8005eb0 <_printf_i+0x148>
 8005e9e:	6923      	ldr	r3, [r4, #16]
 8005ea0:	6861      	ldr	r1, [r4, #4]
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	bfde      	ittt	le
 8005ea6:	2330      	movle	r3, #48	; 0x30
 8005ea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005eac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005eb0:	1b52      	subs	r2, r2, r5
 8005eb2:	6122      	str	r2, [r4, #16]
 8005eb4:	f8cd a000 	str.w	sl, [sp]
 8005eb8:	464b      	mov	r3, r9
 8005eba:	aa03      	add	r2, sp, #12
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7ff fee4 	bl	8005c8c <_printf_common>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d14a      	bne.n	8005f5e <_printf_i+0x1f6>
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	b004      	add	sp, #16
 8005ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	f043 0320 	orr.w	r3, r3, #32
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	4833      	ldr	r0, [pc, #204]	; (8005fa8 <_printf_i+0x240>)
 8005edc:	2778      	movs	r7, #120	; 0x78
 8005ede:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	6829      	ldr	r1, [r5, #0]
 8005ee6:	061f      	lsls	r7, r3, #24
 8005ee8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005eec:	d402      	bmi.n	8005ef4 <_printf_i+0x18c>
 8005eee:	065f      	lsls	r7, r3, #25
 8005ef0:	bf48      	it	mi
 8005ef2:	b2b6      	uxthmi	r6, r6
 8005ef4:	07df      	lsls	r7, r3, #31
 8005ef6:	bf48      	it	mi
 8005ef8:	f043 0320 	orrmi.w	r3, r3, #32
 8005efc:	6029      	str	r1, [r5, #0]
 8005efe:	bf48      	it	mi
 8005f00:	6023      	strmi	r3, [r4, #0]
 8005f02:	b91e      	cbnz	r6, 8005f0c <_printf_i+0x1a4>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	f023 0320 	bic.w	r3, r3, #32
 8005f0a:	6023      	str	r3, [r4, #0]
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	e7a7      	b.n	8005e60 <_printf_i+0xf8>
 8005f10:	4824      	ldr	r0, [pc, #144]	; (8005fa4 <_printf_i+0x23c>)
 8005f12:	e7e4      	b.n	8005ede <_printf_i+0x176>
 8005f14:	4615      	mov	r5, r2
 8005f16:	e7bd      	b.n	8005e94 <_printf_i+0x12c>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	6826      	ldr	r6, [r4, #0]
 8005f1c:	6961      	ldr	r1, [r4, #20]
 8005f1e:	1d18      	adds	r0, r3, #4
 8005f20:	6028      	str	r0, [r5, #0]
 8005f22:	0635      	lsls	r5, r6, #24
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	d501      	bpl.n	8005f2c <_printf_i+0x1c4>
 8005f28:	6019      	str	r1, [r3, #0]
 8005f2a:	e002      	b.n	8005f32 <_printf_i+0x1ca>
 8005f2c:	0670      	lsls	r0, r6, #25
 8005f2e:	d5fb      	bpl.n	8005f28 <_printf_i+0x1c0>
 8005f30:	8019      	strh	r1, [r3, #0]
 8005f32:	2300      	movs	r3, #0
 8005f34:	6123      	str	r3, [r4, #16]
 8005f36:	4615      	mov	r5, r2
 8005f38:	e7bc      	b.n	8005eb4 <_printf_i+0x14c>
 8005f3a:	682b      	ldr	r3, [r5, #0]
 8005f3c:	1d1a      	adds	r2, r3, #4
 8005f3e:	602a      	str	r2, [r5, #0]
 8005f40:	681d      	ldr	r5, [r3, #0]
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	2100      	movs	r1, #0
 8005f46:	4628      	mov	r0, r5
 8005f48:	f7fa f97a 	bl	8000240 <memchr>
 8005f4c:	b108      	cbz	r0, 8005f52 <_printf_i+0x1ea>
 8005f4e:	1b40      	subs	r0, r0, r5
 8005f50:	6060      	str	r0, [r4, #4]
 8005f52:	6863      	ldr	r3, [r4, #4]
 8005f54:	6123      	str	r3, [r4, #16]
 8005f56:	2300      	movs	r3, #0
 8005f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f5c:	e7aa      	b.n	8005eb4 <_printf_i+0x14c>
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	462a      	mov	r2, r5
 8005f62:	4649      	mov	r1, r9
 8005f64:	4640      	mov	r0, r8
 8005f66:	47d0      	blx	sl
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d0ad      	beq.n	8005ec8 <_printf_i+0x160>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	079b      	lsls	r3, r3, #30
 8005f70:	d413      	bmi.n	8005f9a <_printf_i+0x232>
 8005f72:	68e0      	ldr	r0, [r4, #12]
 8005f74:	9b03      	ldr	r3, [sp, #12]
 8005f76:	4298      	cmp	r0, r3
 8005f78:	bfb8      	it	lt
 8005f7a:	4618      	movlt	r0, r3
 8005f7c:	e7a6      	b.n	8005ecc <_printf_i+0x164>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4632      	mov	r2, r6
 8005f82:	4649      	mov	r1, r9
 8005f84:	4640      	mov	r0, r8
 8005f86:	47d0      	blx	sl
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d09d      	beq.n	8005ec8 <_printf_i+0x160>
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	68e3      	ldr	r3, [r4, #12]
 8005f90:	9903      	ldr	r1, [sp, #12]
 8005f92:	1a5b      	subs	r3, r3, r1
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	dcf2      	bgt.n	8005f7e <_printf_i+0x216>
 8005f98:	e7eb      	b.n	8005f72 <_printf_i+0x20a>
 8005f9a:	2500      	movs	r5, #0
 8005f9c:	f104 0619 	add.w	r6, r4, #25
 8005fa0:	e7f5      	b.n	8005f8e <_printf_i+0x226>
 8005fa2:	bf00      	nop
 8005fa4:	080062b5 	.word	0x080062b5
 8005fa8:	080062c6 	.word	0x080062c6

08005fac <__sflush_r>:
 8005fac:	898a      	ldrh	r2, [r1, #12]
 8005fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	0710      	lsls	r0, r2, #28
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	d458      	bmi.n	800606c <__sflush_r+0xc0>
 8005fba:	684b      	ldr	r3, [r1, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dc05      	bgt.n	8005fcc <__sflush_r+0x20>
 8005fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	dc02      	bgt.n	8005fcc <__sflush_r+0x20>
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fce:	2e00      	cmp	r6, #0
 8005fd0:	d0f9      	beq.n	8005fc6 <__sflush_r+0x1a>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fd8:	682f      	ldr	r7, [r5, #0]
 8005fda:	6a21      	ldr	r1, [r4, #32]
 8005fdc:	602b      	str	r3, [r5, #0]
 8005fde:	d032      	beq.n	8006046 <__sflush_r+0x9a>
 8005fe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	075a      	lsls	r2, r3, #29
 8005fe6:	d505      	bpl.n	8005ff4 <__sflush_r+0x48>
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	1ac0      	subs	r0, r0, r3
 8005fec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fee:	b10b      	cbz	r3, 8005ff4 <__sflush_r+0x48>
 8005ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ff2:	1ac0      	subs	r0, r0, r3
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ffa:	6a21      	ldr	r1, [r4, #32]
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b0      	blx	r6
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	d106      	bne.n	8006014 <__sflush_r+0x68>
 8006006:	6829      	ldr	r1, [r5, #0]
 8006008:	291d      	cmp	r1, #29
 800600a:	d82b      	bhi.n	8006064 <__sflush_r+0xb8>
 800600c:	4a29      	ldr	r2, [pc, #164]	; (80060b4 <__sflush_r+0x108>)
 800600e:	410a      	asrs	r2, r1
 8006010:	07d6      	lsls	r6, r2, #31
 8006012:	d427      	bmi.n	8006064 <__sflush_r+0xb8>
 8006014:	2200      	movs	r2, #0
 8006016:	6062      	str	r2, [r4, #4]
 8006018:	04d9      	lsls	r1, r3, #19
 800601a:	6922      	ldr	r2, [r4, #16]
 800601c:	6022      	str	r2, [r4, #0]
 800601e:	d504      	bpl.n	800602a <__sflush_r+0x7e>
 8006020:	1c42      	adds	r2, r0, #1
 8006022:	d101      	bne.n	8006028 <__sflush_r+0x7c>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b903      	cbnz	r3, 800602a <__sflush_r+0x7e>
 8006028:	6560      	str	r0, [r4, #84]	; 0x54
 800602a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800602c:	602f      	str	r7, [r5, #0]
 800602e:	2900      	cmp	r1, #0
 8006030:	d0c9      	beq.n	8005fc6 <__sflush_r+0x1a>
 8006032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006036:	4299      	cmp	r1, r3
 8006038:	d002      	beq.n	8006040 <__sflush_r+0x94>
 800603a:	4628      	mov	r0, r5
 800603c:	f7ff fbea 	bl	8005814 <_free_r>
 8006040:	2000      	movs	r0, #0
 8006042:	6360      	str	r0, [r4, #52]	; 0x34
 8006044:	e7c0      	b.n	8005fc8 <__sflush_r+0x1c>
 8006046:	2301      	movs	r3, #1
 8006048:	4628      	mov	r0, r5
 800604a:	47b0      	blx	r6
 800604c:	1c41      	adds	r1, r0, #1
 800604e:	d1c8      	bne.n	8005fe2 <__sflush_r+0x36>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0c5      	beq.n	8005fe2 <__sflush_r+0x36>
 8006056:	2b1d      	cmp	r3, #29
 8006058:	d001      	beq.n	800605e <__sflush_r+0xb2>
 800605a:	2b16      	cmp	r3, #22
 800605c:	d101      	bne.n	8006062 <__sflush_r+0xb6>
 800605e:	602f      	str	r7, [r5, #0]
 8006060:	e7b1      	b.n	8005fc6 <__sflush_r+0x1a>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	e7ad      	b.n	8005fc8 <__sflush_r+0x1c>
 800606c:	690f      	ldr	r7, [r1, #16]
 800606e:	2f00      	cmp	r7, #0
 8006070:	d0a9      	beq.n	8005fc6 <__sflush_r+0x1a>
 8006072:	0793      	lsls	r3, r2, #30
 8006074:	680e      	ldr	r6, [r1, #0]
 8006076:	bf08      	it	eq
 8006078:	694b      	ldreq	r3, [r1, #20]
 800607a:	600f      	str	r7, [r1, #0]
 800607c:	bf18      	it	ne
 800607e:	2300      	movne	r3, #0
 8006080:	eba6 0807 	sub.w	r8, r6, r7
 8006084:	608b      	str	r3, [r1, #8]
 8006086:	f1b8 0f00 	cmp.w	r8, #0
 800608a:	dd9c      	ble.n	8005fc6 <__sflush_r+0x1a>
 800608c:	6a21      	ldr	r1, [r4, #32]
 800608e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006090:	4643      	mov	r3, r8
 8006092:	463a      	mov	r2, r7
 8006094:	4628      	mov	r0, r5
 8006096:	47b0      	blx	r6
 8006098:	2800      	cmp	r0, #0
 800609a:	dc06      	bgt.n	80060aa <__sflush_r+0xfe>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060a2:	81a3      	strh	r3, [r4, #12]
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	e78e      	b.n	8005fc8 <__sflush_r+0x1c>
 80060aa:	4407      	add	r7, r0
 80060ac:	eba8 0800 	sub.w	r8, r8, r0
 80060b0:	e7e9      	b.n	8006086 <__sflush_r+0xda>
 80060b2:	bf00      	nop
 80060b4:	dfbffffe 	.word	0xdfbffffe

080060b8 <_fflush_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	690b      	ldr	r3, [r1, #16]
 80060bc:	4605      	mov	r5, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	b913      	cbnz	r3, 80060c8 <_fflush_r+0x10>
 80060c2:	2500      	movs	r5, #0
 80060c4:	4628      	mov	r0, r5
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	b118      	cbz	r0, 80060d2 <_fflush_r+0x1a>
 80060ca:	6a03      	ldr	r3, [r0, #32]
 80060cc:	b90b      	cbnz	r3, 80060d2 <_fflush_r+0x1a>
 80060ce:	f7ff f9a9 	bl	8005424 <__sinit>
 80060d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f3      	beq.n	80060c2 <_fflush_r+0xa>
 80060da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060dc:	07d0      	lsls	r0, r2, #31
 80060de:	d404      	bmi.n	80060ea <_fflush_r+0x32>
 80060e0:	0599      	lsls	r1, r3, #22
 80060e2:	d402      	bmi.n	80060ea <_fflush_r+0x32>
 80060e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060e6:	f7ff fb92 	bl	800580e <__retarget_lock_acquire_recursive>
 80060ea:	4628      	mov	r0, r5
 80060ec:	4621      	mov	r1, r4
 80060ee:	f7ff ff5d 	bl	8005fac <__sflush_r>
 80060f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060f4:	07da      	lsls	r2, r3, #31
 80060f6:	4605      	mov	r5, r0
 80060f8:	d4e4      	bmi.n	80060c4 <_fflush_r+0xc>
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	059b      	lsls	r3, r3, #22
 80060fe:	d4e1      	bmi.n	80060c4 <_fflush_r+0xc>
 8006100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006102:	f7ff fb85 	bl	8005810 <__retarget_lock_release_recursive>
 8006106:	e7dd      	b.n	80060c4 <_fflush_r+0xc>

08006108 <__swhatbuf_r>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	460c      	mov	r4, r1
 800610c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006110:	2900      	cmp	r1, #0
 8006112:	b096      	sub	sp, #88	; 0x58
 8006114:	4615      	mov	r5, r2
 8006116:	461e      	mov	r6, r3
 8006118:	da0d      	bge.n	8006136 <__swhatbuf_r+0x2e>
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	bf0c      	ite	eq
 8006126:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800612a:	2340      	movne	r3, #64	; 0x40
 800612c:	2000      	movs	r0, #0
 800612e:	6031      	str	r1, [r6, #0]
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	b016      	add	sp, #88	; 0x58
 8006134:	bd70      	pop	{r4, r5, r6, pc}
 8006136:	466a      	mov	r2, sp
 8006138:	f000 f848 	bl	80061cc <_fstat_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	dbec      	blt.n	800611a <__swhatbuf_r+0x12>
 8006140:	9901      	ldr	r1, [sp, #4]
 8006142:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006146:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800614a:	4259      	negs	r1, r3
 800614c:	4159      	adcs	r1, r3
 800614e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006152:	e7eb      	b.n	800612c <__swhatbuf_r+0x24>

08006154 <__smakebuf_r>:
 8006154:	898b      	ldrh	r3, [r1, #12]
 8006156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006158:	079d      	lsls	r5, r3, #30
 800615a:	4606      	mov	r6, r0
 800615c:	460c      	mov	r4, r1
 800615e:	d507      	bpl.n	8006170 <__smakebuf_r+0x1c>
 8006160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	2301      	movs	r3, #1
 800616a:	6163      	str	r3, [r4, #20]
 800616c:	b002      	add	sp, #8
 800616e:	bd70      	pop	{r4, r5, r6, pc}
 8006170:	ab01      	add	r3, sp, #4
 8006172:	466a      	mov	r2, sp
 8006174:	f7ff ffc8 	bl	8006108 <__swhatbuf_r>
 8006178:	9900      	ldr	r1, [sp, #0]
 800617a:	4605      	mov	r5, r0
 800617c:	4630      	mov	r0, r6
 800617e:	f7ff fbb5 	bl	80058ec <_malloc_r>
 8006182:	b948      	cbnz	r0, 8006198 <__smakebuf_r+0x44>
 8006184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006188:	059a      	lsls	r2, r3, #22
 800618a:	d4ef      	bmi.n	800616c <__smakebuf_r+0x18>
 800618c:	f023 0303 	bic.w	r3, r3, #3
 8006190:	f043 0302 	orr.w	r3, r3, #2
 8006194:	81a3      	strh	r3, [r4, #12]
 8006196:	e7e3      	b.n	8006160 <__smakebuf_r+0xc>
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	6020      	str	r0, [r4, #0]
 800619c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	9b00      	ldr	r3, [sp, #0]
 80061a4:	6163      	str	r3, [r4, #20]
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	6120      	str	r0, [r4, #16]
 80061aa:	b15b      	cbz	r3, 80061c4 <__smakebuf_r+0x70>
 80061ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061b0:	4630      	mov	r0, r6
 80061b2:	f000 f81d 	bl	80061f0 <_isatty_r>
 80061b6:	b128      	cbz	r0, 80061c4 <__smakebuf_r+0x70>
 80061b8:	89a3      	ldrh	r3, [r4, #12]
 80061ba:	f023 0303 	bic.w	r3, r3, #3
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	81a3      	strh	r3, [r4, #12]
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	431d      	orrs	r5, r3
 80061c8:	81a5      	strh	r5, [r4, #12]
 80061ca:	e7cf      	b.n	800616c <__smakebuf_r+0x18>

080061cc <_fstat_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d07      	ldr	r5, [pc, #28]	; (80061ec <_fstat_r+0x20>)
 80061d0:	2300      	movs	r3, #0
 80061d2:	4604      	mov	r4, r0
 80061d4:	4608      	mov	r0, r1
 80061d6:	4611      	mov	r1, r2
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	f7fa ffe2 	bl	80011a2 <_fstat>
 80061de:	1c43      	adds	r3, r0, #1
 80061e0:	d102      	bne.n	80061e8 <_fstat_r+0x1c>
 80061e2:	682b      	ldr	r3, [r5, #0]
 80061e4:	b103      	cbz	r3, 80061e8 <_fstat_r+0x1c>
 80061e6:	6023      	str	r3, [r4, #0]
 80061e8:	bd38      	pop	{r3, r4, r5, pc}
 80061ea:	bf00      	nop
 80061ec:	20000a4c 	.word	0x20000a4c

080061f0 <_isatty_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d06      	ldr	r5, [pc, #24]	; (800620c <_isatty_r+0x1c>)
 80061f4:	2300      	movs	r3, #0
 80061f6:	4604      	mov	r4, r0
 80061f8:	4608      	mov	r0, r1
 80061fa:	602b      	str	r3, [r5, #0]
 80061fc:	f7fa ffe1 	bl	80011c2 <_isatty>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d102      	bne.n	800620a <_isatty_r+0x1a>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	b103      	cbz	r3, 800620a <_isatty_r+0x1a>
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	20000a4c 	.word	0x20000a4c

08006210 <_sbrk_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4d06      	ldr	r5, [pc, #24]	; (800622c <_sbrk_r+0x1c>)
 8006214:	2300      	movs	r3, #0
 8006216:	4604      	mov	r4, r0
 8006218:	4608      	mov	r0, r1
 800621a:	602b      	str	r3, [r5, #0]
 800621c:	f7fa ffea 	bl	80011f4 <_sbrk>
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d102      	bne.n	800622a <_sbrk_r+0x1a>
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	b103      	cbz	r3, 800622a <_sbrk_r+0x1a>
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	20000a4c 	.word	0x20000a4c

08006230 <_init>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	bf00      	nop
 8006234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006236:	bc08      	pop	{r3}
 8006238:	469e      	mov	lr, r3
 800623a:	4770      	bx	lr

0800623c <_fini>:
 800623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623e:	bf00      	nop
 8006240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006242:	bc08      	pop	{r3}
 8006244:	469e      	mov	lr, r3
 8006246:	4770      	bx	lr
